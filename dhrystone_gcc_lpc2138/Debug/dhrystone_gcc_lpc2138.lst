
dhrystone_gcc_lpc2138.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000503c  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000844  40000200  0000503c  00010200  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000028f0  40000a44  00005880  00010a44  2**2
                  ALLOC
  3 .heap         00002000  40003334  00008170  00010a44  2**0
                  ALLOC
  4 .stack        0000060c  40005334  40005334  00010a50  2**4
                  CONTENTS
  5 .comment      00000022  00000000  00000000  0001105c  2**0
                  CONTENTS, READONLY
  6 .ARM.attributes 00000030  00000000  00000000  0001107e  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000408  00000000  00000000  000110b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000ffae  00000000  00000000  000114b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00002b4c  00000000  00000000  00021466  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00003232  00000000  00000000  00023fb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000b10  00000000  00000000  000271e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000074aa  00000000  00000000  00027cf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000096f1  00000000  00000000  0002f19e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001670  00000000  00000000  00038890  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00003416  00000000  00000000  00039f00  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__Vectors>:
// Exception Vectors
// Mapped to Address 0.
// Absolute addressing mode must be used.

__Vectors:
            LDR     PC,Reset_Addr
       0:	e59ff018 	ldr	pc, [pc, #24]	; 20 <Reset_Addr>
            LDR     PC,Undef_Addr
       4:	e59ff018 	ldr	pc, [pc, #24]	; 24 <Undef_Addr>
            LDR     PC,SWI_Addr
       8:	e59ff018 	ldr	pc, [pc, #24]	; 28 <SWI_Addr>
            LDR     PC,PAbt_Addr
       c:	e59ff018 	ldr	pc, [pc, #24]	; 2c <PAbt_Addr>
            LDR     PC,DAbt_Addr
      10:	e59ff018 	ldr	pc, [pc, #24]	; 30 <DAbt_Addr>
            NOP                            /* Reserved Vector */
      14:	e1a00000 	nop			; (mov r0, r0)
            LDR     PC,[PC, #-0x0FF0]      /* Vector from VicVectAddr */
      18:	e51ffff0 	ldr	pc, [pc, #-4080]	; fffff030 <VIC_base_addr+0x30>
            LDR     PC,FIQ_Addr
      1c:	e59ff014 	ldr	pc, [pc, #20]	; 38 <FIQ_Addr>

00000020 <Reset_Addr>:
      20:	0000009c 	.word	0x0000009c

00000024 <Undef_Addr>:
      24:	0000003c 	.word	0x0000003c

00000028 <SWI_Addr>:
      28:	00000040 	.word	0x00000040

0000002c <PAbt_Addr>:
      2c:	00000044 	.word	0x00000044

00000030 <DAbt_Addr>:
      30:	00000048 	.word	0x00000048
      34:	00000000 	.word	0x00000000

00000038 <FIQ_Addr>:
      38:	00000050 	.word	0x00000050

0000003c <Undef_Handler>:
DAbt_Addr:        .word     DAbt_Handler
                  .word     0                      /* Reserved Address */
FIQ_Addr:         .word     FIQ_Handler


Undef_Handler:  B       Undef_Handler
      3c:	eafffffe 	b	3c <Undef_Handler>

00000040 <SWI_Handler>:
SWI_Handler:    B       SWI_Handler
      40:	eafffffe 	b	40 <SWI_Handler>

00000044 <PAbt_Handler>:
PAbt_Handler:   B       PAbt_Handler
      44:	eafffffe 	b	44 <PAbt_Handler>

00000048 <DAbt_Handler>:
DAbt_Handler:   B       DAbt_Handler
      48:	eafffffe 	b	48 <DAbt_Handler>

0000004c <IRQ_Handler>:
IRQ_Handler:    B       IRQ_Handler
      4c:	eafffffe 	b	4c <IRQ_Handler>

00000050 <FIQ_Handler>:
FIQ_Handler:    B       FIQ_Handler
      50:	eafffffe 	b	50 <FIQ_Handler>

00000054 <__IRQ_Wrapper>:
        .global __IRQ_Wrapper
        .func   __IRQ_Wrapper
__IRQ_Wrapper:
/*- Manage Exception Entry  */
/*- Adjust and save LR_irq in IRQ stack  */
            sub         lr, lr, #4
      54:	e24ee004 	sub	lr, lr, #4
            stmfd       sp!, {lr}
      58:	e92d4000 	push	{lr}

/*- Save SPSR need to be saved for nested interrupt */
            mrs         r14, SPSR
      5c:	e14fe000 	mrs	lr, SPSR
            stmfd       sp!, {r14}
      60:	e92d4000 	push	{lr}

/*- Save and r0 in IRQ stack  */
            stmfd       sp!, {r0}
      64:	e92d0001 	push	{r0}

/*- Write in the IVR to support Protect Mode  */
/*- No effect in Normal Mode  */
/*- De-assert the NIRQ and clear the source in Protect Mode */
/* R14 = LR */
            ldr         r14, =VIC_base_addr
      68:	e59fe028 	ldr	lr, [pc, #40]	; 98 <ABT_Stack_Size+0x18>
            ldr         r0 , [r14, #VIC_vect_offs]
      6c:	e59e0030 	ldr	r0, [lr, #48]	; 0x30
            /*str         r14, [r14, #VIC_vect_offs]*/

/*- Enable Interrupt and Switch in Supervisor Mode */
            msr         CPSR_c, #Mode_SVC
      70:	e321f013 	msr	CPSR_c, #19

/*- Save scratch/used registers and LR in User Stack */
            /*stmfd       sp!, { r1-r3, r12, r14}*/
            stmfd       sp!, { r1-r12, r14 }
      74:	e92d5ffe 	push	{r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}

/*- Branch to the routine pointed by the VIC-Vector-Address  */
            mov         r14, pc
      78:	e1a0e00f 	mov	lr, pc
            bx          r0
      7c:	e12fff10 	bx	r0
/*- Restore scratch/used registers and LR from User Stack*/
            /* ldmia       sp!, { r1-r3, r12, r14} */
            ldmia       sp!, { r1-r12, r14 }
      80:	e8bd5ffe 	pop	{r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}

/*- Disable Interrupt and switch back in IRQ mode */
            msr         CPSR_c, #I_Bit | Mode_IRQ
      84:	e321f092 	msr	CPSR_c, #146	; 0x92
            ldr         r14, =VIC_base_addr
            str         r14, [r14, #VIC_vect_offs]
#endif

/*- Restore SPSR_irq and r0 from IRQ stack */
            ldmia       sp!, {r0}
      88:	e8bd0001 	pop	{r0}

/*- Restore SPSR_irq and r0 from IRQ stack */
            ldmia       sp!, {r14}
      8c:	e8bd4000 	pop	{lr}
            msr         SPSR_cxsf, r14
      90:	e16ff00e 	msr	SPSR_fsxc, lr

/*- Restore adjusted  LR_irq from IRQ stack directly in the PC */
            ldmia       sp!, {pc}^
      94:	e8fd8000 	ldm	sp!, {pc}^
      98:	fffff000 	.word	0xfffff000

0000009c <__startup>:

Reset_Handler:  

// .if (VPBDIV_SETUP != 0)
.if (APBDIV_SETUP)
                LDR     R0, =APBDIV
      9c:	e59f010c 	ldr	r0, [pc, #268]	; 1b0 <__exit_THUMB+0x4>
                LDR     R1, =APBDIV_Val
      a0:	e3a01001 	mov	r1, #1
                STR     R1, [R0]
      a4:	e5801000 	str	r1, [r0]
.endif


//.if (PLL_SETUP != 0)
.if (PLL_SETUP)
                LDR     R0, =PLL_BASE
      a8:	e59f0104 	ldr	r0, [pc, #260]	; 1b4 <__exit_THUMB+0x8>
                MOV     R1, #0xAA
      ac:	e3a010aa 	mov	r1, #170	; 0xaa
                MOV     R2, #0x55
      b0:	e3a02055 	mov	r2, #85	; 0x55

// Configure and Enable PLL
                MOV     R3, #PLLCFG_Val
      b4:	e3a03023 	mov	r3, #35	; 0x23
                STR     R3, [R0, #PLLCFG_OFS] 
      b8:	e5803004 	str	r3, [r0, #4]
                MOV     R3, #PLLCON_PLLE
      bc:	e3a03001 	mov	r3, #1
                STR     R3, [R0, #PLLCON_OFS]
      c0:	e5803000 	str	r3, [r0]
                STR     R1, [R0, #PLLFEED_OFS]
      c4:	e580100c 	str	r1, [r0, #12]
                STR     R2, [R0, #PLLFEED_OFS]
      c8:	e580200c 	str	r2, [r0, #12]

000000cc <PLL_Loop>:

// Wait until PLL Locked
PLL_Loop:       LDR     R3, [R0, #PLLSTAT_OFS]
      cc:	e5903008 	ldr	r3, [r0, #8]
                ANDS    R3, R3, #PLLSTAT_PLOCK
      d0:	e2133b01 	ands	r3, r3, #1024	; 0x400
                BEQ     PLL_Loop
      d4:	0afffffc 	beq	cc <PLL_Loop>

// Switch to PLL Clock
                MOV     R3, #(PLLCON_PLLE | PLLCON_PLLC)
      d8:	e3a03003 	mov	r3, #3
                STR     R3, [R0, #PLLCON_OFS]
      dc:	e5803000 	str	r3, [r0]
                STR     R1, [R0, #PLLFEED_OFS]
      e0:	e580100c 	str	r1, [r0, #12]
                STR     R2, [R0, #PLLFEED_OFS]
      e4:	e580200c 	str	r2, [r0, #12]
.endif


//.if (MAM_SETUP != 0)
.if (MAM_SETUP)
                LDR     R0, =MAM_BASE
      e8:	e59f00c8 	ldr	r0, [pc, #200]	; 1b8 <__exit_THUMB+0xc>
                MOV     R1, #MAMTIM_Val
      ec:	e3a01004 	mov	r1, #4
                STR     R1, [R0, #MAMTIM_OFS] 
      f0:	e5801004 	str	r1, [r0, #4]
                MOV     R1, #MAMCR_Val
      f4:	e3a01002 	mov	r1, #2
                STR     R1, [R0, #MAMCR_OFS] 
      f8:	e5801000 	str	r1, [r0]


// Memory Mapping
                .set MEMMAP, 0xE01FC040  /* Memory Mapping Control */

              LDR     R0, =MEMMAP
      fc:	e59f00b8 	ldr	r0, [pc, #184]	; 1bc <__exit_THUMB+0x10>
  .if (RAM_MODE) || (VECTREMAPPED)
  .print "MEMMAP to 2 on init"
                MOV     R1, #2
  .endif
.else
                MOV     R1, #1
     100:	e3a01001 	mov	r1, #1
.endif
                STR     R1, [R0]
     104:	e5801000 	str	r1, [r0]


// Setup Stack for each mode
                LDR     R0, =Top_Stack
     108:	e59f00b0 	ldr	r0, [pc, #176]	; 1c0 <__exit_THUMB+0x14>

// Enter Undefined Instruction Mode and set its Stack Pointer
                MSR     CPSR_c, #Mode_UND|I_Bit|F_Bit
     10c:	e321f0db 	msr	CPSR_c, #219	; 0xdb
                MOV     SP, R0
     110:	e1a0d000 	mov	sp, r0
                SUB     R0, R0, #UND_Stack_Size
     114:	e2400080 	sub	r0, r0, #128	; 0x80

// Enter Abort Mode and set its Stack Pointer
                MSR     CPSR_c, #Mode_ABT|I_Bit|F_Bit
     118:	e321f0d7 	msr	CPSR_c, #215	; 0xd7
                MOV     SP, R0
     11c:	e1a0d000 	mov	sp, r0
                SUB     R0, R0, #ABT_Stack_Size
     120:	e2400080 	sub	r0, r0, #128	; 0x80

// Enter FIQ Mode and set its Stack Pointer
                MSR     CPSR_c, #Mode_FIQ|I_Bit|F_Bit
     124:	e321f0d1 	msr	CPSR_c, #209	; 0xd1
                MOV     SP, R0
     128:	e1a0d000 	mov	sp, r0
                SUB     R0, R0, #FIQ_Stack_Size
     12c:	e2400080 	sub	r0, r0, #128	; 0x80

// Enter IRQ Mode and set its Stack Pointer
                MSR     CPSR_c, #Mode_IRQ|I_Bit|F_Bit
     130:	e321f0d2 	msr	CPSR_c, #210	; 0xd2
                MOV     SP, R0
     134:	e1a0d000 	mov	sp, r0
                SUB     R0, R0, #IRQ_Stack_Size
     138:	e2400c02 	sub	r0, r0, #512	; 0x200

// Enter Supervisor Mode and set its Stack Pointer
                MSR     CPSR_c, #Mode_SVC|I_Bit|F_Bit
     13c:	e321f0d3 	msr	CPSR_c, #211	; 0xd3
                MOV     SP, R0
     140:	e1a0d000 	mov	sp, r0
                SUB     R0, R0, #SVC_Stack_Size
     144:	e2400080 	sub	r0, r0, #128	; 0x80

// Enter User Mode and set its Stack Pointer
                MSR     CPSR_c, #Mode_USR /* Interrupts enabled */
     148:	e321f010 	msr	CPSR_c, #16
//				MSR     CPSR_c, #Mode_USR|I_Bit|F_Bit /* Interrupts disabled */
                MOV     SP, R0
     14c:	e1a0d000 	mov	sp, r0


.if (RAM_MODE==0)
/* Relocate .data section (Copy from ROM to RAM) */
                LDR     R1, =_etext 
     150:	e59f106c 	ldr	r1, [pc, #108]	; 1c4 <__exit_THUMB+0x18>
                LDR     R2, =_data 
     154:	e59f206c 	ldr	r2, [pc, #108]	; 1c8 <__exit_THUMB+0x1c>
                LDR     R3, =_edata 
     158:	e59f306c 	ldr	r3, [pc, #108]	; 1cc <__exit_THUMB+0x20>
                CMP     R2, R3
     15c:	e1520003 	cmp	r2, r3
                BEQ     DataIsEmpty
     160:	0a000003 	beq	174 <DataIsEmpty>

00000164 <LoopRel>:
LoopRel:        CMP     R2, R3 
     164:	e1520003 	cmp	r2, r3
                LDRLO   R0, [R1], #4 
     168:	34910004 	ldrcc	r0, [r1], #4
                STRLO   R0, [R2], #4 
     16c:	34820004 	strcc	r0, [r2], #4
                BLO     LoopRel 
     170:	3afffffb 	bcc	164 <LoopRel>

00000174 <DataIsEmpty>:
DataIsEmpty:
.endif
 
/* Clear .bss section (Zero init) */
                MOV     R0, #0 
     174:	e3a00000 	mov	r0, #0
                LDR     R1, =__bss_start__ 
     178:	e59f1050 	ldr	r1, [pc, #80]	; 1d0 <__exit_THUMB+0x24>
                LDR     R2, =__bss_end__ 
     17c:	e59f2050 	ldr	r2, [pc, #80]	; 1d4 <__exit_THUMB+0x28>
                CMP     R1,R2
     180:	e1510002 	cmp	r1, r2
                BEQ     BSSIsEmpty
     184:	0a000002 	beq	194 <BSSIsEmpty>

00000188 <LoopZI>:
LoopZI:         CMP     R1, R2 
     188:	e1510002 	cmp	r1, r2
                STRLO   R0, [R1], #4 
     18c:	34810004 	strcc	r0, [r1], #4
                BLO     LoopZI 
     190:	3afffffc 	bcc	188 <LoopZI>

00000194 <BSSIsEmpty>:
BSSIsEmpty:

// Enter the C code
                //LDR     R0,=INIT
                LDR     R0,=main
     194:	e59f003c 	ldr	r0, [pc, #60]	; 1d8 <__exit_THUMB+0x2c>
                TST     R0,#1             // Bit-0 set: main is Thumb
     198:	e3100001 	tst	r0, #1
                LDREQ   LR,=__exit_ARM    // ARM Mode
     19c:	059fe038 	ldreq	lr, [pc, #56]	; 1dc <__exit_THUMB+0x30>
                LDRNE   LR,=__exit_THUMB  // Thumb Mode
     1a0:	159fe038 	ldrne	lr, [pc, #56]	; 1e0 <__exit_THUMB+0x34>
                BX      R0
     1a4:	e12fff10 	bx	r0

000001a8 <__exit_ARM>:

.arm
.global __exit_ARM
.func __exit_ARM
__exit_ARM:
                B       __exit_ARM
     1a8:	eafffffe 	b	1a8 <__exit_ARM>

000001ac <__exit_THUMB>:
.thumb
.global __exit_THUMB
.func __exit_THUMB
.thumb_func
__exit_THUMB:
                B       __exit_THUMB
     1ac:	e7fe      	b.n	1ac <__exit_THUMB>
     1ae:	0000      	.short	0x0000
     1b0:	e01fc100 	.word	0xe01fc100
     1b4:	e01fc080 	.word	0xe01fc080
     1b8:	e01fc000 	.word	0xe01fc000
     1bc:	e01fc040 	.word	0xe01fc040
     1c0:	40005940 	.word	0x40005940
     1c4:	0000503c 	.word	0x0000503c
     1c8:	40000200 	.word	0x40000200
     1cc:	40000a44 	.word	0x40000a44
     1d0:	40000a44 	.word	0x40000a44
     1d4:	40003334 	.word	0x40003334
     1d8:	000026c0 	.word	0x000026c0
     1dc:	000001a8 	.word	0x000001a8
     1e0:	000001ad 	.word	0x000001ad

000001e4 <int_to_a>:
Boolean Reg = true;
#endif


int int_to_a(char * str, int number)
{
     1e4:	e92d4070 	push	{r4, r5, r6, lr}
  if(str == NULL)
     1e8:	e2506000 	subs	r6, r0, #0
Boolean Reg = true;
#endif


int int_to_a(char * str, int number)
{
     1ec:	e24dd028 	sub	sp, sp, #40	; 0x28
     1f0:	e1a0c001 	mov	ip, r1
  if(str == NULL)
     1f4:	0a000031 	beq	2c0 <IRQ_Stack_Size+0xc0>
    return 1;

  if (number > 0)
     1f8:	e3510000 	cmp	r1, #0
     1fc:	da000022 	ble	28c <IRQ_Stack_Size+0x8c>
    {
      int i;
      int pos = 0;
      int digit;
      int digitfound = 0;
      const int units[] =
     200:	e59f50c0 	ldr	r5, [pc, #192]	; 2c8 <IRQ_Stack_Size+0xc8>
     204:	e8b5000f 	ldm	r5!, {r0, r1, r2, r3}
     208:	e1a0400d 	mov	r4, sp
     20c:	e8a4000f 	stmia	r4!, {r0, r1, r2, r3}
     210:	e8b5000f 	ldm	r5!, {r0, r1, r2, r3}
     214:	e8a4000f 	stmia	r4!, {r0, r1, r2, r3}
     218:	e8950003 	ldm	r5, {r0, r1}
  if (number > 0)
    {
      int i;
      int pos = 0;
      int digit;
      int digitfound = 0;
     21c:	e3a02000 	mov	r2, #0
      const int units[] =
     220:	e8840003 	stm	r4, {r0, r1}
#else
Boolean Reg = true;
#endif


int int_to_a(char * str, int number)
     224:	e24d1004 	sub	r1, sp, #4
     228:	e28d0024 	add	r0, sp, #36	; 0x24
    return 1;

  if (number > 0)
    {
      int i;
      int pos = 0;
     22c:	e1a04002 	mov	r4, r2



      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
     230:	e5b13004 	ldr	r3, [r1, #4]!
          digit = 0;

          while (number >= unit)
     234:	e153000c 	cmp	r3, ip
     238:	ca00000f 	bgt	27c <IRQ_Stack_Size+0x7c>
     23c:	e3a02000 	mov	r2, #0
            {
              digit++;
              number -= unit;
     240:	e063c00c 	rsb	ip, r3, ip
      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
          digit = 0;

          while (number >= unit)
     244:	e153000c 	cmp	r3, ip
            {
              digit++;
     248:	e2822001 	add	r2, r2, #1
      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
          digit = 0;

          while (number >= unit)
     24c:	dafffffb 	ble	240 <IRQ_Stack_Size+0x40>
              digit++;
              number -= unit;
            }

          if (digit != 0) digitfound = 1;
          if (digitfound) str[pos++] = digit + '0' ;
     250:	e2822030 	add	r2, r2, #48	; 0x30
     254:	e7c62004 	strb	r2, [r6, r4]
     258:	e3a02001 	mov	r2, #1
     25c:	e0844002 	add	r4, r4, r2
              1};
      int unit;



      for (i = 0; i < 10; ++i)
     260:	e1510000 	cmp	r1, r0
     264:	1afffff1 	bne	230 <IRQ_Stack_Size+0x30>
            }

          if (digit != 0) digitfound = 1;
          if (digitfound) str[pos++] = digit + '0' ;
        }
      str[pos] = '\0';
     268:	e3a00000 	mov	r0, #0
     26c:	e7c60004 	strb	r0, [r6, r4]
      str[0] = '-';
      int_to_a(str+1, -number);
    }

  return 0;
}
     270:	e28dd028 	add	sp, sp, #40	; 0x28
     274:	e8bd4070 	pop	{r4, r5, r6, lr}
     278:	e12fff1e 	bx	lr
              digit++;
              number -= unit;
            }

          if (digit != 0) digitfound = 1;
          if (digitfound) str[pos++] = digit + '0' ;
     27c:	e3520000 	cmp	r2, #0
     280:	0afffff6 	beq	260 <IRQ_Stack_Size+0x60>
     284:	e3a02000 	mov	r2, #0
     288:	eafffff0 	b	250 <IRQ_Stack_Size+0x50>
        }
      str[pos] = '\0';
    }
  else if (number == 0)
     28c:	1a000004 	bne	2a4 <IRQ_Stack_Size+0xa4>
    {
      str[0] = '0';
     290:	e3a03030 	mov	r3, #48	; 0x30
     294:	e5c63000 	strb	r3, [r6]
      str[1] = '\0';
     298:	e5c61001 	strb	r1, [r6, #1]
    {
      str[0] = '-';
      int_to_a(str+1, -number);
    }

  return 0;
     29c:	e1a00001 	mov	r0, r1
     2a0:	eafffff2 	b	270 <IRQ_Stack_Size+0x70>
      str[0] = '0';
      str[1] = '\0';
    }
  else
    {
      str[0] = '-';
     2a4:	e1a00006 	mov	r0, r6
     2a8:	e3a0302d 	mov	r3, #45	; 0x2d
     2ac:	e4c03001 	strb	r3, [r0], #1
      int_to_a(str+1, -number);
     2b0:	e2611000 	rsb	r1, r1, #0
     2b4:	ebffffca 	bl	1e4 <int_to_a>
     2b8:	e3a00000 	mov	r0, #0
     2bc:	eaffffeb 	b	270 <IRQ_Stack_Size+0x70>


int int_to_a(char * str, int number)
{
  if(str == NULL)
    return 1;
     2c0:	e3a00001 	mov	r0, #1
     2c4:	eaffffe9 	b	270 <IRQ_Stack_Size+0x70>
     2c8:	00004b04 	.word	0x00004b04

000002cc <Proc_1>:


void Proc_1 (Rec_Pointer Ptr_Val_Par)
/******************/
/* executed once */
{
     2cc:	e92d05f0 	push	{r4, r5, r6, r7, r8, sl}
  REG Rec_Pointer Next_Record = Ptr_Val_Par->Ptr_Comp;
  /* == Ptr_Glob_Next */
  /* Local variable, initialized with Ptr_Val_Par->Ptr_Comp,    */
  /* corresponds to "rename" in Ada, "with" in Pascal           */

  structassign (*Ptr_Val_Par->Ptr_Comp, *Ptr_Glob);
     2d0:	e59f7108 	ldr	r7, [pc, #264]	; 3e0 <Proc_1+0x114>
     2d4:	e5978000 	ldr	r8, [r7]

void Proc_1 (Rec_Pointer Ptr_Val_Par)
/******************/
/* executed once */
{
  REG Rec_Pointer Next_Record = Ptr_Val_Par->Ptr_Comp;
     2d8:	e5905000 	ldr	r5, [r0]
  /* == Ptr_Glob_Next */
  /* Local variable, initialized with Ptr_Val_Par->Ptr_Comp,    */
  /* corresponds to "rename" in Ada, "with" in Pascal           */

  structassign (*Ptr_Val_Par->Ptr_Comp, *Ptr_Glob);
     2dc:	e1a04008 	mov	r4, r8


void Proc_1 (Rec_Pointer Ptr_Val_Par)
/******************/
/* executed once */
{
     2e0:	e1a06000 	mov	r6, r0
  REG Rec_Pointer Next_Record = Ptr_Val_Par->Ptr_Comp;
  /* == Ptr_Glob_Next */
  /* Local variable, initialized with Ptr_Val_Par->Ptr_Comp,    */
  /* corresponds to "rename" in Ada, "with" in Pascal           */

  structassign (*Ptr_Val_Par->Ptr_Comp, *Ptr_Glob);
     2e4:	e8b4000f 	ldm	r4!, {r0, r1, r2, r3}
     2e8:	e1a0c005 	mov	ip, r5
     2ec:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
     2f0:	e8b4000f 	ldm	r4!, {r0, r1, r2, r3}
     2f4:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
  Ptr_Val_Par->variant.var_1.Int_Comp = 5;
  Next_Record->variant.var_1.Int_Comp = Ptr_Val_Par->variant.var_1.Int_Comp;
  Next_Record->Ptr_Comp = Ptr_Val_Par->Ptr_Comp;
     2f8:	e596a000 	ldr	sl, [r6]
  REG Rec_Pointer Next_Record = Ptr_Val_Par->Ptr_Comp;
  /* == Ptr_Glob_Next */
  /* Local variable, initialized with Ptr_Val_Par->Ptr_Comp,    */
  /* corresponds to "rename" in Ada, "with" in Pascal           */

  structassign (*Ptr_Val_Par->Ptr_Comp, *Ptr_Glob);
     2fc:	e894000f 	ldm	r4, {r0, r1, r2, r3}
     300:	e88c000f 	stm	ip, {r0, r1, r2, r3}
  Ptr_Val_Par->variant.var_1.Int_Comp = 5;
  Next_Record->variant.var_1.Int_Comp = Ptr_Val_Par->variant.var_1.Int_Comp;
  Next_Record->Ptr_Comp = Ptr_Val_Par->Ptr_Comp;
     304:	e585a000 	str	sl, [r5]
/* executed once */
/* Ptr_Ref_Par becomes Ptr_Glob */
{
  if (Ptr_Glob != NULL)
    /* then, executed */
    *Ptr_Ref_Par = Ptr_Glob->Ptr_Comp;
     308:	e5982000 	ldr	r2, [r8]
  /* == Ptr_Glob_Next */
  /* Local variable, initialized with Ptr_Val_Par->Ptr_Comp,    */
  /* corresponds to "rename" in Ada, "with" in Pascal           */

  structassign (*Ptr_Val_Par->Ptr_Comp, *Ptr_Glob);
  Ptr_Val_Par->variant.var_1.Int_Comp = 5;
     30c:	e3a03005 	mov	r3, #5
     310:	e586300c 	str	r3, [r6, #12]
/* executed once */
/* Ptr_Ref_Par becomes Ptr_Glob */
{
  if (Ptr_Glob != NULL)
    /* then, executed */
    *Ptr_Ref_Par = Ptr_Glob->Ptr_Comp;
     314:	e5852000 	str	r2, [r5]
  Proc_7 (10, Int_Glob, &Ptr_Glob->variant.var_1.Int_Comp);
     318:	e59f20c4 	ldr	r2, [pc, #196]	; 3e4 <Proc_1+0x118>
     31c:	e5921000 	ldr	r1, [r2]
     320:	e5972000 	ldr	r2, [r7]
  /* Local variable, initialized with Ptr_Val_Par->Ptr_Comp,    */
  /* corresponds to "rename" in Ada, "with" in Pascal           */

  structassign (*Ptr_Val_Par->Ptr_Comp, *Ptr_Glob);
  Ptr_Val_Par->variant.var_1.Int_Comp = 5;
  Next_Record->variant.var_1.Int_Comp = Ptr_Val_Par->variant.var_1.Int_Comp;
     324:	e585300c 	str	r3, [r5, #12]
  Next_Record->Ptr_Comp = Ptr_Val_Par->Ptr_Comp;
  Proc_3 (&Next_Record->Ptr_Comp);
  /* Ptr_Val_Par->Ptr_Comp->Ptr_Comp == Ptr_Glob->Ptr_Comp */
  if (Next_Record->Discr == Ident_1)
     328:	e5d53004 	ldrb	r3, [r5, #4]
/*                  Int_Par_Ref becomes 18                   */
{
  One_Fifty Int_Loc;

  Int_Loc = Int_1_Par_Val + 2;
  *Int_Par_Ref = Int_2_Par_Val + Int_Loc;
     32c:	e281000c 	add	r0, r1, #12
  Ptr_Val_Par->variant.var_1.Int_Comp = 5;
  Next_Record->variant.var_1.Int_Comp = Ptr_Val_Par->variant.var_1.Int_Comp;
  Next_Record->Ptr_Comp = Ptr_Val_Par->Ptr_Comp;
  Proc_3 (&Next_Record->Ptr_Comp);
  /* Ptr_Val_Par->Ptr_Comp->Ptr_Comp == Ptr_Glob->Ptr_Comp */
  if (Next_Record->Discr == Ident_1)
     330:	e3530000 	cmp	r3, #0
/*                  Int_Par_Ref becomes 18                   */
{
  One_Fifty Int_Loc;

  Int_Loc = Int_1_Par_Val + 2;
  *Int_Par_Ref = Int_2_Par_Val + Int_Loc;
     334:	e582000c 	str	r0, [r2, #12]
  Ptr_Val_Par->variant.var_1.Int_Comp = 5;
  Next_Record->variant.var_1.Int_Comp = Ptr_Val_Par->variant.var_1.Int_Comp;
  Next_Record->Ptr_Comp = Ptr_Val_Par->Ptr_Comp;
  Proc_3 (&Next_Record->Ptr_Comp);
  /* Ptr_Val_Par->Ptr_Comp->Ptr_Comp == Ptr_Glob->Ptr_Comp */
  if (Next_Record->Discr == Ident_1)
     338:	0a000009 	beq	364 <Proc_1+0x98>
      Next_Record->Ptr_Comp = Ptr_Glob->Ptr_Comp;
      Proc_7 (Next_Record->variant.var_1.Int_Comp, 10,
          &Next_Record->variant.var_1.Int_Comp);
    }
  else /* not executed */
    structassign (*Ptr_Val_Par, *Ptr_Val_Par->Ptr_Comp);
     33c:	e5964000 	ldr	r4, [r6]
     340:	e8b4000f 	ldm	r4!, {r0, r1, r2, r3}
     344:	e1a0c006 	mov	ip, r6
     348:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
     34c:	e8b4000f 	ldm	r4!, {r0, r1, r2, r3}
     350:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
     354:	e894000f 	ldm	r4, {r0, r1, r2, r3}
     358:	e88c000f 	stm	ip, {r0, r1, r2, r3}
} /* Proc_1 */
     35c:	e8bd05f0 	pop	{r4, r5, r6, r7, r8, sl}
     360:	e12fff1e 	bx	lr
  /* Ptr_Val_Par->Ptr_Comp->Ptr_Comp == Ptr_Glob->Ptr_Comp */
  if (Next_Record->Discr == Ident_1)
    /* then, executed */
    {
      Next_Record->variant.var_1.Int_Comp = 6;
      Proc_6 (Ptr_Val_Par->variant.var_1.Enum_Comp,
     364:	e5d63008 	ldrb	r3, [r6, #8]
  Proc_3 (&Next_Record->Ptr_Comp);
  /* Ptr_Val_Par->Ptr_Comp->Ptr_Comp == Ptr_Glob->Ptr_Comp */
  if (Next_Record->Discr == Ident_1)
    /* then, executed */
    {
      Next_Record->variant.var_1.Int_Comp = 6;
     368:	e3a00006 	mov	r0, #6
/* Enum_Par_Val == Ident_3 */
{
  Enumeration Enum_Loc;

  Enum_Loc = Enum_Par_Val;
  if (Enum_Loc == Ident_3)
     36c:	e3530002 	cmp	r3, #2
  Proc_3 (&Next_Record->Ptr_Comp);
  /* Ptr_Val_Par->Ptr_Comp->Ptr_Comp == Ptr_Glob->Ptr_Comp */
  if (Next_Record->Discr == Ident_1)
    /* then, executed */
    {
      Next_Record->variant.var_1.Int_Comp = 6;
     370:	e585000c 	str	r0, [r5, #12]
void Proc_6 (Enumeration Enum_Val_Par, Enumeration *Enum_Ref_Par)
/*********************************/
/* executed once */
/* Enum_Val_Par == Ident_3, Enum_Ref_Par becomes Ident_2 */
{
  *Enum_Ref_Par = Enum_Val_Par;
     374:	e5c53008 	strb	r3, [r5, #8]
/* Enum_Par_Val == Ident_3 */
{
  Enumeration Enum_Loc;

  Enum_Loc = Enum_Par_Val;
  if (Enum_Loc == Ident_3)
     378:	0a000009 	beq	3a4 <Proc_1+0xd8>
     37c:	e3a00003 	mov	r0, #3
     380:	e5c50008 	strb	r0, [r5, #8]
{
  *Enum_Ref_Par = Enum_Val_Par;
  if (! Func_3 (Enum_Val_Par))
    /* then, not executed */
    *Enum_Ref_Par = Ident_4;
  switch (Enum_Val_Par)
     384:	e3530004 	cmp	r3, #4
     388:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
     38c:	ea000006 	b	3ac <Proc_1+0xe0>
     390:	000003c8 	.word	0x000003c8
     394:	000003c0 	.word	0x000003c0
     398:	000003a4 	.word	0x000003a4
     39c:	000003ac 	.word	0x000003ac
     3a0:	000003d4 	.word	0x000003d4
      *Enum_Ref_Par = Ident_1;
    else
      *Enum_Ref_Par = Ident_4;
    break;
  case Ident_3: /* executed */
    *Enum_Ref_Par = Ident_2;
     3a4:	e3a03001 	mov	r3, #1
     3a8:	e5c53008 	strb	r3, [r5, #8]
    /* then, executed */
    {
      Next_Record->variant.var_1.Int_Comp = 6;
      Proc_6 (Ptr_Val_Par->variant.var_1.Enum_Comp,
          &Next_Record->variant.var_1.Enum_Comp);
      Next_Record->Ptr_Comp = Ptr_Glob->Ptr_Comp;
     3ac:	e5923000 	ldr	r3, [r2]
     3b0:	e5853000 	str	r3, [r5]
/*                  Int_Par_Ref becomes 18                   */
{
  One_Fifty Int_Loc;

  Int_Loc = Int_1_Par_Val + 2;
  *Int_Par_Ref = Int_2_Par_Val + Int_Loc;
     3b4:	e3a03012 	mov	r3, #18
     3b8:	e585300c 	str	r3, [r5, #12]
     3bc:	eaffffe6 	b	35c <Proc_1+0x90>
  {
  case Ident_1:
    *Enum_Ref_Par = Ident_1;
    break;
  case Ident_2:
    if (Int_Glob > 100)
     3c0:	e3510064 	cmp	r1, #100	; 0x64
     3c4:	dafffff8 	ble	3ac <Proc_1+0xe0>
      *Enum_Ref_Par = Ident_1;
     3c8:	e3a03000 	mov	r3, #0
     3cc:	e5c53008 	strb	r3, [r5, #8]
     3d0:	eafffff5 	b	3ac <Proc_1+0xe0>
    *Enum_Ref_Par = Ident_2;
    break;
  case Ident_4:
    break;
  case Ident_5:
    *Enum_Ref_Par = Ident_3;
     3d4:	e3a03002 	mov	r3, #2
     3d8:	e5c53008 	strb	r3, [r5, #8]
     3dc:	eafffff2 	b	3ac <Proc_1+0xe0>
     3e0:	4000324c 	.word	0x4000324c
     3e4:	40003244 	.word	0x40003244

000003e8 <dhrystone>:
int dhrystone (void)
/*****/

/* main program, corresponds to procedures        */
/* Main and Proc_0 in the Ada version             */
{
     3e8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  char buffer[15];
  unsigned int ms;

  /* Initializations */

  Next_Ptr_Glob = (Rec_Pointer) malloc (sizeof (Rec_Type));
     3ec:	e3a00030 	mov	r0, #48	; 0x30
int dhrystone (void)
/*****/

/* main program, corresponds to procedures        */
/* Main and Proc_0 in the Ada version             */
{
     3f0:	e24dd08c 	sub	sp, sp, #140	; 0x8c
  char buffer[15];
  unsigned int ms;

  /* Initializations */

  Next_Ptr_Glob = (Rec_Pointer) malloc (sizeof (Rec_Type));
     3f4:	eb000903 	bl	2808 <malloc>
     3f8:	e59f13d8 	ldr	r1, [pc, #984]	; 7d8 <PLLSTAT_PLOCK+0x3d8>
     3fc:	e1a06000 	mov	r6, r0
  Ptr_Glob = (Rec_Pointer) malloc (sizeof (Rec_Type));
     400:	e3a00030 	mov	r0, #48	; 0x30
  char buffer[15];
  unsigned int ms;

  /* Initializations */

  Next_Ptr_Glob = (Rec_Pointer) malloc (sizeof (Rec_Type));
     404:	e5816000 	str	r6, [r1]
  Ptr_Glob = (Rec_Pointer) malloc (sizeof (Rec_Type));
     408:	eb0008fe 	bl	2808 <malloc>

  Ptr_Glob->Ptr_Comp                    = Next_Ptr_Glob;
  Ptr_Glob->Discr                       = Ident_1;
  Ptr_Glob->variant.var_1.Enum_Comp     = Ident_3;
  Ptr_Glob->variant.var_1.Int_Comp      = 40;
  strcpy (Ptr_Glob->variant.var_1.Str_Comp,
     40c:	e59fc328 	ldr	ip, [pc, #808]	; 73c <PLLSTAT_PLOCK+0x33c>
  unsigned int ms;

  /* Initializations */

  Next_Ptr_Glob = (Rec_Pointer) malloc (sizeof (Rec_Type));
  Ptr_Glob = (Rec_Pointer) malloc (sizeof (Rec_Type));
     410:	e1a05000 	mov	r5, r0

  Ptr_Glob->Ptr_Comp                    = Next_Ptr_Glob;
  Ptr_Glob->Discr                       = Ident_1;
  Ptr_Glob->variant.var_1.Enum_Comp     = Ident_3;
  Ptr_Glob->variant.var_1.Int_Comp      = 40;
  strcpy (Ptr_Glob->variant.var_1.Str_Comp,
     414:	e8bc000f 	ldm	ip!, {r0, r1, r2, r3}
     418:	e285e010 	add	lr, r5, #16
     41c:	e8ae000f 	stmia	lr!, {r0, r1, r2, r3}
     420:	e89c000f 	ldm	ip, {r0, r1, r2, r3}
     424:	e8ae0007 	stmia	lr!, {r0, r1, r2}
      "DHRYSTONE PROGRAM, SOME STRING");
  strcpy (Str_1_Loc, "DHRYSTONE PROGRAM, 1'ST STRING");
     428:	e59f4310 	ldr	r4, [pc, #784]	; 740 <PLLSTAT_PLOCK+0x340>

  Ptr_Glob->Ptr_Comp                    = Next_Ptr_Glob;
  Ptr_Glob->Discr                       = Ident_1;
  Ptr_Glob->variant.var_1.Enum_Comp     = Ident_3;
  Ptr_Glob->variant.var_1.Int_Comp      = 40;
  strcpy (Ptr_Glob->variant.var_1.Str_Comp,
     42c:	e0ce30b2 	strh	r3, [lr], #2
     430:	e1a07823 	lsr	r7, r3, #16
      "DHRYSTONE PROGRAM, SOME STRING");
  strcpy (Str_1_Loc, "DHRYSTONE PROGRAM, 1'ST STRING");
     434:	e8b4000f 	ldm	r4!, {r0, r1, r2, r3}
     438:	e28dc020 	add	ip, sp, #32
     43c:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
     440:	e894000f 	ldm	r4, {r0, r1, r2, r3}

  Next_Ptr_Glob = (Rec_Pointer) malloc (sizeof (Rec_Type));
  Ptr_Glob = (Rec_Pointer) malloc (sizeof (Rec_Type));

  Ptr_Glob->Ptr_Comp                    = Next_Ptr_Glob;
  Ptr_Glob->Discr                       = Ident_1;
     444:	e3a04000 	mov	r4, #0
     448:	e5c54004 	strb	r4, [r5, #4]
  unsigned int ms;

  /* Initializations */

  Next_Ptr_Glob = (Rec_Pointer) malloc (sizeof (Rec_Type));
  Ptr_Glob = (Rec_Pointer) malloc (sizeof (Rec_Type));
     44c:	e59f92f0 	ldr	r9, [pc, #752]	; 744 <PLLSTAT_PLOCK+0x344>

  Ptr_Glob->Ptr_Comp                    = Next_Ptr_Glob;
  Ptr_Glob->Discr                       = Ident_1;
  Ptr_Glob->variant.var_1.Enum_Comp     = Ident_3;
     450:	e3a04002 	mov	r4, #2
     454:	e5c54008 	strb	r4, [r5, #8]
  Ptr_Glob->variant.var_1.Int_Comp      = 40;
     458:	e3a04028 	mov	r4, #40	; 0x28
     45c:	e585400c 	str	r4, [r5, #12]
  unsigned int ms;

  /* Initializations */

  Next_Ptr_Glob = (Rec_Pointer) malloc (sizeof (Rec_Type));
  Ptr_Glob = (Rec_Pointer) malloc (sizeof (Rec_Type));
     460:	e5895000 	str	r5, [r9]

  Ptr_Glob->Ptr_Comp                    = Next_Ptr_Glob;
     464:	e5856000 	str	r6, [r5]
  Ptr_Glob->Discr                       = Ident_1;
  Ptr_Glob->variant.var_1.Enum_Comp     = Ident_3;
  Ptr_Glob->variant.var_1.Int_Comp      = 40;
  strcpy (Ptr_Glob->variant.var_1.Str_Comp,
     468:	e5ce7000 	strb	r7, [lr]
      "DHRYSTONE PROGRAM, SOME STRING");
  strcpy (Str_1_Loc, "DHRYSTONE PROGRAM, 1'ST STRING");
     46c:	e8ac0007 	stmia	ip!, {r0, r1, r2}
     470:	e0cc30b2 	strh	r3, [ip], #2

  Arr_2_Glob [8][7] = 10;
     474:	e59f42cc 	ldr	r4, [pc, #716]	; 748 <PLLSTAT_PLOCK+0x348>
  Ptr_Glob->Discr                       = Ident_1;
  Ptr_Glob->variant.var_1.Enum_Comp     = Ident_3;
  Ptr_Glob->variant.var_1.Int_Comp      = 40;
  strcpy (Ptr_Glob->variant.var_1.Str_Comp,
      "DHRYSTONE PROGRAM, SOME STRING");
  strcpy (Str_1_Loc, "DHRYSTONE PROGRAM, 1'ST STRING");
     478:	e1a03823 	lsr	r3, r3, #16
     47c:	e5cc3000 	strb	r3, [ip]
  /* Warning: With 16-Bit processors and Number_Of_Runs > 32000,  */
  /* overflow may occur for this array element.                   */

  loops = 5000000;

  puts_UART ("\n");
     480:	e59f02f0 	ldr	r0, [pc, #752]	; 778 <PLLSTAT_PLOCK+0x378>
  Ptr_Glob->variant.var_1.Int_Comp      = 40;
  strcpy (Ptr_Glob->variant.var_1.Str_Comp,
      "DHRYSTONE PROGRAM, SOME STRING");
  strcpy (Str_1_Loc, "DHRYSTONE PROGRAM, 1'ST STRING");

  Arr_2_Glob [8][7] = 10;
     484:	e3a0300a 	mov	r3, #10
     488:	e584365c 	str	r3, [r4, #1628]	; 0x65c
  /* Warning: With 16-Bit processors and Number_Of_Runs > 32000,  */
  /* overflow may occur for this array element.                   */

  loops = 5000000;

  puts_UART ("\n");
     48c:	eb000850 	bl	25d4 <puts_UART>
  puts_UART ("Dhrystone Benchmark, Version 2.1 (Language: C)\n");
     490:	e59f02b4 	ldr	r0, [pc, #692]	; 74c <PLLSTAT_PLOCK+0x34c>
     494:	eb00084e 	bl	25d4 <puts_UART>
  /* Was missing in published program. Without this statement,    */
  /* Arr_2_Glob [8][7] would have an undefined value.             */
  /* Warning: With 16-Bit processors and Number_Of_Runs > 32000,  */
  /* overflow may occur for this array element.                   */

  loops = 5000000;
     498:	e59f52b0 	ldr	r5, [pc, #688]	; 750 <PLLSTAT_PLOCK+0x350>

  puts_UART ("\n");
  puts_UART ("Dhrystone Benchmark, Version 2.1 (Language: C)\n");
  puts_UART ("\n");
     49c:	e59f02d4 	ldr	r0, [pc, #724]	; 778 <PLLSTAT_PLOCK+0x378>
     4a0:	eb00084b 	bl	25d4 <puts_UART>
     4a4:	e28dc084 	add	ip, sp, #132	; 0x84
  /* Was missing in published program. Without this statement,    */
  /* Arr_2_Glob [8][7] would have an undefined value.             */
  /* Warning: With 16-Bit processors and Number_Of_Runs > 32000,  */
  /* overflow may occur for this array element.                   */

  loops = 5000000;
     4a8:	e58d500c 	str	r5, [sp, #12]
     4ac:	e59f72a0 	ldr	r7, [pc, #672]	; 754 <PLLSTAT_PLOCK+0x354>
     4b0:	e59f52a0 	ldr	r5, [pc, #672]	; 758 <PLLSTAT_PLOCK+0x358>
     4b4:	e58dc004 	str	ip, [sp, #4]
/* executed once */
{
  Boolean Bool_Loc;

  Bool_Loc = Ch_1_Glob == 'A';
  Bool_Glob = Bool_Loc | Bool_Glob;
     4b8:	e59f82c4 	ldr	r8, [pc, #708]	; 784 <PLLSTAT_PLOCK+0x384>
  Ch_2_Glob = 'B';
     4bc:	e59fa2d4 	ldr	sl, [pc, #724]	; 798 <PLLSTAT_PLOCK+0x398>
  /***************/

  do
    {

      puts_UART ("The number of runs through the benchmark: ");
     4c0:	e59f0294 	ldr	r0, [pc, #660]	; 75c <PLLSTAT_PLOCK+0x35c>
     4c4:	eb000842 	bl	25d4 <puts_UART>
    {
      int i;
      int pos = 0;
      int digit;
      int digitfound = 0;
      const int units[] =
     4c8:	e59fe31c 	ldr	lr, [pc, #796]	; 7ec <PLLSTAT_PLOCK+0x3ec>
     4cc:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
     4d0:	e28dc060 	add	ip, sp, #96	; 0x60
     4d4:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
     4d8:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
     4dc:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
     4e0:	e89e0003 	ldm	lr, {r0, r1}
  dhrystone();
}



int dhrystone (void)
     4e4:	e59d300c 	ldr	r3, [sp, #12]
    {
      int i;
      int pos = 0;
      int digit;
      int digitfound = 0;
      const int units[] =
     4e8:	e88c0003 	stm	ip, {r0, r1}
  if (number > 0)
    {
      int i;
      int pos = 0;
      int digit;
      int digitfound = 0;
     4ec:	e3a01000 	mov	r1, #0
  dhrystone();
}



int dhrystone (void)
     4f0:	e28d005c 	add	r0, sp, #92	; 0x5c
    return 1;

  if (number > 0)
    {
      int i;
      int pos = 0;
     4f4:	e1a0c001 	mov	ip, r1



      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
     4f8:	e5b02004 	ldr	r2, [r0, #4]!
          digit = 0;

          while (number >= unit)
     4fc:	e1520003 	cmp	r2, r3
     500:	ca000089 	bgt	72c <PLLSTAT_PLOCK+0x32c>
     504:	e3a01000 	mov	r1, #0
            {
              digit++;
              number -= unit;
     508:	e0623003 	rsb	r3, r2, r3
      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
          digit = 0;

          while (number >= unit)
     50c:	e1520003 	cmp	r2, r3
            {
              digit++;
     510:	e2811001 	add	r1, r1, #1
      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
          digit = 0;

          while (number >= unit)
     514:	dafffffb 	ble	508 <PLLSTAT_PLOCK+0x108>
              digit++;
              number -= unit;
            }

          if (digit != 0) digitfound = 1;
          if (digitfound) str[pos++] = digit + '0' ;
     518:	e28de088 	add	lr, sp, #136	; 0x88
     51c:	e08e200c 	add	r2, lr, ip
     520:	e2811030 	add	r1, r1, #48	; 0x30
     524:	e5421078 	strb	r1, [r2, #-120]	; 0x78
     528:	e28cc001 	add	ip, ip, #1
     52c:	e3a01001 	mov	r1, #1
              1};
      int unit;



      for (i = 0; i < 10; ++i)
     530:	e59d2004 	ldr	r2, [sp, #4]
     534:	e1500002 	cmp	r0, r2
     538:	1affffee 	bne	4f8 <PLLSTAT_PLOCK+0xf8>
            }

          if (digit != 0) digitfound = 1;
          if (digitfound) str[pos++] = digit + '0' ;
        }
      str[pos] = '\0';
     53c:	e28d3088 	add	r3, sp, #136	; 0x88
     540:	e083c00c 	add	ip, r3, ip
     544:	e3a03000 	mov	r3, #0
     548:	e54c3078 	strb	r3, [ip, #-120]	; 0x78
  do
    {

      puts_UART ("The number of runs through the benchmark: ");
      int_to_a( buffer, loops );
      puts_UART( buffer );
     54c:	e28d0010 	add	r0, sp, #16
     550:	eb00081f 	bl	25d4 <puts_UART>
      puts_UART ("\n");
     554:	e59f021c 	ldr	r0, [pc, #540]	; 778 <PLLSTAT_PLOCK+0x378>
     558:	eb00081d 	bl	25d4 <puts_UART>

      // RESET TIMER ***************************************************
      reset_counter();
     55c:	eb00077c 	bl	2354 <reset_counter>

      for (Run_Index = 1; Run_Index <= loops; ++Run_Index)
     560:	e3a0c001 	mov	ip, #1
     564:	e58dc008 	str	ip, [sp, #8]
          Proc_5();
          Proc_4();
          /* Ch_1_Glob == 'A', Ch_2_Glob == 'B', Bool_Glob == true */
          Int_1_Loc = 2;
          Int_2_Loc = 3;
          strcpy (Str_2_Loc, "DHRYSTONE PROGRAM, 2'ND STRING");
     568:	e59fe1f0 	ldr	lr, [pc, #496]	; 760 <PLLSTAT_PLOCK+0x360>
     56c:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
     570:	e28dc040 	add	ip, sp, #64	; 0x40
     574:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
     578:	e89e000f 	ldm	lr, {r0, r1, r2, r3}
     57c:	e8ac0007 	stmia	ip!, {r0, r1, r2}
     580:	e5dd1022 	ldrb	r1, [sp, #34]	; 0x22
     584:	e5dd2043 	ldrb	r2, [sp, #67]	; 0x43
     588:	e1510002 	cmp	r1, r2

void Proc_5 (void) /* without parameters */
/*******/
/* executed once */
{
  Ch_1_Glob = 'A';
     58c:	e59f11f8 	ldr	r1, [pc, #504]	; 78c <PLLSTAT_PLOCK+0x38c>
     590:	e3a0e041 	mov	lr, #65	; 0x41
/* executed once */
{
  Boolean Bool_Loc;

  Bool_Loc = Ch_1_Glob == 'A';
  Bool_Glob = Bool_Loc | Bool_Glob;
     594:	e59f21e8 	ldr	r2, [pc, #488]	; 784 <PLLSTAT_PLOCK+0x384>
          Proc_5();
          Proc_4();
          /* Ch_1_Glob == 'A', Ch_2_Glob == 'B', Bool_Glob == true */
          Int_1_Loc = 2;
          Int_2_Loc = 3;
          strcpy (Str_2_Loc, "DHRYSTONE PROGRAM, 2'ND STRING");
     598:	e0cc30b2 	strh	r3, [ip], #2
/* executed once */
{
  Boolean Bool_Loc;

  Bool_Loc = Ch_1_Glob == 'A';
  Bool_Glob = Bool_Loc | Bool_Glob;
     59c:	e3a06001 	mov	r6, #1

void Proc_5 (void) /* without parameters */
/*******/
/* executed once */
{
  Ch_1_Glob = 'A';
     5a0:	e5c1e000 	strb	lr, [r1]
{
  Boolean Bool_Loc;

  Bool_Loc = Ch_1_Glob == 'A';
  Bool_Glob = Bool_Loc | Bool_Glob;
  Ch_2_Glob = 'B';
     5a4:	e59fe1ec 	ldr	lr, [pc, #492]	; 798 <PLLSTAT_PLOCK+0x398>
          Proc_5();
          Proc_4();
          /* Ch_1_Glob == 'A', Ch_2_Glob == 'B', Bool_Glob == true */
          Int_1_Loc = 2;
          Int_2_Loc = 3;
          strcpy (Str_2_Loc, "DHRYSTONE PROGRAM, 2'ND STRING");
     5a8:	e1a03823 	lsr	r3, r3, #16
/* executed once */
{
  Boolean Bool_Loc;

  Bool_Loc = Ch_1_Glob == 'A';
  Bool_Glob = Bool_Loc | Bool_Glob;
     5ac:	e5826000 	str	r6, [r2]
  Ch_2_Glob = 'B';
     5b0:	e3a02042 	mov	r2, #66	; 0x42
     5b4:	e5ce2000 	strb	r2, [lr]
          Proc_5();
          Proc_4();
          /* Ch_1_Glob == 'A', Ch_2_Glob == 'B', Bool_Glob == true */
          Int_1_Loc = 2;
          Int_2_Loc = 3;
          strcpy (Str_2_Loc, "DHRYSTONE PROGRAM, 2'ND STRING");
     5b8:	e5cc3000 	strb	r3, [ip]
     5bc:	0a000059 	beq	728 <PLLSTAT_PLOCK+0x328>
  if (Ch_Loc == 'R')
    /* then, not executed */
    return (true);
  else /* executed */
    {
      if (strcmp (Str_1_Par_Ref, Str_2_Par_Ref) > 0)
     5c0:	e28d1040 	add	r1, sp, #64	; 0x40
     5c4:	e28d0020 	add	r0, sp, #32
     5c8:	eb000a75 	bl	2fa4 <strcmp>
  REG One_Fifty Int_Loc;

  Int_Loc = Int_1_Par_Val + 5;
  Arr_1_Par_Ref [Int_Loc] = Int_2_Par_Val;
  Arr_1_Par_Ref [Int_Loc+1] = Arr_1_Par_Ref [Int_Loc];
  Arr_1_Par_Ref [Int_Loc+30] = Int_Loc;
     5cc:	e3a02008 	mov	r2, #8
  for (Int_Index = Int_Loc; Int_Index <= Int_Loc+1; ++Int_Index)
    Arr_2_Par_Ref [Int_Loc] [Int_Index] = Int_Loc;
  Arr_2_Par_Ref [Int_Loc] [Int_Loc-1] += 1;
     5d0:	e594165c 	ldr	r1, [r4, #1628]	; 0x65c
          /* Ch_1_Glob == 'A', Ch_2_Glob == 'B', Bool_Glob == true */
          Int_1_Loc = 2;
          Int_2_Loc = 3;
          strcpy (Str_2_Loc, "DHRYSTONE PROGRAM, 2'ND STRING");
          Enum_Loc = Ident_2;
          Bool_Glob = ! Func_2 (Str_1_Loc, Str_2_Loc);
     5d4:	e3500000 	cmp	r0, #0
{
  REG One_Fifty Int_Index;
  REG One_Fifty Int_Loc;

  Int_Loc = Int_1_Par_Val + 5;
  Arr_1_Par_Ref [Int_Loc] = Int_2_Par_Val;
     5d8:	e3a03007 	mov	r3, #7
  Arr_1_Par_Ref [Int_Loc+1] = Arr_1_Par_Ref [Int_Loc];
  Arr_1_Par_Ref [Int_Loc+30] = Int_Loc;
     5dc:	e5852098 	str	r2, [r5, #152]	; 0x98
  for (Int_Index = Int_Loc; Int_Index <= Int_Loc+1; ++Int_Index)
    Arr_2_Par_Ref [Int_Loc] [Int_Index] = Int_Loc;
     5e0:	e5842660 	str	r2, [r4, #1632]	; 0x660
     5e4:	e5842664 	str	r2, [r4, #1636]	; 0x664
  Arr_2_Par_Ref [Int_Loc] [Int_Loc-1] += 1;
  Arr_2_Par_Ref [Int_Loc+20] [Int_Loc] = Arr_1_Par_Ref [Int_Loc];
     5e8:	e3a02c16 	mov	r2, #5632	; 0x1600
          /* Ch_1_Glob == 'A', Ch_2_Glob == 'B', Bool_Glob == true */
          Int_1_Loc = 2;
          Int_2_Loc = 3;
          strcpy (Str_2_Loc, "DHRYSTONE PROGRAM, 2'ND STRING");
          Enum_Loc = Ident_2;
          Bool_Glob = ! Func_2 (Str_1_Loc, Str_2_Loc);
     5ec:	c3a0c000 	movgt	ip, #0
     5f0:	d3a0c001 	movle	ip, #1
  Arr_1_Par_Ref [Int_Loc+1] = Arr_1_Par_Ref [Int_Loc];
  Arr_1_Par_Ref [Int_Loc+30] = Int_Loc;
  for (Int_Index = Int_Loc; Int_Index <= Int_Loc+1; ++Int_Index)
    Arr_2_Par_Ref [Int_Loc] [Int_Index] = Int_Loc;
  Arr_2_Par_Ref [Int_Loc] [Int_Loc-1] += 1;
  Arr_2_Par_Ref [Int_Loc+20] [Int_Loc] = Arr_1_Par_Ref [Int_Loc];
     5f4:	e7843002 	str	r3, [r4, r2]
  Arr_1_Par_Ref [Int_Loc] = Int_2_Par_Val;
  Arr_1_Par_Ref [Int_Loc+1] = Arr_1_Par_Ref [Int_Loc];
  Arr_1_Par_Ref [Int_Loc+30] = Int_Loc;
  for (Int_Index = Int_Loc; Int_Index <= Int_Loc+1; ++Int_Index)
    Arr_2_Par_Ref [Int_Loc] [Int_Index] = Int_Loc;
  Arr_2_Par_Ref [Int_Loc] [Int_Loc-1] += 1;
     5f8:	e2811001 	add	r1, r1, #1
{
  REG One_Fifty Int_Index;
  REG One_Fifty Int_Loc;

  Int_Loc = Int_1_Par_Val + 5;
  Arr_1_Par_Ref [Int_Loc] = Int_2_Par_Val;
     5fc:	e5853020 	str	r3, [r5, #32]
  Arr_1_Par_Ref [Int_Loc+1] = Arr_1_Par_Ref [Int_Loc];
     600:	e5853024 	str	r3, [r5, #36]	; 0x24
              Int_1_Loc += 1;
            } /* while */
          /* Int_1_Loc == 3, Int_2_Loc == 3, Int_3_Loc == 7 */
          Proc_8 (Arr_1_Glob, Arr_2_Glob, Int_1_Loc, Int_3_Loc);
          /* Int_Glob == 5 */
          Proc_1 (Ptr_Glob);
     604:	e5990000 	ldr	r0, [r9]
  Arr_1_Par_Ref [Int_Loc+30] = Int_Loc;
  for (Int_Index = Int_Loc; Int_Index <= Int_Loc+1; ++Int_Index)
    Arr_2_Par_Ref [Int_Loc] [Int_Index] = Int_Loc;
  Arr_2_Par_Ref [Int_Loc] [Int_Loc-1] += 1;
  Arr_2_Par_Ref [Int_Loc+20] [Int_Loc] = Arr_1_Par_Ref [Int_Loc];
  Int_Glob = 5;
     608:	e3a03005 	mov	r3, #5
          /* Ch_1_Glob == 'A', Ch_2_Glob == 'B', Bool_Glob == true */
          Int_1_Loc = 2;
          Int_2_Loc = 3;
          strcpy (Str_2_Loc, "DHRYSTONE PROGRAM, 2'ND STRING");
          Enum_Loc = Ident_2;
          Bool_Glob = ! Func_2 (Str_1_Loc, Str_2_Loc);
     60c:	e588c000 	str	ip, [r8]
  Arr_1_Par_Ref [Int_Loc] = Int_2_Par_Val;
  Arr_1_Par_Ref [Int_Loc+1] = Arr_1_Par_Ref [Int_Loc];
  Arr_1_Par_Ref [Int_Loc+30] = Int_Loc;
  for (Int_Index = Int_Loc; Int_Index <= Int_Loc+1; ++Int_Index)
    Arr_2_Par_Ref [Int_Loc] [Int_Index] = Int_Loc;
  Arr_2_Par_Ref [Int_Loc] [Int_Loc-1] += 1;
     610:	e584165c 	str	r1, [r4, #1628]	; 0x65c
  Arr_2_Par_Ref [Int_Loc+20] [Int_Loc] = Arr_1_Par_Ref [Int_Loc];
  Int_Glob = 5;
     614:	e5873000 	str	r3, [r7]
              Int_1_Loc += 1;
            } /* while */
          /* Int_1_Loc == 3, Int_2_Loc == 3, Int_3_Loc == 7 */
          Proc_8 (Arr_1_Glob, Arr_2_Glob, Int_1_Loc, Int_3_Loc);
          /* Int_Glob == 5 */
          Proc_1 (Ptr_Glob);
     618:	ebffff2b 	bl	2cc <Proc_1>
          for (Ch_Index = 'A'; Ch_Index <= Ch_2_Glob; ++Ch_Index)
     61c:	e5dae000 	ldrb	lr, [sl]
     620:	e35e0040 	cmp	lr, #64	; 0x40
     624:	91a0b006 	movls	fp, r6
     628:	93a0200d 	movls	r2, #13
          Proc_4();
          /* Ch_1_Glob == 'A', Ch_2_Glob == 'B', Bool_Glob == true */
          Int_1_Loc = 2;
          Int_2_Loc = 3;
          strcpy (Str_2_Loc, "DHRYSTONE PROGRAM, 2'ND STRING");
          Enum_Loc = Ident_2;
     62c:	91a0600b 	movls	r6, fp
            } /* while */
          /* Int_1_Loc == 3, Int_2_Loc == 3, Int_3_Loc == 7 */
          Proc_8 (Arr_1_Glob, Arr_2_Glob, Int_1_Loc, Int_3_Loc);
          /* Int_Glob == 5 */
          Proc_1 (Ptr_Glob);
          for (Ch_Index = 'A'; Ch_Index <= Ch_2_Glob; ++Ch_Index)
     630:	9a000025 	bls	6cc <PLLSTAT_PLOCK+0x2cc>
     634:	e3a0c041 	mov	ip, #65	; 0x41
     638:	e3a02003 	mov	r2, #3
     63c:	e28cc001 	add	ip, ip, #1
     640:	e20cc0ff 	and	ip, ip, #255	; 0xff
     644:	e15c000e 	cmp	ip, lr
     648:	8a000016 	bhi	6a8 <PLLSTAT_PLOCK+0x2a8>
  Capital_Letter        Ch_1_Loc;
  Capital_Letter        Ch_2_Loc;

  Ch_1_Loc = Ch_1_Par_Val;
  Ch_2_Loc = Ch_1_Loc;
  if (Ch_2_Loc != Ch_2_Par_Val)
     64c:	e35c0043 	cmp	ip, #67	; 0x43
    /* then, executed */
    return (Ident_1);
  else  /* not executed */
    {
      Ch_1_Glob = Ch_1_Loc;
     650:	059f1134 	ldreq	r1, [pc, #308]	; 78c <PLLSTAT_PLOCK+0x38c>
      return (Ident_2);
     654:	03a03001 	moveq	r3, #1

  Ch_1_Loc = Ch_1_Par_Val;
  Ch_2_Loc = Ch_1_Loc;
  if (Ch_2_Loc != Ch_2_Par_Val)
    /* then, executed */
    return (Ident_1);
     658:	13a03000 	movne	r3, #0
  else  /* not executed */
    {
      Ch_1_Glob = Ch_1_Loc;
     65c:	05c1c000 	strbeq	ip, [r1]
          /* Int_Glob == 5 */
          Proc_1 (Ptr_Glob);
          for (Ch_Index = 'A'; Ch_Index <= Ch_2_Glob; ++Ch_Index)
            /* loop body executed twice */
            {
              if (Enum_Loc == Func_1 (Ch_Index, 'C'))
     660:	e1530006 	cmp	r3, r6
     664:	1afffff4 	bne	63c <PLLSTAT_PLOCK+0x23c>
                /* then, not executed */
                {
                  Proc_6 (Ident_1, &Enum_Loc);
                  strcpy (Str_2_Loc, "DHRYSTONE PROGRAM, 3'RD STRING");
     668:	e59fb0f4 	ldr	fp, [pc, #244]	; 764 <PLLSTAT_PLOCK+0x364>
     66c:	e8bb000f 	ldm	fp!, {r0, r1, r2, r3}
     670:	e28d6040 	add	r6, sp, #64	; 0x40
     674:	e8a6000f 	stmia	r6!, {r0, r1, r2, r3}
     678:	e89b000f 	ldm	fp, {r0, r1, r2, r3}
     67c:	e8a60007 	stmia	r6!, {r0, r1, r2}
            } /* while */
          /* Int_1_Loc == 3, Int_2_Loc == 3, Int_3_Loc == 7 */
          Proc_8 (Arr_1_Glob, Arr_2_Glob, Int_1_Loc, Int_3_Loc);
          /* Int_Glob == 5 */
          Proc_1 (Ptr_Glob);
          for (Ch_Index = 'A'; Ch_Index <= Ch_2_Glob; ++Ch_Index)
     680:	e28cc001 	add	ip, ip, #1
            {
              if (Enum_Loc == Func_1 (Ch_Index, 'C'))
                /* then, not executed */
                {
                  Proc_6 (Ident_1, &Enum_Loc);
                  strcpy (Str_2_Loc, "DHRYSTONE PROGRAM, 3'RD STRING");
     684:	e0c630b2 	strh	r3, [r6], #2
                  Int_2_Loc = Run_Index;
                  Int_Glob = Run_Index;
     688:	e59d2008 	ldr	r2, [sp, #8]
            } /* while */
          /* Int_1_Loc == 3, Int_2_Loc == 3, Int_3_Loc == 7 */
          Proc_8 (Arr_1_Glob, Arr_2_Glob, Int_1_Loc, Int_3_Loc);
          /* Int_Glob == 5 */
          Proc_1 (Ptr_Glob);
          for (Ch_Index = 'A'; Ch_Index <= Ch_2_Glob; ++Ch_Index)
     68c:	e20cc0ff 	and	ip, ip, #255	; 0xff
            {
              if (Enum_Loc == Func_1 (Ch_Index, 'C'))
                /* then, not executed */
                {
                  Proc_6 (Ident_1, &Enum_Loc);
                  strcpy (Str_2_Loc, "DHRYSTONE PROGRAM, 3'RD STRING");
     690:	e1a03823 	lsr	r3, r3, #16
            } /* while */
          /* Int_1_Loc == 3, Int_2_Loc == 3, Int_3_Loc == 7 */
          Proc_8 (Arr_1_Glob, Arr_2_Glob, Int_1_Loc, Int_3_Loc);
          /* Int_Glob == 5 */
          Proc_1 (Ptr_Glob);
          for (Ch_Index = 'A'; Ch_Index <= Ch_2_Glob; ++Ch_Index)
     694:	e15c000e 	cmp	ip, lr
            {
              if (Enum_Loc == Func_1 (Ch_Index, 'C'))
                /* then, not executed */
                {
                  Proc_6 (Ident_1, &Enum_Loc);
                  strcpy (Str_2_Loc, "DHRYSTONE PROGRAM, 3'RD STRING");
     698:	e5c63000 	strb	r3, [r6]
                  Int_2_Loc = Run_Index;
                  Int_Glob = Run_Index;
     69c:	e5872000 	str	r2, [r7]
    /* then, not executed */
    *Enum_Ref_Par = Ident_4;
  switch (Enum_Val_Par)
  {
  case Ident_1:
    *Enum_Ref_Par = Ident_1;
     6a0:	e3a06000 	mov	r6, #0
            } /* while */
          /* Int_1_Loc == 3, Int_2_Loc == 3, Int_3_Loc == 7 */
          Proc_8 (Arr_1_Glob, Arr_2_Glob, Int_1_Loc, Int_3_Loc);
          /* Int_Glob == 5 */
          Proc_1 (Ptr_Glob);
          for (Ch_Index = 'A'; Ch_Index <= Ch_2_Glob; ++Ch_Index)
     6a4:	9affffe8 	bls	64c <PLLSTAT_PLOCK+0x24c>
     6a8:	e59f30b8 	ldr	r3, [pc, #184]	; 768 <PLLSTAT_PLOCK+0x368>
     6ac:	e0822082 	add	r2, r2, r2, lsl #1
     6b0:	e0cbc293 	smull	ip, fp, r3, r2
     6b4:	e1a03fc2 	asr	r3, r2, #31
     6b8:	e08bb002 	add	fp, fp, r2
     6bc:	e2422007 	sub	r2, r2, #7
     6c0:	e063b14b 	rsb	fp, r3, fp, asr #2
     6c4:	e0622182 	rsb	r2, r2, r2, lsl #3
     6c8:	e06b2002 	rsb	r2, fp, r2
  One_Fifty  Int_Loc;
  Enumeration   Enum_Loc;

  Int_Loc = *Int_Par_Ref + 10;
  do /* executed once */
    if (Ch_1_Glob == 'A')
     6cc:	e59fe0b8 	ldr	lr, [pc, #184]	; 78c <PLLSTAT_PLOCK+0x38c>
     6d0:	e5de3000 	ldrb	r3, [lr]
      puts_UART ("\n");

      // RESET TIMER ***************************************************
      reset_counter();

      for (Run_Index = 1; Run_Index <= loops; ++Run_Index)
     6d4:	e59dc008 	ldr	ip, [sp, #8]
  One_Fifty  Int_Loc;
  Enumeration   Enum_Loc;

  Int_Loc = *Int_Par_Ref + 10;
  do /* executed once */
    if (Ch_1_Glob == 'A')
     6d8:	e3530041 	cmp	r3, #65	; 0x41
      /* then, executed */
      {
        Int_Loc -= 1;
        *Int_Par_Ref = Int_Loc - Int_Glob;
     6dc:	05973000 	ldreq	r3, [r7]
      puts_UART ("\n");

      // RESET TIMER ***************************************************
      reset_counter();

      for (Run_Index = 1; Run_Index <= loops; ++Run_Index)
     6e0:	e59de00c 	ldr	lr, [sp, #12]
  Int_Loc = *Int_Par_Ref + 10;
  do /* executed once */
    if (Ch_1_Glob == 'A')
      /* then, executed */
      {
        Int_Loc -= 1;
     6e4:	028bb009 	addeq	fp, fp, #9
      puts_UART ("\n");

      // RESET TIMER ***************************************************
      reset_counter();

      for (Run_Index = 1; Run_Index <= loops; ++Run_Index)
     6e8:	e28cc001 	add	ip, ip, #1
  do /* executed once */
    if (Ch_1_Glob == 'A')
      /* then, executed */
      {
        Int_Loc -= 1;
        *Int_Par_Ref = Int_Loc - Int_Glob;
     6ec:	0063b00b 	rsbeq	fp, r3, fp
      puts_UART ("\n");

      // RESET TIMER ***************************************************
      reset_counter();

      for (Run_Index = 1; Run_Index <= loops; ++Run_Index)
     6f0:	e15e000c 	cmp	lr, ip
     6f4:	e58dc008 	str	ip, [sp, #8]
     6f8:	aaffff9a 	bge	568 <PLLSTAT_PLOCK+0x168>
     6fc:	e58d2008 	str	r2, [sp, #8]
          /* Int_1_Loc == 5 */

        } /* loop "for Run_Index" */

      // READ TIMER ***************************************************
      ms = read_counter();
     700:	eb00071a 	bl	2370 <read_counter>

      if(ms < SMALLTIME)
     704:	e59f3060 	ldr	r3, [pc, #96]	; 76c <PLLSTAT_PLOCK+0x36c>
     708:	e1500003 	cmp	r0, r3
     70c:	8a000037 	bhi	7f0 <PLLSTAT_PLOCK+0x3f0>
        {
          loops *= 2;
     710:	e59dc00c 	ldr	ip, [sp, #12]
          Arr_2_Glob [8][7] = 10;
     714:	e3a0300a 	mov	r3, #10
      // READ TIMER ***************************************************
      ms = read_counter();

      if(ms < SMALLTIME)
        {
          loops *= 2;
     718:	e1a0c08c 	lsl	ip, ip, #1
     71c:	e58dc00c 	str	ip, [sp, #12]
          Arr_2_Glob [8][7] = 10;
     720:	e584365c 	str	r3, [r4, #1628]	; 0x65c
     724:	eaffff65 	b	4c0 <PLLSTAT_PLOCK+0xc0>
     728:	eafffffe 	b	728 <PLLSTAT_PLOCK+0x328>
              digit++;
              number -= unit;
            }

          if (digit != 0) digitfound = 1;
          if (digitfound) str[pos++] = digit + '0' ;
     72c:	e3510000 	cmp	r1, #0
     730:	0affff7e 	beq	530 <PLLSTAT_PLOCK+0x130>
     734:	e3a01000 	mov	r1, #0
     738:	eaffff76 	b	518 <PLLSTAT_PLOCK+0x118>
     73c:	00004b30 	.word	0x00004b30
     740:	00004b50 	.word	0x00004b50
     744:	4000324c 	.word	0x4000324c
     748:	40000b30 	.word	0x40000b30
     74c:	00004b70 	.word	0x00004b70
     750:	004c4b40 	.word	0x004c4b40
     754:	40003244 	.word	0x40003244
     758:	40003250 	.word	0x40003250
     75c:	00004ba0 	.word	0x00004ba0
     760:	00004bcc 	.word	0x00004bcc
     764:	00004bec 	.word	0x00004bec
     768:	92492493 	.word	0x92492493
     76c:	00003a97 	.word	0x00003a97
     770:	00004fa0 	.word	0x00004fa0
     774:	00004fb0 	.word	0x00004fb0
     778:	00004f8c 	.word	0x00004f8c
     77c:	00004fe8 	.word	0x00004fe8
     780:	00004c28 	.word	0x00004c28
     784:	40003318 	.word	0x40003318
     788:	00004c44 	.word	0x00004c44
     78c:	40003248 	.word	0x40003248
     790:	00004c7c 	.word	0x00004c7c
     794:	00004c80 	.word	0x00004c80
     798:	40003249 	.word	0x40003249
     79c:	00004c60 	.word	0x00004c60
     7a0:	00004c9c 	.word	0x00004c9c
     7a4:	00004ca0 	.word	0x00004ca0
     7a8:	00004cbc 	.word	0x00004cbc
     7ac:	00004cd8 	.word	0x00004cd8
     7b0:	00004cfc 	.word	0x00004cfc
     7b4:	00004d24 	.word	0x00004d24
     7b8:	00004d74 	.word	0x00004d74
     7bc:	00004e04 	.word	0x00004e04
     7c0:	00004d08 	.word	0x00004d08
     7c4:	00004e18 	.word	0x00004e18
     7c8:	00004d58 	.word	0x00004d58
     7cc:	00004d78 	.word	0x00004d78
     7d0:	00004d94 	.word	0x00004d94
     7d4:	00004db0 	.word	0x00004db0
     7d8:	40003240 	.word	0x40003240
     7dc:	00004dcc 	.word	0x00004dcc
     7e0:	00004e58 	.word	0x00004e58
     7e4:	00004c0c 	.word	0x00004c0c
     7e8:	00004e74 	.word	0x00004e74
     7ec:	00004b04 	.word	0x00004b04
     7f0:	e59dc008 	ldr	ip, [sp, #8]
     7f4:	e58d0008 	str	r0, [sp, #8]
    } while(ms < SMALLTIME);


  #define CHECK_RESULTS
#ifdef CHECK_RESULTS
  puts_UART ("Execution ends\n");
     7f8:	e51f0090 	ldr	r0, [pc, #-144]	; 770 <PLLSTAT_PLOCK+0x370>
     7fc:	e58dc000 	str	ip, [sp]
     800:	eb000773 	bl	25d4 <puts_UART>
  puts_UART ("\n");
     804:	e51f0094 	ldr	r0, [pc, #-148]	; 778 <PLLSTAT_PLOCK+0x378>
     808:	eb000771 	bl	25d4 <puts_UART>
  puts_UART ("Final values of the variables used in the benchmark:\n");
     80c:	e51f00a0 	ldr	r0, [pc, #-160]	; 774 <PLLSTAT_PLOCK+0x374>
     810:	eb00076f 	bl	25d4 <puts_UART>
  puts_UART ("\n");
     814:	e51f00a4 	ldr	r0, [pc, #-164]	; 778 <PLLSTAT_PLOCK+0x378>
     818:	eb00076d 	bl	25d4 <puts_UART>
  puts_UART ("Int_Glob:            %d\n");
     81c:	e51f00a8 	ldr	r0, [pc, #-168]	; 77c <PLLSTAT_PLOCK+0x37c>
     820:	eb00076b 	bl	25d4 <puts_UART>
  int_to_a(buffer, Int_Glob );
     824:	e597e000 	ldr	lr, [r7]
int int_to_a(char * str, int number)
{
  if(str == NULL)
    return 1;

  if (number > 0)
     828:	e35e0000 	cmp	lr, #0
     82c:	e59dc000 	ldr	ip, [sp]
     830:	da0005b9 	ble	1f1c <STACK_SIZE+0x171c>
    {
      int i;
      int pos = 0;
      int digit;
      int digitfound = 0;
      const int units[] =
     834:	e51f8050 	ldr	r8, [pc, #-80]	; 7ec <PLLSTAT_PLOCK+0x3ec>
     838:	e8b8000f 	ldm	r8!, {r0, r1, r2, r3}
     83c:	e28d7060 	add	r7, sp, #96	; 0x60
     840:	e8a7000f 	stmia	r7!, {r0, r1, r2, r3}
     844:	e8b8000f 	ldm	r8!, {r0, r1, r2, r3}
     848:	e8a7000f 	stmia	r7!, {r0, r1, r2, r3}
     84c:	e8980003 	ldm	r8, {r0, r1}
  if (number > 0)
    {
      int i;
      int pos = 0;
      int digit;
      int digitfound = 0;
     850:	e3a02000 	mov	r2, #0
      const int units[] =
     854:	e8870003 	stm	r7, {r0, r1}
  dhrystone();
}



int dhrystone (void)
     858:	e28d105c 	add	r1, sp, #92	; 0x5c
    return 1;

  if (number > 0)
    {
      int i;
      int pos = 0;
     85c:	e1a00002 	mov	r0, r2



      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
     860:	e5b13004 	ldr	r3, [r1, #4]!
          digit = 0;

          while (number >= unit)
     864:	e153000e 	cmp	r3, lr
     868:	ca000542 	bgt	1d78 <STACK_SIZE+0x1578>
     86c:	e3a02000 	mov	r2, #0
            {
              digit++;
              number -= unit;
     870:	e063e00e 	rsb	lr, r3, lr
      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
          digit = 0;

          while (number >= unit)
     874:	e153000e 	cmp	r3, lr
            {
              digit++;
     878:	e2822001 	add	r2, r2, #1
      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
          digit = 0;

          while (number >= unit)
     87c:	dafffffb 	ble	870 <STACK_SIZE+0x70>
              digit++;
              number -= unit;
            }

          if (digit != 0) digitfound = 1;
          if (digitfound) str[pos++] = digit + '0' ;
     880:	e28d7088 	add	r7, sp, #136	; 0x88
     884:	e0873000 	add	r3, r7, r0
     888:	e2822030 	add	r2, r2, #48	; 0x30
     88c:	e5432078 	strb	r2, [r3, #-120]	; 0x78
     890:	e2800001 	add	r0, r0, #1
     894:	e3a02001 	mov	r2, #1
              1};
      int unit;



      for (i = 0; i < 10; ++i)
     898:	e59d7004 	ldr	r7, [sp, #4]
     89c:	e1510007 	cmp	r1, r7
     8a0:	1affffee 	bne	860 <STACK_SIZE+0x60>
            }

          if (digit != 0) digitfound = 1;
          if (digitfound) str[pos++] = digit + '0' ;
        }
      str[pos] = '\0';
     8a4:	e28de088 	add	lr, sp, #136	; 0x88
     8a8:	e08e0000 	add	r0, lr, r0
     8ac:	e3a03000 	mov	r3, #0
     8b0:	e5403078 	strb	r3, [r0, #-120]	; 0x78
  puts_UART ("\n");
  puts_UART ("Final values of the variables used in the benchmark:\n");
  puts_UART ("\n");
  puts_UART ("Int_Glob:            %d\n");
  int_to_a(buffer, Int_Glob );
  puts_UART( buffer );
     8b4:	e28d0010 	add	r0, sp, #16
    {
      int i;
      int pos = 0;
      int digit;
      int digitfound = 0;
      const int units[] =
     8b8:	e51f70d4 	ldr	r7, [pc, #-212]	; 7ec <PLLSTAT_PLOCK+0x3ec>
  puts_UART ("\n");
  puts_UART ("Final values of the variables used in the benchmark:\n");
  puts_UART ("\n");
  puts_UART ("Int_Glob:            %d\n");
  int_to_a(buffer, Int_Glob );
  puts_UART( buffer );
     8bc:	e58dc000 	str	ip, [sp]
     8c0:	eb000743 	bl	25d4 <puts_UART>
  puts_UART ("        should be:   %d\n");
     8c4:	e51f00e8 	ldr	r0, [pc, #-232]	; 7e4 <PLLSTAT_PLOCK+0x3e4>
     8c8:	eb000741 	bl	25d4 <puts_UART>
    {
      int i;
      int pos = 0;
      int digit;
      int digitfound = 0;
      const int units[] =
     8cc:	e8b7000f 	ldm	r7!, {r0, r1, r2, r3}
     8d0:	e28de060 	add	lr, sp, #96	; 0x60
     8d4:	e8ae000f 	stmia	lr!, {r0, r1, r2, r3}
     8d8:	e8b7000f 	ldm	r7!, {r0, r1, r2, r3}
     8dc:	e8ae000f 	stmia	lr!, {r0, r1, r2, r3}
     8e0:	e8970003 	ldm	r7, {r0, r1}
    return 1;

  if (number > 0)
    {
      int i;
      int pos = 0;
     8e4:	e59dc000 	ldr	ip, [sp]
      int digit;
      int digitfound = 0;
      const int units[] =
     8e8:	e88e0003 	stm	lr, {r0, r1}
  if (number > 0)
    {
      int i;
      int pos = 0;
      int digit;
      int digitfound = 0;
     8ec:	e3a01000 	mov	r1, #0
  dhrystone();
}



int dhrystone (void)
     8f0:	e28d005c 	add	r0, sp, #92	; 0x5c
     8f4:	e3a03005 	mov	r3, #5
    return 1;

  if (number > 0)
    {
      int i;
      int pos = 0;
     8f8:	e1a0e001 	mov	lr, r1



      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
     8fc:	e5b02004 	ldr	r2, [r0, #4]!
          digit = 0;

          while (number >= unit)
     900:	e1530002 	cmp	r3, r2
     904:	ba000503 	blt	1d18 <STACK_SIZE+0x1518>
     908:	e3a01000 	mov	r1, #0
            {
              digit++;
              number -= unit;
     90c:	e0623003 	rsb	r3, r2, r3
      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
          digit = 0;

          while (number >= unit)
     910:	e1520003 	cmp	r2, r3
            {
              digit++;
     914:	e2811001 	add	r1, r1, #1
      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
          digit = 0;

          while (number >= unit)
     918:	dafffffb 	ble	90c <STACK_SIZE+0x10c>
              digit++;
              number -= unit;
            }

          if (digit != 0) digitfound = 1;
          if (digitfound) str[pos++] = digit + '0' ;
     91c:	e28d7088 	add	r7, sp, #136	; 0x88
     920:	e087200e 	add	r2, r7, lr
     924:	e2811030 	add	r1, r1, #48	; 0x30
     928:	e5421078 	strb	r1, [r2, #-120]	; 0x78
     92c:	e28ee001 	add	lr, lr, #1
     930:	e3a01001 	mov	r1, #1
              1};
      int unit;



      for (i = 0; i < 10; ++i)
     934:	e59d7004 	ldr	r7, [sp, #4]
     938:	e1500007 	cmp	r0, r7
     93c:	1affffee 	bne	8fc <STACK_SIZE+0xfc>
            }

          if (digit != 0) digitfound = 1;
          if (digitfound) str[pos++] = digit + '0' ;
        }
      str[pos] = '\0';
     940:	e28d1088 	add	r1, sp, #136	; 0x88
     944:	e081e00e 	add	lr, r1, lr
     948:	e3a0a000 	mov	sl, #0
     94c:	e54ea078 	strb	sl, [lr, #-120]	; 0x78
  puts_UART ("Int_Glob:            %d\n");
  int_to_a(buffer, Int_Glob );
  puts_UART( buffer );
  puts_UART ("        should be:   %d\n");
  int_to_a(buffer, 5);
  puts_UART( buffer );
     950:	e28d0010 	add	r0, sp, #16
     954:	e58dc000 	str	ip, [sp]
     958:	eb00071d 	bl	25d4 <puts_UART>
  puts_UART ("Bool_Glob:           %d\n");
     95c:	e51f01e4 	ldr	r0, [pc, #-484]	; 780 <PLLSTAT_PLOCK+0x380>
     960:	eb00071b 	bl	25d4 <puts_UART>
  int_to_a(buffer, Bool_Glob);
     964:	e51f21e8 	ldr	r2, [pc, #-488]	; 784 <PLLSTAT_PLOCK+0x384>
     968:	e592e000 	ldr	lr, [r2]
int int_to_a(char * str, int number)
{
  if(str == NULL)
    return 1;

  if (number > 0)
     96c:	e15e000a 	cmp	lr, sl
     970:	e59dc000 	ldr	ip, [sp]
     974:	da000563 	ble	1f08 <STACK_SIZE+0x1708>
    {
      int i;
      int pos = 0;
      int digit;
      int digitfound = 0;
      const int units[] =
     978:	e51f8194 	ldr	r8, [pc, #-404]	; 7ec <PLLSTAT_PLOCK+0x3ec>
     97c:	e8b8000f 	ldm	r8!, {r0, r1, r2, r3}
     980:	e28d7060 	add	r7, sp, #96	; 0x60
     984:	e8a7000f 	stmia	r7!, {r0, r1, r2, r3}
     988:	e8b8000f 	ldm	r8!, {r0, r1, r2, r3}
     98c:	e8a7000f 	stmia	r7!, {r0, r1, r2, r3}
     990:	e8980003 	ldm	r8, {r0, r1}
     994:	e8870003 	stm	r7, {r0, r1}
  dhrystone();
}



int dhrystone (void)
     998:	e28d105c 	add	r1, sp, #92	; 0x5c
    return 1;

  if (number > 0)
    {
      int i;
      int pos = 0;
     99c:	e1a0000a 	mov	r0, sl



      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
     9a0:	e5b13004 	ldr	r3, [r1, #4]!
          digit = 0;

          while (number >= unit)
     9a4:	e15e0003 	cmp	lr, r3
     9a8:	ba0004ee 	blt	1d68 <STACK_SIZE+0x1568>
     9ac:	e3a02000 	mov	r2, #0
            {
              digit++;
              number -= unit;
     9b0:	e063e00e 	rsb	lr, r3, lr
      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
          digit = 0;

          while (number >= unit)
     9b4:	e153000e 	cmp	r3, lr
            {
              digit++;
     9b8:	e2822001 	add	r2, r2, #1
      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
          digit = 0;

          while (number >= unit)
     9bc:	dafffffb 	ble	9b0 <STACK_SIZE+0x1b0>
              digit++;
              number -= unit;
            }

          if (digit != 0) digitfound = 1;
          if (digitfound) str[pos++] = digit + '0' ;
     9c0:	e28d7088 	add	r7, sp, #136	; 0x88
     9c4:	e0873000 	add	r3, r7, r0
     9c8:	e2822030 	add	r2, r2, #48	; 0x30
     9cc:	e5432078 	strb	r2, [r3, #-120]	; 0x78
     9d0:	e2800001 	add	r0, r0, #1
     9d4:	e3a0a001 	mov	sl, #1
              1};
      int unit;



      for (i = 0; i < 10; ++i)
     9d8:	e59d7004 	ldr	r7, [sp, #4]
     9dc:	e1510007 	cmp	r1, r7
     9e0:	1affffee 	bne	9a0 <STACK_SIZE+0x1a0>
            }

          if (digit != 0) digitfound = 1;
          if (digitfound) str[pos++] = digit + '0' ;
        }
      str[pos] = '\0';
     9e4:	e28de088 	add	lr, sp, #136	; 0x88
     9e8:	e08e0000 	add	r0, lr, r0
     9ec:	e3a03000 	mov	r3, #0
     9f0:	e5403078 	strb	r3, [r0, #-120]	; 0x78
  puts_UART ("        should be:   %d\n");
  int_to_a(buffer, 5);
  puts_UART( buffer );
  puts_UART ("Bool_Glob:           %d\n");
  int_to_a(buffer, Bool_Glob);
  puts_UART( buffer );
     9f4:	e28d0010 	add	r0, sp, #16
    {
      int i;
      int pos = 0;
      int digit;
      int digitfound = 0;
      const int units[] =
     9f8:	e51f7214 	ldr	r7, [pc, #-532]	; 7ec <PLLSTAT_PLOCK+0x3ec>
  puts_UART ("        should be:   %d\n");
  int_to_a(buffer, 5);
  puts_UART( buffer );
  puts_UART ("Bool_Glob:           %d\n");
  int_to_a(buffer, Bool_Glob);
  puts_UART( buffer );
     9fc:	e58dc000 	str	ip, [sp]
     a00:	eb0006f3 	bl	25d4 <puts_UART>
  puts_UART ("        should be:   %d\n");
     a04:	e51f0228 	ldr	r0, [pc, #-552]	; 7e4 <PLLSTAT_PLOCK+0x3e4>
     a08:	eb0006f1 	bl	25d4 <puts_UART>
    {
      int i;
      int pos = 0;
      int digit;
      int digitfound = 0;
      const int units[] =
     a0c:	e8b7000f 	ldm	r7!, {r0, r1, r2, r3}
     a10:	e28de060 	add	lr, sp, #96	; 0x60
     a14:	e8ae000f 	stmia	lr!, {r0, r1, r2, r3}
     a18:	e8b7000f 	ldm	r7!, {r0, r1, r2, r3}
     a1c:	e8ae000f 	stmia	lr!, {r0, r1, r2, r3}
     a20:	e8970003 	ldm	r7, {r0, r1}
    return 1;

  if (number > 0)
    {
      int i;
      int pos = 0;
     a24:	e59dc000 	ldr	ip, [sp]
      int digit;
      int digitfound = 0;
      const int units[] =
     a28:	e88e0003 	stm	lr, {r0, r1}
  if (number > 0)
    {
      int i;
      int pos = 0;
      int digit;
      int digitfound = 0;
     a2c:	e3a01000 	mov	r1, #0
  dhrystone();
}



int dhrystone (void)
     a30:	e28d005c 	add	r0, sp, #92	; 0x5c
     a34:	e3a03001 	mov	r3, #1
    return 1;

  if (number > 0)
    {
      int i;
      int pos = 0;
     a38:	e1a0e001 	mov	lr, r1



      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
     a3c:	e5b02004 	ldr	r2, [r0, #4]!
          digit = 0;

          while (number >= unit)
     a40:	e1520003 	cmp	r2, r3
     a44:	ca0004af 	bgt	1d08 <STACK_SIZE+0x1508>
     a48:	e3a01000 	mov	r1, #0
            {
              digit++;
              number -= unit;
     a4c:	e0623003 	rsb	r3, r2, r3
      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
          digit = 0;

          while (number >= unit)
     a50:	e1520003 	cmp	r2, r3
            {
              digit++;
     a54:	e2811001 	add	r1, r1, #1
      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
          digit = 0;

          while (number >= unit)
     a58:	dafffffb 	ble	a4c <STACK_SIZE+0x24c>
              digit++;
              number -= unit;
            }

          if (digit != 0) digitfound = 1;
          if (digitfound) str[pos++] = digit + '0' ;
     a5c:	e28d7088 	add	r7, sp, #136	; 0x88
     a60:	e087200e 	add	r2, r7, lr
     a64:	e2811030 	add	r1, r1, #48	; 0x30
     a68:	e5421078 	strb	r1, [r2, #-120]	; 0x78
     a6c:	e28ee001 	add	lr, lr, #1
     a70:	e3a01001 	mov	r1, #1
              1};
      int unit;



      for (i = 0; i < 10; ++i)
     a74:	e59d7004 	ldr	r7, [sp, #4]
     a78:	e1500007 	cmp	r0, r7
     a7c:	1affffee 	bne	a3c <STACK_SIZE+0x23c>
            }

          if (digit != 0) digitfound = 1;
          if (digitfound) str[pos++] = digit + '0' ;
        }
      str[pos] = '\0';
     a80:	e28d1088 	add	r1, sp, #136	; 0x88
     a84:	e081e00e 	add	lr, r1, lr
     a88:	e3a0a000 	mov	sl, #0
     a8c:	e54ea078 	strb	sl, [lr, #-120]	; 0x78
  puts_UART ("Bool_Glob:           %d\n");
  int_to_a(buffer, Bool_Glob);
  puts_UART( buffer );
  puts_UART ("        should be:   %d\n");
  int_to_a(buffer, 1);
  puts_UART( buffer );
     a90:	e28d0010 	add	r0, sp, #16
     a94:	e58dc000 	str	ip, [sp]
     a98:	eb0006cd 	bl	25d4 <puts_UART>
  puts_UART ("Ch_1_Glob:           %c\n");
     a9c:	e51f031c 	ldr	r0, [pc, #-796]	; 788 <PLLSTAT_PLOCK+0x388>
     aa0:	eb0006cb 	bl	25d4 <puts_UART>
  int_to_a(buffer, Ch_1_Glob);
     aa4:	e51f2320 	ldr	r2, [pc, #-800]	; 78c <PLLSTAT_PLOCK+0x38c>
     aa8:	e5d2e000 	ldrb	lr, [r2]
int int_to_a(char * str, int number)
{
  if(str == NULL)
    return 1;

  if (number > 0)
     aac:	e15e000a 	cmp	lr, sl
     ab0:	e59dc000 	ldr	ip, [sp]
     ab4:	0a00051d 	beq	1f30 <STACK_SIZE+0x1730>
    {
      int i;
      int pos = 0;
      int digit;
      int digitfound = 0;
      const int units[] =
     ab8:	e51f82d4 	ldr	r8, [pc, #-724]	; 7ec <PLLSTAT_PLOCK+0x3ec>
     abc:	e8b8000f 	ldm	r8!, {r0, r1, r2, r3}
     ac0:	e28d7060 	add	r7, sp, #96	; 0x60
     ac4:	e8a7000f 	stmia	r7!, {r0, r1, r2, r3}
     ac8:	e8b8000f 	ldm	r8!, {r0, r1, r2, r3}
     acc:	e8a7000f 	stmia	r7!, {r0, r1, r2, r3}
     ad0:	e8980003 	ldm	r8, {r0, r1}
     ad4:	e8870003 	stm	r7, {r0, r1}
  dhrystone();
}



int dhrystone (void)
     ad8:	e28d105c 	add	r1, sp, #92	; 0x5c
    return 1;

  if (number > 0)
    {
      int i;
      int pos = 0;
     adc:	e1a0000a 	mov	r0, sl



      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
     ae0:	e5b13004 	ldr	r3, [r1, #4]!
          digit = 0;

          while (number >= unit)
     ae4:	e153000e 	cmp	r3, lr
     ae8:	ca0004ba 	bgt	1dd8 <STACK_SIZE+0x15d8>
     aec:	e3a02000 	mov	r2, #0
            {
              digit++;
              number -= unit;
     af0:	e063e00e 	rsb	lr, r3, lr
      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
          digit = 0;

          while (number >= unit)
     af4:	e153000e 	cmp	r3, lr
            {
              digit++;
     af8:	e2822001 	add	r2, r2, #1
      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
          digit = 0;

          while (number >= unit)
     afc:	dafffffb 	ble	af0 <STACK_SIZE+0x2f0>
              digit++;
              number -= unit;
            }

          if (digit != 0) digitfound = 1;
          if (digitfound) str[pos++] = digit + '0' ;
     b00:	e28d7088 	add	r7, sp, #136	; 0x88
     b04:	e0873000 	add	r3, r7, r0
     b08:	e2822030 	add	r2, r2, #48	; 0x30
     b0c:	e5432078 	strb	r2, [r3, #-120]	; 0x78
     b10:	e2800001 	add	r0, r0, #1
     b14:	e3a0a001 	mov	sl, #1
              1};
      int unit;



      for (i = 0; i < 10; ++i)
     b18:	e59d7004 	ldr	r7, [sp, #4]
     b1c:	e1510007 	cmp	r1, r7
     b20:	1affffee 	bne	ae0 <STACK_SIZE+0x2e0>
            }

          if (digit != 0) digitfound = 1;
          if (digitfound) str[pos++] = digit + '0' ;
        }
      str[pos] = '\0';
     b24:	e28de088 	add	lr, sp, #136	; 0x88
     b28:	e08e0000 	add	r0, lr, r0
     b2c:	e3a03000 	mov	r3, #0
     b30:	e5403078 	strb	r3, [r0, #-120]	; 0x78
  puts_UART ("        should be:   %d\n");
  int_to_a(buffer, 1);
  puts_UART( buffer );
  puts_UART ("Ch_1_Glob:           %c\n");
  int_to_a(buffer, Ch_1_Glob);
  puts_UART( buffer );
     b34:	e28d0010 	add	r0, sp, #16
     b38:	e58dc000 	str	ip, [sp]
     b3c:	eb0006a4 	bl	25d4 <puts_UART>
  puts_UART ("        should be:   %c\n");
     b40:	e51f03ac 	ldr	r0, [pc, #-940]	; 79c <PLLSTAT_PLOCK+0x39c>
     b44:	eb0006a2 	bl	25d4 <puts_UART>
  puts_UART( "A" );
     b48:	e51f03c0 	ldr	r0, [pc, #-960]	; 790 <PLLSTAT_PLOCK+0x390>
     b4c:	eb0006a0 	bl	25d4 <puts_UART>
  puts_UART ("Ch_2_Glob:           %c\n" );
     b50:	e51f03c4 	ldr	r0, [pc, #-964]	; 794 <PLLSTAT_PLOCK+0x394>
     b54:	eb00069e 	bl	25d4 <puts_UART>
  int_to_a(buffer, Ch_2_Glob);
     b58:	e51f13c8 	ldr	r1, [pc, #-968]	; 798 <PLLSTAT_PLOCK+0x398>
     b5c:	e5d1e000 	ldrb	lr, [r1]
int int_to_a(char * str, int number)
{
  if(str == NULL)
    return 1;

  if (number > 0)
     b60:	e35e0000 	cmp	lr, #0
     b64:	e59dc000 	ldr	ip, [sp]
     b68:	0a0004f8 	beq	1f50 <STACK_SIZE+0x1750>
    {
      int i;
      int pos = 0;
      int digit;
      int digitfound = 0;
      const int units[] =
     b6c:	e51f8388 	ldr	r8, [pc, #-904]	; 7ec <PLLSTAT_PLOCK+0x3ec>
     b70:	e8b8000f 	ldm	r8!, {r0, r1, r2, r3}
     b74:	e28d7060 	add	r7, sp, #96	; 0x60
     b78:	e8a7000f 	stmia	r7!, {r0, r1, r2, r3}
     b7c:	e8b8000f 	ldm	r8!, {r0, r1, r2, r3}
     b80:	e8a7000f 	stmia	r7!, {r0, r1, r2, r3}
     b84:	e8980003 	ldm	r8, {r0, r1}
  if (number > 0)
    {
      int i;
      int pos = 0;
      int digit;
      int digitfound = 0;
     b88:	e3a02000 	mov	r2, #0
      const int units[] =
     b8c:	e8870003 	stm	r7, {r0, r1}
  dhrystone();
}



int dhrystone (void)
     b90:	e28d105c 	add	r1, sp, #92	; 0x5c
    return 1;

  if (number > 0)
    {
      int i;
      int pos = 0;
     b94:	e1a00002 	mov	r0, r2



      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
     b98:	e5b13004 	ldr	r3, [r1, #4]!
          digit = 0;

          while (number >= unit)
     b9c:	e153000e 	cmp	r3, lr
     ba0:	ca000488 	bgt	1dc8 <STACK_SIZE+0x15c8>
     ba4:	e3a02000 	mov	r2, #0
            {
              digit++;
              number -= unit;
     ba8:	e063e00e 	rsb	lr, r3, lr
      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
          digit = 0;

          while (number >= unit)
     bac:	e153000e 	cmp	r3, lr
            {
              digit++;
     bb0:	e2822001 	add	r2, r2, #1
      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
          digit = 0;

          while (number >= unit)
     bb4:	dafffffb 	ble	ba8 <STACK_SIZE+0x3a8>
              digit++;
              number -= unit;
            }

          if (digit != 0) digitfound = 1;
          if (digitfound) str[pos++] = digit + '0' ;
     bb8:	e28d7088 	add	r7, sp, #136	; 0x88
     bbc:	e0873000 	add	r3, r7, r0
     bc0:	e2822030 	add	r2, r2, #48	; 0x30
     bc4:	e5432078 	strb	r2, [r3, #-120]	; 0x78
     bc8:	e2800001 	add	r0, r0, #1
     bcc:	e3a02001 	mov	r2, #1
              1};
      int unit;



      for (i = 0; i < 10; ++i)
     bd0:	e59d7004 	ldr	r7, [sp, #4]
     bd4:	e1510007 	cmp	r1, r7
     bd8:	1affffee 	bne	b98 <STACK_SIZE+0x398>
            }

          if (digit != 0) digitfound = 1;
          if (digitfound) str[pos++] = digit + '0' ;
        }
      str[pos] = '\0';
     bdc:	e28de088 	add	lr, sp, #136	; 0x88
     be0:	e08e0000 	add	r0, lr, r0
     be4:	e3a03000 	mov	r3, #0
     be8:	e5403078 	strb	r3, [r0, #-120]	; 0x78
  puts_UART( buffer );
  puts_UART ("        should be:   %c\n");
  puts_UART( "A" );
  puts_UART ("Ch_2_Glob:           %c\n" );
  int_to_a(buffer, Ch_2_Glob);
  puts_UART( buffer );
     bec:	e28d0010 	add	r0, sp, #16
     bf0:	e58dc000 	str	ip, [sp]
     bf4:	eb000676 	bl	25d4 <puts_UART>
  puts_UART ("        should be:   %c\n" );
     bf8:	e51f0464 	ldr	r0, [pc, #-1124]	; 79c <PLLSTAT_PLOCK+0x39c>
     bfc:	eb000674 	bl	25d4 <puts_UART>
  puts_UART( "B" );
     c00:	e51f0468 	ldr	r0, [pc, #-1128]	; 7a0 <PLLSTAT_PLOCK+0x3a0>
     c04:	eb000672 	bl	25d4 <puts_UART>
  puts_UART ("Arr_1_Glob[8]:       %d\n");
     c08:	e51f046c 	ldr	r0, [pc, #-1132]	; 7a4 <PLLSTAT_PLOCK+0x3a4>
     c0c:	eb000670 	bl	25d4 <puts_UART>
  int_to_a(buffer, Arr_1_Glob[8]);
     c10:	e595e020 	ldr	lr, [r5, #32]
int int_to_a(char * str, int number)
{
  if(str == NULL)
    return 1;

  if (number > 0)
     c14:	e35e0000 	cmp	lr, #0
     c18:	e59dc000 	ldr	ip, [sp]
     c1c:	da0004b4 	ble	1ef4 <STACK_SIZE+0x16f4>
    {
      int i;
      int pos = 0;
      int digit;
      int digitfound = 0;
      const int units[] =
     c20:	e51f743c 	ldr	r7, [pc, #-1084]	; 7ec <PLLSTAT_PLOCK+0x3ec>
     c24:	e8b7000f 	ldm	r7!, {r0, r1, r2, r3}
     c28:	e28d5060 	add	r5, sp, #96	; 0x60
     c2c:	e8a5000f 	stmia	r5!, {r0, r1, r2, r3}
     c30:	e8b7000f 	ldm	r7!, {r0, r1, r2, r3}
     c34:	e8a5000f 	stmia	r5!, {r0, r1, r2, r3}
     c38:	e8970003 	ldm	r7, {r0, r1}
     c3c:	e8850003 	stm	r5, {r0, r1}
  if (number > 0)
    {
      int i;
      int pos = 0;
      int digit;
      int digitfound = 0;
     c40:	e3a05000 	mov	r5, #0
  dhrystone();
}



int dhrystone (void)
     c44:	e28d105c 	add	r1, sp, #92	; 0x5c
    return 1;

  if (number > 0)
    {
      int i;
      int pos = 0;
     c48:	e1a00005 	mov	r0, r5



      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
     c4c:	e5b13004 	ldr	r3, [r1, #4]!
          digit = 0;

          while (number >= unit)
     c50:	e153000e 	cmp	r3, lr
     c54:	ca000457 	bgt	1db8 <STACK_SIZE+0x15b8>
     c58:	e3a02000 	mov	r2, #0
            {
              digit++;
              number -= unit;
     c5c:	e063e00e 	rsb	lr, r3, lr
      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
          digit = 0;

          while (number >= unit)
     c60:	e153000e 	cmp	r3, lr
            {
              digit++;
     c64:	e2822001 	add	r2, r2, #1
      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
          digit = 0;

          while (number >= unit)
     c68:	dafffffb 	ble	c5c <STACK_SIZE+0x45c>
            {
              digit++;
              number -= unit;
            }

          if (digit != 0) digitfound = 1;
     c6c:	e3a05001 	mov	r5, #1
          if (digitfound) str[pos++] = digit + '0' ;
     c70:	e28d7088 	add	r7, sp, #136	; 0x88
     c74:	e0873000 	add	r3, r7, r0
     c78:	e2822030 	add	r2, r2, #48	; 0x30
     c7c:	e5432078 	strb	r2, [r3, #-120]	; 0x78
     c80:	e2800001 	add	r0, r0, #1
              1};
      int unit;



      for (i = 0; i < 10; ++i)
     c84:	e59d7004 	ldr	r7, [sp, #4]
     c88:	e1510007 	cmp	r1, r7
     c8c:	1affffee 	bne	c4c <STACK_SIZE+0x44c>
            }

          if (digit != 0) digitfound = 1;
          if (digitfound) str[pos++] = digit + '0' ;
        }
      str[pos] = '\0';
     c90:	e28de088 	add	lr, sp, #136	; 0x88
     c94:	e08e0000 	add	r0, lr, r0
     c98:	e3a03000 	mov	r3, #0
     c9c:	e5403078 	strb	r3, [r0, #-120]	; 0x78
  puts_UART( buffer );
  puts_UART ("        should be:   %c\n" );
  puts_UART( "B" );
  puts_UART ("Arr_1_Glob[8]:       %d\n");
  int_to_a(buffer, Arr_1_Glob[8]);
  puts_UART( buffer );
     ca0:	e28d0010 	add	r0, sp, #16
    {
      int i;
      int pos = 0;
      int digit;
      int digitfound = 0;
      const int units[] =
     ca4:	e51f54c0 	ldr	r5, [pc, #-1216]	; 7ec <PLLSTAT_PLOCK+0x3ec>
  puts_UART( buffer );
  puts_UART ("        should be:   %c\n" );
  puts_UART( "B" );
  puts_UART ("Arr_1_Glob[8]:       %d\n");
  int_to_a(buffer, Arr_1_Glob[8]);
  puts_UART( buffer );
     ca8:	e58dc000 	str	ip, [sp]
     cac:	eb000648 	bl	25d4 <puts_UART>
  puts_UART ("        should be:   %d\n");
     cb0:	e51f04d4 	ldr	r0, [pc, #-1236]	; 7e4 <PLLSTAT_PLOCK+0x3e4>
     cb4:	eb000646 	bl	25d4 <puts_UART>
    {
      int i;
      int pos = 0;
      int digit;
      int digitfound = 0;
      const int units[] =
     cb8:	e8b5000f 	ldm	r5!, {r0, r1, r2, r3}
     cbc:	e28de060 	add	lr, sp, #96	; 0x60
     cc0:	e8ae000f 	stmia	lr!, {r0, r1, r2, r3}
     cc4:	e8b5000f 	ldm	r5!, {r0, r1, r2, r3}
     cc8:	e8ae000f 	stmia	lr!, {r0, r1, r2, r3}
     ccc:	e8950003 	ldm	r5, {r0, r1}
    return 1;

  if (number > 0)
    {
      int i;
      int pos = 0;
     cd0:	e59dc000 	ldr	ip, [sp]
      int digit;
      int digitfound = 0;
      const int units[] =
     cd4:	e88e0003 	stm	lr, {r0, r1}
  if (number > 0)
    {
      int i;
      int pos = 0;
      int digit;
      int digitfound = 0;
     cd8:	e3a01000 	mov	r1, #0
  dhrystone();
}



int dhrystone (void)
     cdc:	e28d005c 	add	r0, sp, #92	; 0x5c
     ce0:	e3a03007 	mov	r3, #7
    return 1;

  if (number > 0)
    {
      int i;
      int pos = 0;
     ce4:	e1a0e001 	mov	lr, r1



      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
     ce8:	e5b02004 	ldr	r2, [r0, #4]!
          digit = 0;

          while (number >= unit)
     cec:	e1530002 	cmp	r3, r2
     cf0:	ba000400 	blt	1cf8 <STACK_SIZE+0x14f8>
     cf4:	e3a01000 	mov	r1, #0
            {
              digit++;
              number -= unit;
     cf8:	e0623003 	rsb	r3, r2, r3
      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
          digit = 0;

          while (number >= unit)
     cfc:	e1520003 	cmp	r2, r3
            {
              digit++;
     d00:	e2811001 	add	r1, r1, #1
      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
          digit = 0;

          while (number >= unit)
     d04:	dafffffb 	ble	cf8 <STACK_SIZE+0x4f8>
              digit++;
              number -= unit;
            }

          if (digit != 0) digitfound = 1;
          if (digitfound) str[pos++] = digit + '0' ;
     d08:	e28d5088 	add	r5, sp, #136	; 0x88
     d0c:	e085200e 	add	r2, r5, lr
     d10:	e2811030 	add	r1, r1, #48	; 0x30
     d14:	e5421078 	strb	r1, [r2, #-120]	; 0x78
     d18:	e28ee001 	add	lr, lr, #1
     d1c:	e3a01001 	mov	r1, #1
              1};
      int unit;



      for (i = 0; i < 10; ++i)
     d20:	e59d7004 	ldr	r7, [sp, #4]
     d24:	e1500007 	cmp	r0, r7
     d28:	1affffee 	bne	ce8 <STACK_SIZE+0x4e8>
            }

          if (digit != 0) digitfound = 1;
          if (digitfound) str[pos++] = digit + '0' ;
        }
      str[pos] = '\0';
     d2c:	e28d1088 	add	r1, sp, #136	; 0x88
     d30:	e081e00e 	add	lr, r1, lr
     d34:	e3a05000 	mov	r5, #0
     d38:	e54e5078 	strb	r5, [lr, #-120]	; 0x78
  puts_UART ("Arr_1_Glob[8]:       %d\n");
  int_to_a(buffer, Arr_1_Glob[8]);
  puts_UART( buffer );
  puts_UART ("        should be:   %d\n");
  int_to_a(buffer, 7);
  puts_UART( buffer );
     d3c:	e28d0010 	add	r0, sp, #16
     d40:	e58dc000 	str	ip, [sp]
     d44:	eb000622 	bl	25d4 <puts_UART>
  puts_UART ("Arr_2_Glob[8][7]:    %d\n");
     d48:	e51f05a8 	ldr	r0, [pc, #-1448]	; 7a8 <PLLSTAT_PLOCK+0x3a8>
     d4c:	eb000620 	bl	25d4 <puts_UART>
  int_to_a(buffer, Arr_2_Glob[8][7]);
     d50:	e594e65c 	ldr	lr, [r4, #1628]	; 0x65c
int int_to_a(char * str, int number)
{
  if(str == NULL)
    return 1;

  if (number > 0)
     d54:	e15e0005 	cmp	lr, r5
     d58:	e59dc000 	ldr	ip, [sp]
     d5c:	da00045f 	ble	1ee0 <STACK_SIZE+0x16e0>
    {
      int i;
      int pos = 0;
      int digit;
      int digitfound = 0;
      const int units[] =
     d60:	e51f757c 	ldr	r7, [pc, #-1404]	; 7ec <PLLSTAT_PLOCK+0x3ec>
     d64:	e8b7000f 	ldm	r7!, {r0, r1, r2, r3}
     d68:	e28d4060 	add	r4, sp, #96	; 0x60
     d6c:	e8a4000f 	stmia	r4!, {r0, r1, r2, r3}
     d70:	e8b7000f 	ldm	r7!, {r0, r1, r2, r3}
     d74:	e8a4000f 	stmia	r4!, {r0, r1, r2, r3}
     d78:	e8970003 	ldm	r7, {r0, r1}
     d7c:	e8840003 	stm	r4, {r0, r1}
  dhrystone();
}



int dhrystone (void)
     d80:	e28d105c 	add	r1, sp, #92	; 0x5c
    return 1;

  if (number > 0)
    {
      int i;
      int pos = 0;
     d84:	e1a00005 	mov	r0, r5



      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
     d88:	e5b13004 	ldr	r3, [r1, #4]!
          digit = 0;

          while (number >= unit)
     d8c:	e153000e 	cmp	r3, lr
     d90:	ca0003f0 	bgt	1d58 <STACK_SIZE+0x1558>
     d94:	e3a02000 	mov	r2, #0
            {
              digit++;
              number -= unit;
     d98:	e063e00e 	rsb	lr, r3, lr
      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
          digit = 0;

          while (number >= unit)
     d9c:	e153000e 	cmp	r3, lr
            {
              digit++;
     da0:	e2822001 	add	r2, r2, #1
      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
          digit = 0;

          while (number >= unit)
     da4:	dafffffb 	ble	d98 <STACK_SIZE+0x598>
              digit++;
              number -= unit;
            }

          if (digit != 0) digitfound = 1;
          if (digitfound) str[pos++] = digit + '0' ;
     da8:	e28d4088 	add	r4, sp, #136	; 0x88
     dac:	e0843000 	add	r3, r4, r0
     db0:	e2822030 	add	r2, r2, #48	; 0x30
     db4:	e5432078 	strb	r2, [r3, #-120]	; 0x78
     db8:	e2800001 	add	r0, r0, #1
     dbc:	e3a05001 	mov	r5, #1
              1};
      int unit;



      for (i = 0; i < 10; ++i)
     dc0:	e59d7004 	ldr	r7, [sp, #4]
     dc4:	e1510007 	cmp	r1, r7
     dc8:	1affffee 	bne	d88 <STACK_SIZE+0x588>
            }

          if (digit != 0) digitfound = 1;
          if (digitfound) str[pos++] = digit + '0' ;
        }
      str[pos] = '\0';
     dcc:	e28de088 	add	lr, sp, #136	; 0x88
     dd0:	e08e0000 	add	r0, lr, r0
     dd4:	e3a03000 	mov	r3, #0
     dd8:	e5403078 	strb	r3, [r0, #-120]	; 0x78
  puts_UART ("        should be:   %d\n");
  int_to_a(buffer, 7);
  puts_UART( buffer );
  puts_UART ("Arr_2_Glob[8][7]:    %d\n");
  int_to_a(buffer, Arr_2_Glob[8][7]);
  puts_UART( buffer );
     ddc:	e28d0010 	add	r0, sp, #16
     de0:	e58dc000 	str	ip, [sp]
     de4:	eb0005fa 	bl	25d4 <puts_UART>
  puts_UART ("        should be:   loops + 10\n");
     de8:	e51f0644 	ldr	r0, [pc, #-1604]	; 7ac <PLLSTAT_PLOCK+0x3ac>
     dec:	eb0005f8 	bl	25d4 <puts_UART>
  puts_UART ("Ptr_Glob->\n");
     df0:	e51f0648 	ldr	r0, [pc, #-1608]	; 7b0 <PLLSTAT_PLOCK+0x3b0>
     df4:	eb0005f6 	bl	25d4 <puts_UART>
  puts_UART ("  Ptr_Comp:          %d\n");
     df8:	e51f0640 	ldr	r0, [pc, #-1600]	; 7c0 <PLLSTAT_PLOCK+0x3c0>
     dfc:	eb0005f4 	bl	25d4 <puts_UART>
  int_to_a(buffer, (int) Ptr_Glob->Ptr_Comp);
     e00:	e5993000 	ldr	r3, [r9]
     e04:	e593e000 	ldr	lr, [r3]
int int_to_a(char * str, int number)
{
  if(str == NULL)
    return 1;

  if (number > 0)
     e08:	e35e0000 	cmp	lr, #0
     e0c:	e59dc000 	ldr	ip, [sp]
     e10:	da00042d 	ble	1ecc <STACK_SIZE+0x16cc>
    {
      int i;
      int pos = 0;
      int digit;
      int digitfound = 0;
      const int units[] =
     e14:	e51f5630 	ldr	r5, [pc, #-1584]	; 7ec <PLLSTAT_PLOCK+0x3ec>
     e18:	e8b5000f 	ldm	r5!, {r0, r1, r2, r3}
     e1c:	e28d4060 	add	r4, sp, #96	; 0x60
     e20:	e8a4000f 	stmia	r4!, {r0, r1, r2, r3}
     e24:	e8b5000f 	ldm	r5!, {r0, r1, r2, r3}
     e28:	e8a4000f 	stmia	r4!, {r0, r1, r2, r3}
     e2c:	e8950003 	ldm	r5, {r0, r1}
  if (number > 0)
    {
      int i;
      int pos = 0;
      int digit;
      int digitfound = 0;
     e30:	e3a02000 	mov	r2, #0
      const int units[] =
     e34:	e8840003 	stm	r4, {r0, r1}
  dhrystone();
}



int dhrystone (void)
     e38:	e28d105c 	add	r1, sp, #92	; 0x5c
    return 1;

  if (number > 0)
    {
      int i;
      int pos = 0;
     e3c:	e1a00002 	mov	r0, r2



      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
     e40:	e5b13004 	ldr	r3, [r1, #4]!
          digit = 0;

          while (number >= unit)
     e44:	e153000e 	cmp	r3, lr
     e48:	ca0003be 	bgt	1d48 <STACK_SIZE+0x1548>
     e4c:	e3a02000 	mov	r2, #0
            {
              digit++;
              number -= unit;
     e50:	e063e00e 	rsb	lr, r3, lr
      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
          digit = 0;

          while (number >= unit)
     e54:	e153000e 	cmp	r3, lr
            {
              digit++;
     e58:	e2822001 	add	r2, r2, #1
      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
          digit = 0;

          while (number >= unit)
     e5c:	dafffffb 	ble	e50 <STACK_SIZE+0x650>
              digit++;
              number -= unit;
            }

          if (digit != 0) digitfound = 1;
          if (digitfound) str[pos++] = digit + '0' ;
     e60:	e28d4088 	add	r4, sp, #136	; 0x88
     e64:	e0843000 	add	r3, r4, r0
     e68:	e2822030 	add	r2, r2, #48	; 0x30
     e6c:	e5432078 	strb	r2, [r3, #-120]	; 0x78
     e70:	e2800001 	add	r0, r0, #1
     e74:	e3a02001 	mov	r2, #1
              1};
      int unit;



      for (i = 0; i < 10; ++i)
     e78:	e59d5004 	ldr	r5, [sp, #4]
     e7c:	e1510005 	cmp	r1, r5
     e80:	1affffee 	bne	e40 <STACK_SIZE+0x640>
            }

          if (digit != 0) digitfound = 1;
          if (digitfound) str[pos++] = digit + '0' ;
        }
      str[pos] = '\0';
     e84:	e28d7088 	add	r7, sp, #136	; 0x88
     e88:	e0870000 	add	r0, r7, r0
     e8c:	e3a03000 	mov	r3, #0
     e90:	e5403078 	strb	r3, [r0, #-120]	; 0x78
  puts_UART( buffer );
  puts_UART ("        should be:   loops + 10\n");
  puts_UART ("Ptr_Glob->\n");
  puts_UART ("  Ptr_Comp:          %d\n");
  int_to_a(buffer, (int) Ptr_Glob->Ptr_Comp);
  puts_UART( buffer );
     e94:	e28d0010 	add	r0, sp, #16
     e98:	e58dc000 	str	ip, [sp]
     e9c:	eb0005cc 	bl	25d4 <puts_UART>
  puts_UART ("        should be:   (implementation-dependent)\n");
     ea0:	e51f06f4 	ldr	r0, [pc, #-1780]	; 7b4 <PLLSTAT_PLOCK+0x3b4>
     ea4:	eb0005ca 	bl	25d4 <puts_UART>
  puts_UART ("  Discr:             %d\n");
     ea8:	e51f06e8 	ldr	r0, [pc, #-1768]	; 7c8 <PLLSTAT_PLOCK+0x3c8>
     eac:	eb0005c8 	bl	25d4 <puts_UART>
  int_to_a(buffer, Ptr_Glob->Discr);
     eb0:	e5993000 	ldr	r3, [r9]
     eb4:	e5d3e004 	ldrb	lr, [r3, #4]
int int_to_a(char * str, int number)
{
  if(str == NULL)
    return 1;

  if (number > 0)
     eb8:	e35e0000 	cmp	lr, #0
     ebc:	e59dc000 	ldr	ip, [sp]
     ec0:	0a000431 	beq	1f8c <STACK_SIZE+0x178c>
    {
      int i;
      int pos = 0;
      int digit;
      int digitfound = 0;
      const int units[] =
     ec4:	e51f56e0 	ldr	r5, [pc, #-1760]	; 7ec <PLLSTAT_PLOCK+0x3ec>
     ec8:	e8b5000f 	ldm	r5!, {r0, r1, r2, r3}
     ecc:	e28d4060 	add	r4, sp, #96	; 0x60
     ed0:	e8a4000f 	stmia	r4!, {r0, r1, r2, r3}
     ed4:	e8b5000f 	ldm	r5!, {r0, r1, r2, r3}
     ed8:	e8a4000f 	stmia	r4!, {r0, r1, r2, r3}
     edc:	e8950003 	ldm	r5, {r0, r1}
  if (number > 0)
    {
      int i;
      int pos = 0;
      int digit;
      int digitfound = 0;
     ee0:	e3a02000 	mov	r2, #0
      const int units[] =
     ee4:	e8840003 	stm	r4, {r0, r1}
  dhrystone();
}



int dhrystone (void)
     ee8:	e28d105c 	add	r1, sp, #92	; 0x5c
    return 1;

  if (number > 0)
    {
      int i;
      int pos = 0;
     eec:	e1a00002 	mov	r0, r2



      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
     ef0:	e5b13004 	ldr	r3, [r1, #4]!
          digit = 0;

          while (number >= unit)
     ef4:	e153000e 	cmp	r3, lr
     ef8:	ca00038e 	bgt	1d38 <STACK_SIZE+0x1538>
     efc:	e3a02000 	mov	r2, #0
            {
              digit++;
              number -= unit;
     f00:	e063e00e 	rsb	lr, r3, lr
      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
          digit = 0;

          while (number >= unit)
     f04:	e153000e 	cmp	r3, lr
            {
              digit++;
     f08:	e2822001 	add	r2, r2, #1
      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
          digit = 0;

          while (number >= unit)
     f0c:	dafffffb 	ble	f00 <STACK_SIZE+0x700>
              digit++;
              number -= unit;
            }

          if (digit != 0) digitfound = 1;
          if (digitfound) str[pos++] = digit + '0' ;
     f10:	e28d4088 	add	r4, sp, #136	; 0x88
     f14:	e0843000 	add	r3, r4, r0
     f18:	e2822030 	add	r2, r2, #48	; 0x30
     f1c:	e5432078 	strb	r2, [r3, #-120]	; 0x78
     f20:	e2800001 	add	r0, r0, #1
     f24:	e3a02001 	mov	r2, #1
              1};
      int unit;



      for (i = 0; i < 10; ++i)
     f28:	e59d5004 	ldr	r5, [sp, #4]
     f2c:	e1510005 	cmp	r1, r5
     f30:	1affffee 	bne	ef0 <STACK_SIZE+0x6f0>
            }

          if (digit != 0) digitfound = 1;
          if (digitfound) str[pos++] = digit + '0' ;
        }
      str[pos] = '\0';
     f34:	e28d7088 	add	r7, sp, #136	; 0x88
     f38:	e0870000 	add	r0, r7, r0
     f3c:	e3a03000 	mov	r3, #0
     f40:	e5403078 	strb	r3, [r0, #-120]	; 0x78
  int_to_a(buffer, (int) Ptr_Glob->Ptr_Comp);
  puts_UART( buffer );
  puts_UART ("        should be:   (implementation-dependent)\n");
  puts_UART ("  Discr:             %d\n");
  int_to_a(buffer, Ptr_Glob->Discr);
  puts_UART( buffer );
     f44:	e28d0010 	add	r0, sp, #16
     f48:	e58dc000 	str	ip, [sp]
     f4c:	eb0005a0 	bl	25d4 <puts_UART>
  puts_UART ("        should be:   %d\n");
     f50:	e51f0774 	ldr	r0, [pc, #-1908]	; 7e4 <PLLSTAT_PLOCK+0x3e4>
     f54:	eb00059e 	bl	25d4 <puts_UART>
  puts_UART( "0" );
     f58:	e51f07a8 	ldr	r0, [pc, #-1960]	; 7b8 <PLLSTAT_PLOCK+0x3b8>
     f5c:	eb00059c 	bl	25d4 <puts_UART>
  puts_UART ("  Enum_Comp:         %d\n");
     f60:	e51f079c 	ldr	r0, [pc, #-1948]	; 7cc <PLLSTAT_PLOCK+0x3cc>
     f64:	eb00059a 	bl	25d4 <puts_UART>
  int_to_a(buffer, Ptr_Glob->variant.var_1.Enum_Comp);
     f68:	e5993000 	ldr	r3, [r9]
     f6c:	e5d3e008 	ldrb	lr, [r3, #8]
int int_to_a(char * str, int number)
{
  if(str == NULL)
    return 1;

  if (number > 0)
     f70:	e35e0000 	cmp	lr, #0
     f74:	e59dc000 	ldr	ip, [sp]
     f78:	0a0003ff 	beq	1f7c <STACK_SIZE+0x177c>
    {
      int i;
      int pos = 0;
      int digit;
      int digitfound = 0;
      const int units[] =
     f7c:	e51f5798 	ldr	r5, [pc, #-1944]	; 7ec <PLLSTAT_PLOCK+0x3ec>
     f80:	e8b5000f 	ldm	r5!, {r0, r1, r2, r3}
     f84:	e28d4060 	add	r4, sp, #96	; 0x60
     f88:	e8a4000f 	stmia	r4!, {r0, r1, r2, r3}
     f8c:	e8b5000f 	ldm	r5!, {r0, r1, r2, r3}
     f90:	e8a4000f 	stmia	r4!, {r0, r1, r2, r3}
     f94:	e8950003 	ldm	r5, {r0, r1}
  if (number > 0)
    {
      int i;
      int pos = 0;
      int digit;
      int digitfound = 0;
     f98:	e3a02000 	mov	r2, #0
      const int units[] =
     f9c:	e8840003 	stm	r4, {r0, r1}
  dhrystone();
}



int dhrystone (void)
     fa0:	e28d105c 	add	r1, sp, #92	; 0x5c
    return 1;

  if (number > 0)
    {
      int i;
      int pos = 0;
     fa4:	e1a00002 	mov	r0, r2



      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
     fa8:	e5b13004 	ldr	r3, [r1, #4]!
          digit = 0;

          while (number >= unit)
     fac:	e15e0003 	cmp	lr, r3
     fb0:	ba00035c 	blt	1d28 <STACK_SIZE+0x1528>
     fb4:	e3a02000 	mov	r2, #0
            {
              digit++;
              number -= unit;
     fb8:	e063e00e 	rsb	lr, r3, lr
      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
          digit = 0;

          while (number >= unit)
     fbc:	e153000e 	cmp	r3, lr
            {
              digit++;
     fc0:	e2822001 	add	r2, r2, #1
      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
          digit = 0;

          while (number >= unit)
     fc4:	dafffffb 	ble	fb8 <STACK_SIZE+0x7b8>
              digit++;
              number -= unit;
            }

          if (digit != 0) digitfound = 1;
          if (digitfound) str[pos++] = digit + '0' ;
     fc8:	e28d4088 	add	r4, sp, #136	; 0x88
     fcc:	e0843000 	add	r3, r4, r0
     fd0:	e2822030 	add	r2, r2, #48	; 0x30
     fd4:	e5432078 	strb	r2, [r3, #-120]	; 0x78
     fd8:	e2800001 	add	r0, r0, #1
     fdc:	e3a02001 	mov	r2, #1
              1};
      int unit;



      for (i = 0; i < 10; ++i)
     fe0:	e59d5004 	ldr	r5, [sp, #4]
     fe4:	e1510005 	cmp	r1, r5
     fe8:	1affffee 	bne	fa8 <STACK_SIZE+0x7a8>
            }

          if (digit != 0) digitfound = 1;
          if (digitfound) str[pos++] = digit + '0' ;
        }
      str[pos] = '\0';
     fec:	e28d7088 	add	r7, sp, #136	; 0x88
     ff0:	e0870000 	add	r0, r7, r0
     ff4:	e3a03000 	mov	r3, #0
     ff8:	e5403078 	strb	r3, [r0, #-120]	; 0x78
  puts_UART( buffer );
  puts_UART ("        should be:   %d\n");
  puts_UART( "0" );
  puts_UART ("  Enum_Comp:         %d\n");
  int_to_a(buffer, Ptr_Glob->variant.var_1.Enum_Comp);
  puts_UART( buffer );
     ffc:	e28d0010 	add	r0, sp, #16
    {
      int i;
      int pos = 0;
      int digit;
      int digitfound = 0;
      const int units[] =
    1000:	e51f481c 	ldr	r4, [pc, #-2076]	; 7ec <PLLSTAT_PLOCK+0x3ec>
  puts_UART( buffer );
  puts_UART ("        should be:   %d\n");
  puts_UART( "0" );
  puts_UART ("  Enum_Comp:         %d\n");
  int_to_a(buffer, Ptr_Glob->variant.var_1.Enum_Comp);
  puts_UART( buffer );
    1004:	e58dc000 	str	ip, [sp]
    1008:	eb000571 	bl	25d4 <puts_UART>
  puts_UART ("        should be:   %d\n");
    100c:	e51f0830 	ldr	r0, [pc, #-2096]	; 7e4 <PLLSTAT_PLOCK+0x3e4>
    1010:	eb00056f 	bl	25d4 <puts_UART>
    {
      int i;
      int pos = 0;
      int digit;
      int digitfound = 0;
      const int units[] =
    1014:	e8b4000f 	ldm	r4!, {r0, r1, r2, r3}
    1018:	e28de060 	add	lr, sp, #96	; 0x60
    101c:	e8ae000f 	stmia	lr!, {r0, r1, r2, r3}
    1020:	e8b4000f 	ldm	r4!, {r0, r1, r2, r3}
    1024:	e8ae000f 	stmia	lr!, {r0, r1, r2, r3}
    1028:	e8940003 	ldm	r4, {r0, r1}
    return 1;

  if (number > 0)
    {
      int i;
      int pos = 0;
    102c:	e59dc000 	ldr	ip, [sp]
      int digit;
      int digitfound = 0;
      const int units[] =
    1030:	e88e0003 	stm	lr, {r0, r1}
  if (number > 0)
    {
      int i;
      int pos = 0;
      int digit;
      int digitfound = 0;
    1034:	e3a01000 	mov	r1, #0
  dhrystone();
}



int dhrystone (void)
    1038:	e28d005c 	add	r0, sp, #92	; 0x5c
    103c:	e3a03002 	mov	r3, #2
    return 1;

  if (number > 0)
    {
      int i;
      int pos = 0;
    1040:	e1a0e001 	mov	lr, r1



      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
    1044:	e5b02004 	ldr	r2, [r0, #4]!
          digit = 0;

          while (number >= unit)
    1048:	e1520003 	cmp	r2, r3
    104c:	ca000325 	bgt	1ce8 <STACK_SIZE+0x14e8>
    1050:	e3a01000 	mov	r1, #0
            {
              digit++;
              number -= unit;
    1054:	e0623003 	rsb	r3, r2, r3
      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
          digit = 0;

          while (number >= unit)
    1058:	e1520003 	cmp	r2, r3
            {
              digit++;
    105c:	e2811001 	add	r1, r1, #1
      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
          digit = 0;

          while (number >= unit)
    1060:	dafffffb 	ble	1054 <STACK_SIZE+0x854>
              digit++;
              number -= unit;
            }

          if (digit != 0) digitfound = 1;
          if (digitfound) str[pos++] = digit + '0' ;
    1064:	e28d4088 	add	r4, sp, #136	; 0x88
    1068:	e084200e 	add	r2, r4, lr
    106c:	e2811030 	add	r1, r1, #48	; 0x30
    1070:	e5421078 	strb	r1, [r2, #-120]	; 0x78
    1074:	e28ee001 	add	lr, lr, #1
    1078:	e3a01001 	mov	r1, #1
              1};
      int unit;



      for (i = 0; i < 10; ++i)
    107c:	e59d5004 	ldr	r5, [sp, #4]
    1080:	e1500005 	cmp	r0, r5
    1084:	1affffee 	bne	1044 <STACK_SIZE+0x844>
            }

          if (digit != 0) digitfound = 1;
          if (digitfound) str[pos++] = digit + '0' ;
        }
      str[pos] = '\0';
    1088:	e28d7088 	add	r7, sp, #136	; 0x88
    108c:	e087e00e 	add	lr, r7, lr
    1090:	e3a05000 	mov	r5, #0
    1094:	e54e5078 	strb	r5, [lr, #-120]	; 0x78
  puts_UART ("  Enum_Comp:         %d\n");
  int_to_a(buffer, Ptr_Glob->variant.var_1.Enum_Comp);
  puts_UART( buffer );
  puts_UART ("        should be:   %d\n");
  int_to_a(buffer, 2);
  puts_UART( buffer );
    1098:	e28d0010 	add	r0, sp, #16
    109c:	e58dc000 	str	ip, [sp]
    10a0:	eb00054b 	bl	25d4 <puts_UART>
  puts_UART ("  Int_Comp:          %d\n");
    10a4:	e51f08dc 	ldr	r0, [pc, #-2268]	; 7d0 <PLLSTAT_PLOCK+0x3d0>
    10a8:	eb000549 	bl	25d4 <puts_UART>
  int_to_a(buffer,  Ptr_Glob->variant.var_1.Int_Comp);
    10ac:	e5993000 	ldr	r3, [r9]
    10b0:	e593e00c 	ldr	lr, [r3, #12]
int int_to_a(char * str, int number)
{
  if(str == NULL)
    return 1;

  if (number > 0)
    10b4:	e15e0005 	cmp	lr, r5
    10b8:	e59dc000 	ldr	ip, [sp]
    10bc:	da00037d 	ble	1eb8 <STACK_SIZE+0x16b8>
    {
      int i;
      int pos = 0;
      int digit;
      int digitfound = 0;
      const int units[] =
    10c0:	e51f78dc 	ldr	r7, [pc, #-2268]	; 7ec <PLLSTAT_PLOCK+0x3ec>
    10c4:	e8b7000f 	ldm	r7!, {r0, r1, r2, r3}
    10c8:	e28d4060 	add	r4, sp, #96	; 0x60
    10cc:	e8a4000f 	stmia	r4!, {r0, r1, r2, r3}
    10d0:	e8b7000f 	ldm	r7!, {r0, r1, r2, r3}
    10d4:	e8a4000f 	stmia	r4!, {r0, r1, r2, r3}
    10d8:	e8970003 	ldm	r7, {r0, r1}
    10dc:	e8840003 	stm	r4, {r0, r1}
  dhrystone();
}



int dhrystone (void)
    10e0:	e28d105c 	add	r1, sp, #92	; 0x5c
    return 1;

  if (number > 0)
    {
      int i;
      int pos = 0;
    10e4:	e1a00005 	mov	r0, r5



      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
    10e8:	e5b13004 	ldr	r3, [r1, #4]!
          digit = 0;

          while (number >= unit)
    10ec:	e153000e 	cmp	r3, lr
    10f0:	ca00032c 	bgt	1da8 <STACK_SIZE+0x15a8>
    10f4:	e3a02000 	mov	r2, #0
            {
              digit++;
              number -= unit;
    10f8:	e063e00e 	rsb	lr, r3, lr
      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
          digit = 0;

          while (number >= unit)
    10fc:	e153000e 	cmp	r3, lr
            {
              digit++;
    1100:	e2822001 	add	r2, r2, #1
      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
          digit = 0;

          while (number >= unit)
    1104:	dafffffb 	ble	10f8 <STACK_SIZE+0x8f8>
              digit++;
              number -= unit;
            }

          if (digit != 0) digitfound = 1;
          if (digitfound) str[pos++] = digit + '0' ;
    1108:	e28d4088 	add	r4, sp, #136	; 0x88
    110c:	e0843000 	add	r3, r4, r0
    1110:	e2822030 	add	r2, r2, #48	; 0x30
    1114:	e5432078 	strb	r2, [r3, #-120]	; 0x78
    1118:	e2800001 	add	r0, r0, #1
    111c:	e3a05001 	mov	r5, #1
              1};
      int unit;



      for (i = 0; i < 10; ++i)
    1120:	e59d7004 	ldr	r7, [sp, #4]
    1124:	e1510007 	cmp	r1, r7
    1128:	1affffee 	bne	10e8 <STACK_SIZE+0x8e8>
            }

          if (digit != 0) digitfound = 1;
          if (digitfound) str[pos++] = digit + '0' ;
        }
      str[pos] = '\0';
    112c:	e28de088 	add	lr, sp, #136	; 0x88
    1130:	e08e0000 	add	r0, lr, r0
    1134:	e3a03000 	mov	r3, #0
    1138:	e5403078 	strb	r3, [r0, #-120]	; 0x78
  puts_UART ("        should be:   %d\n");
  int_to_a(buffer, 2);
  puts_UART( buffer );
  puts_UART ("  Int_Comp:          %d\n");
  int_to_a(buffer,  Ptr_Glob->variant.var_1.Int_Comp);
  puts_UART( buffer );
    113c:	e28d0010 	add	r0, sp, #16
    {
      int i;
      int pos = 0;
      int digit;
      int digitfound = 0;
      const int units[] =
    1140:	e51f495c 	ldr	r4, [pc, #-2396]	; 7ec <PLLSTAT_PLOCK+0x3ec>
  puts_UART ("        should be:   %d\n");
  int_to_a(buffer, 2);
  puts_UART( buffer );
  puts_UART ("  Int_Comp:          %d\n");
  int_to_a(buffer,  Ptr_Glob->variant.var_1.Int_Comp);
  puts_UART( buffer );
    1144:	e58dc000 	str	ip, [sp]
    1148:	eb000521 	bl	25d4 <puts_UART>
  puts_UART ("        should be:   %d\n");
    114c:	e51f0970 	ldr	r0, [pc, #-2416]	; 7e4 <PLLSTAT_PLOCK+0x3e4>
    1150:	eb00051f 	bl	25d4 <puts_UART>
    {
      int i;
      int pos = 0;
      int digit;
      int digitfound = 0;
      const int units[] =
    1154:	e8b4000f 	ldm	r4!, {r0, r1, r2, r3}
    1158:	e28de060 	add	lr, sp, #96	; 0x60
    115c:	e8ae000f 	stmia	lr!, {r0, r1, r2, r3}
    1160:	e8b4000f 	ldm	r4!, {r0, r1, r2, r3}
    1164:	e8ae000f 	stmia	lr!, {r0, r1, r2, r3}
    1168:	e8940003 	ldm	r4, {r0, r1}
    return 1;

  if (number > 0)
    {
      int i;
      int pos = 0;
    116c:	e59dc000 	ldr	ip, [sp]
      int digit;
      int digitfound = 0;
      const int units[] =
    1170:	e88e0003 	stm	lr, {r0, r1}
  if (number > 0)
    {
      int i;
      int pos = 0;
      int digit;
      int digitfound = 0;
    1174:	e3a01000 	mov	r1, #0
  dhrystone();
}



int dhrystone (void)
    1178:	e28d005c 	add	r0, sp, #92	; 0x5c
    117c:	e3a03011 	mov	r3, #17
    return 1;

  if (number > 0)
    {
      int i;
      int pos = 0;
    1180:	e1a0e001 	mov	lr, r1



      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
    1184:	e5b02004 	ldr	r2, [r0, #4]!
          digit = 0;

          while (number >= unit)
    1188:	e1520003 	cmp	r2, r3
    118c:	ca0002d1 	bgt	1cd8 <STACK_SIZE+0x14d8>
    1190:	e3a01000 	mov	r1, #0
            {
              digit++;
              number -= unit;
    1194:	e0623003 	rsb	r3, r2, r3
      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
          digit = 0;

          while (number >= unit)
    1198:	e1520003 	cmp	r2, r3
            {
              digit++;
    119c:	e2811001 	add	r1, r1, #1
      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
          digit = 0;

          while (number >= unit)
    11a0:	dafffffb 	ble	1194 <STACK_SIZE+0x994>
              digit++;
              number -= unit;
            }

          if (digit != 0) digitfound = 1;
          if (digitfound) str[pos++] = digit + '0' ;
    11a4:	e28d4088 	add	r4, sp, #136	; 0x88
    11a8:	e084200e 	add	r2, r4, lr
    11ac:	e2811030 	add	r1, r1, #48	; 0x30
    11b0:	e5421078 	strb	r1, [r2, #-120]	; 0x78
    11b4:	e28ee001 	add	lr, lr, #1
    11b8:	e3a01001 	mov	r1, #1
              1};
      int unit;



      for (i = 0; i < 10; ++i)
    11bc:	e59d5004 	ldr	r5, [sp, #4]
    11c0:	e1500005 	cmp	r0, r5
    11c4:	1affffee 	bne	1184 <STACK_SIZE+0x984>
            }

          if (digit != 0) digitfound = 1;
          if (digitfound) str[pos++] = digit + '0' ;
        }
      str[pos] = '\0';
    11c8:	e28d7088 	add	r7, sp, #136	; 0x88
    11cc:	e087e00e 	add	lr, r7, lr
    11d0:	e3a04000 	mov	r4, #0
    11d4:	e54e4078 	strb	r4, [lr, #-120]	; 0x78
  puts_UART ("  Int_Comp:          %d\n");
  int_to_a(buffer,  Ptr_Glob->variant.var_1.Int_Comp);
  puts_UART( buffer );
  puts_UART ("        should be:   %d\n");
  int_to_a(buffer, 17);
  puts_UART( buffer );
    11d8:	e28d0010 	add	r0, sp, #16
    11dc:	e58dc000 	str	ip, [sp]
    11e0:	eb0004fb 	bl	25d4 <puts_UART>
  puts_UART ("  Str_Comp:          %s\n");
    11e4:	e51f0a18 	ldr	r0, [pc, #-2584]	; 7d4 <PLLSTAT_PLOCK+0x3d4>
    11e8:	eb0004f9 	bl	25d4 <puts_UART>
  puts_UART( Ptr_Glob->variant.var_1.Str_Comp );
    11ec:	e5990000 	ldr	r0, [r9]
    11f0:	e2800010 	add	r0, r0, #16
    11f4:	eb0004f6 	bl	25d4 <puts_UART>
  puts_UART ("        should be:   DHRYSTONE PROGRAM, SOME STRING\n");
    11f8:	e51f0a24 	ldr	r0, [pc, #-2596]	; 7dc <PLLSTAT_PLOCK+0x3dc>
    11fc:	eb0004f4 	bl	25d4 <puts_UART>
  puts_UART ("Next_Ptr_Glob->\n");
    1200:	e51f0a4c 	ldr	r0, [pc, #-2636]	; 7bc <PLLSTAT_PLOCK+0x3bc>
    1204:	eb0004f2 	bl	25d4 <puts_UART>
  puts_UART ("  Ptr_Comp:          %d\n");
    1208:	e51f0a50 	ldr	r0, [pc, #-2640]	; 7c0 <PLLSTAT_PLOCK+0x3c0>
    120c:	eb0004f0 	bl	25d4 <puts_UART>
  int_to_a(buffer, (int) Next_Ptr_Glob->Ptr_Comp);
    1210:	e51fea40 	ldr	lr, [pc, #-2624]	; 7d8 <PLLSTAT_PLOCK+0x3d8>
    1214:	e59e3000 	ldr	r3, [lr]
    1218:	e593e000 	ldr	lr, [r3]
int int_to_a(char * str, int number)
{
  if(str == NULL)
    return 1;

  if (number > 0)
    121c:	e15e0004 	cmp	lr, r4
    1220:	e59dc000 	ldr	ip, [sp]
    1224:	da00031e 	ble	1ea4 <STACK_SIZE+0x16a4>
    {
      int i;
      int pos = 0;
      int digit;
      int digitfound = 0;
      const int units[] =
    1228:	e51f7a44 	ldr	r7, [pc, #-2628]	; 7ec <PLLSTAT_PLOCK+0x3ec>
    122c:	e8b7000f 	ldm	r7!, {r0, r1, r2, r3}
    1230:	e28d5060 	add	r5, sp, #96	; 0x60
    1234:	e8a5000f 	stmia	r5!, {r0, r1, r2, r3}
    1238:	e8b7000f 	ldm	r7!, {r0, r1, r2, r3}
    123c:	e8a5000f 	stmia	r5!, {r0, r1, r2, r3}
    1240:	e8970003 	ldm	r7, {r0, r1}
    1244:	e8850003 	stm	r5, {r0, r1}
  dhrystone();
}



int dhrystone (void)
    1248:	e28d105c 	add	r1, sp, #92	; 0x5c
    return 1;

  if (number > 0)
    {
      int i;
      int pos = 0;
    124c:	e1a00004 	mov	r0, r4



      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
    1250:	e5b13004 	ldr	r3, [r1, #4]!
          digit = 0;

          while (number >= unit)
    1254:	e153000e 	cmp	r3, lr
    1258:	ca0002ce 	bgt	1d98 <STACK_SIZE+0x1598>
    125c:	e3a02000 	mov	r2, #0
            {
              digit++;
              number -= unit;
    1260:	e063e00e 	rsb	lr, r3, lr
      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
          digit = 0;

          while (number >= unit)
    1264:	e153000e 	cmp	r3, lr
            {
              digit++;
    1268:	e2822001 	add	r2, r2, #1
      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
          digit = 0;

          while (number >= unit)
    126c:	dafffffb 	ble	1260 <STACK_SIZE+0xa60>
              digit++;
              number -= unit;
            }

          if (digit != 0) digitfound = 1;
          if (digitfound) str[pos++] = digit + '0' ;
    1270:	e28d4088 	add	r4, sp, #136	; 0x88
    1274:	e0843000 	add	r3, r4, r0
    1278:	e2822030 	add	r2, r2, #48	; 0x30
    127c:	e5432078 	strb	r2, [r3, #-120]	; 0x78
    1280:	e2800001 	add	r0, r0, #1
    1284:	e3a04001 	mov	r4, #1
              1};
      int unit;



      for (i = 0; i < 10; ++i)
    1288:	e59d5004 	ldr	r5, [sp, #4]
    128c:	e1510005 	cmp	r1, r5
    1290:	1affffee 	bne	1250 <STACK_SIZE+0xa50>
            }

          if (digit != 0) digitfound = 1;
          if (digitfound) str[pos++] = digit + '0' ;
        }
      str[pos] = '\0';
    1294:	e28d7088 	add	r7, sp, #136	; 0x88
    1298:	e0870000 	add	r0, r7, r0
    129c:	e3a03000 	mov	r3, #0
    12a0:	e5403078 	strb	r3, [r0, #-120]	; 0x78
  puts_UART( Ptr_Glob->variant.var_1.Str_Comp );
  puts_UART ("        should be:   DHRYSTONE PROGRAM, SOME STRING\n");
  puts_UART ("Next_Ptr_Glob->\n");
  puts_UART ("  Ptr_Comp:          %d\n");
  int_to_a(buffer, (int) Next_Ptr_Glob->Ptr_Comp);
  puts_UART( buffer );
    12a4:	e28d0010 	add	r0, sp, #16
    12a8:	e58dc000 	str	ip, [sp]
    12ac:	eb0004c8 	bl	25d4 <puts_UART>
  puts_UART ("        should be:   (implementation-dependent), same as above\n");
    12b0:	e51f0af4 	ldr	r0, [pc, #-2804]	; 7c4 <PLLSTAT_PLOCK+0x3c4>
    12b4:	eb0004c6 	bl	25d4 <puts_UART>
  puts_UART ("  Discr:             %d\n");
    12b8:	e51f0af8 	ldr	r0, [pc, #-2808]	; 7c8 <PLLSTAT_PLOCK+0x3c8>
    12bc:	eb0004c4 	bl	25d4 <puts_UART>
  int_to_a(buffer, Next_Ptr_Glob->Discr);
    12c0:	e51feaf0 	ldr	lr, [pc, #-2800]	; 7d8 <PLLSTAT_PLOCK+0x3d8>
    12c4:	e59e3000 	ldr	r3, [lr]
    12c8:	e5d3e004 	ldrb	lr, [r3, #4]
int int_to_a(char * str, int number)
{
  if(str == NULL)
    return 1;

  if (number > 0)
    12cc:	e35e0000 	cmp	lr, #0
    12d0:	e59dc000 	ldr	ip, [sp]
    12d4:	0a000324 	beq	1f6c <STACK_SIZE+0x176c>
    {
      int i;
      int pos = 0;
      int digit;
      int digitfound = 0;
      const int units[] =
    12d8:	e51f5af4 	ldr	r5, [pc, #-2804]	; 7ec <PLLSTAT_PLOCK+0x3ec>
    12dc:	e8b5000f 	ldm	r5!, {r0, r1, r2, r3}
    12e0:	e28d4060 	add	r4, sp, #96	; 0x60
    12e4:	e8a4000f 	stmia	r4!, {r0, r1, r2, r3}
    12e8:	e8b5000f 	ldm	r5!, {r0, r1, r2, r3}
    12ec:	e8a4000f 	stmia	r4!, {r0, r1, r2, r3}
    12f0:	e8950003 	ldm	r5, {r0, r1}
  if (number > 0)
    {
      int i;
      int pos = 0;
      int digit;
      int digitfound = 0;
    12f4:	e3a02000 	mov	r2, #0
      const int units[] =
    12f8:	e8840003 	stm	r4, {r0, r1}
  dhrystone();
}



int dhrystone (void)
    12fc:	e28d105c 	add	r1, sp, #92	; 0x5c
    return 1;

  if (number > 0)
    {
      int i;
      int pos = 0;
    1300:	e1a00002 	mov	r0, r2



      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
    1304:	e5b13004 	ldr	r3, [r1, #4]!
          digit = 0;

          while (number >= unit)
    1308:	e153000e 	cmp	r3, lr
    130c:	ca0002c1 	bgt	1e18 <STACK_SIZE+0x1618>
    1310:	e3a02000 	mov	r2, #0
            {
              digit++;
              number -= unit;
    1314:	e063e00e 	rsb	lr, r3, lr
      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
          digit = 0;

          while (number >= unit)
    1318:	e153000e 	cmp	r3, lr
            {
              digit++;
    131c:	e2822001 	add	r2, r2, #1
      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
          digit = 0;

          while (number >= unit)
    1320:	dafffffb 	ble	1314 <STACK_SIZE+0xb14>
              digit++;
              number -= unit;
            }

          if (digit != 0) digitfound = 1;
          if (digitfound) str[pos++] = digit + '0' ;
    1324:	e28d4088 	add	r4, sp, #136	; 0x88
    1328:	e0843000 	add	r3, r4, r0
    132c:	e2822030 	add	r2, r2, #48	; 0x30
    1330:	e5432078 	strb	r2, [r3, #-120]	; 0x78
    1334:	e2800001 	add	r0, r0, #1
    1338:	e3a02001 	mov	r2, #1
              1};
      int unit;



      for (i = 0; i < 10; ++i)
    133c:	e59d5004 	ldr	r5, [sp, #4]
    1340:	e1510005 	cmp	r1, r5
    1344:	1affffee 	bne	1304 <STACK_SIZE+0xb04>
            }

          if (digit != 0) digitfound = 1;
          if (digitfound) str[pos++] = digit + '0' ;
        }
      str[pos] = '\0';
    1348:	e28d7088 	add	r7, sp, #136	; 0x88
    134c:	e0870000 	add	r0, r7, r0
    1350:	e3a03000 	mov	r3, #0
    1354:	e5403078 	strb	r3, [r0, #-120]	; 0x78
  int_to_a(buffer, (int) Next_Ptr_Glob->Ptr_Comp);
  puts_UART( buffer );
  puts_UART ("        should be:   (implementation-dependent), same as above\n");
  puts_UART ("  Discr:             %d\n");
  int_to_a(buffer, Next_Ptr_Glob->Discr);
  puts_UART( buffer );
    1358:	e28d0010 	add	r0, sp, #16
    135c:	e58dc000 	str	ip, [sp]
    1360:	eb00049b 	bl	25d4 <puts_UART>
  puts_UART ("        should be:   %d\n");
    1364:	e51f0b88 	ldr	r0, [pc, #-2952]	; 7e4 <PLLSTAT_PLOCK+0x3e4>
    1368:	eb000499 	bl	25d4 <puts_UART>
      str[pos] = '\0';
    }
  else if (number == 0)
    {
      str[0] = '0';
      str[1] = '\0';
    136c:	e3a05000 	mov	r5, #0
  puts_UART ("  Discr:             %d\n");
  int_to_a(buffer, Next_Ptr_Glob->Discr);
  puts_UART( buffer );
  puts_UART ("        should be:   %d\n");
  int_to_a(buffer, 0);
  puts_UART( buffer );
    1370:	e28d0010 	add	r0, sp, #16
        }
      str[pos] = '\0';
    }
  else if (number == 0)
    {
      str[0] = '0';
    1374:	e3a04030 	mov	r4, #48	; 0x30
    1378:	e5cd4010 	strb	r4, [sp, #16]
      str[1] = '\0';
    137c:	e5cd5011 	strb	r5, [sp, #17]
  puts_UART ("  Discr:             %d\n");
  int_to_a(buffer, Next_Ptr_Glob->Discr);
  puts_UART( buffer );
  puts_UART ("        should be:   %d\n");
  int_to_a(buffer, 0);
  puts_UART( buffer );
    1380:	eb000493 	bl	25d4 <puts_UART>
  puts_UART ("  Enum_Comp:         %d\n");
    1384:	e51f0bc0 	ldr	r0, [pc, #-3008]	; 7cc <PLLSTAT_PLOCK+0x3cc>
    1388:	eb000491 	bl	25d4 <puts_UART>
  int_to_a(buffer, Next_Ptr_Glob->variant.var_1.Enum_Comp);
    138c:	e51febbc 	ldr	lr, [pc, #-3004]	; 7d8 <PLLSTAT_PLOCK+0x3d8>
    1390:	e59e3000 	ldr	r3, [lr]
    1394:	e5d3e008 	ldrb	lr, [r3, #8]
int int_to_a(char * str, int number)
{
  if(str == NULL)
    return 1;

  if (number > 0)
    1398:	e15e0005 	cmp	lr, r5
    139c:	e59dc000 	ldr	ip, [sp]
    13a0:	0a0002ee 	beq	1f60 <STACK_SIZE+0x1760>
    {
      int i;
      int pos = 0;
      int digit;
      int digitfound = 0;
      const int units[] =
    13a4:	e51f7bc0 	ldr	r7, [pc, #-3008]	; 7ec <PLLSTAT_PLOCK+0x3ec>
    13a8:	e8b7000f 	ldm	r7!, {r0, r1, r2, r3}
    13ac:	e28d4060 	add	r4, sp, #96	; 0x60
    13b0:	e8a4000f 	stmia	r4!, {r0, r1, r2, r3}
    13b4:	e8b7000f 	ldm	r7!, {r0, r1, r2, r3}
    13b8:	e8a4000f 	stmia	r4!, {r0, r1, r2, r3}
    13bc:	e8970003 	ldm	r7, {r0, r1}
    13c0:	e8840003 	stm	r4, {r0, r1}
  dhrystone();
}



int dhrystone (void)
    13c4:	e28d105c 	add	r1, sp, #92	; 0x5c
    return 1;

  if (number > 0)
    {
      int i;
      int pos = 0;
    13c8:	e1a00005 	mov	r0, r5



      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
    13cc:	e5b13004 	ldr	r3, [r1, #4]!
          digit = 0;

          while (number >= unit)
    13d0:	e153000e 	cmp	r3, lr
    13d4:	ca00028b 	bgt	1e08 <STACK_SIZE+0x1608>
    13d8:	e3a02000 	mov	r2, #0
            {
              digit++;
              number -= unit;
    13dc:	e063e00e 	rsb	lr, r3, lr
      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
          digit = 0;

          while (number >= unit)
    13e0:	e153000e 	cmp	r3, lr
            {
              digit++;
    13e4:	e2822001 	add	r2, r2, #1
      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
          digit = 0;

          while (number >= unit)
    13e8:	dafffffb 	ble	13dc <STACK_SIZE+0xbdc>
            {
              digit++;
              number -= unit;
            }

          if (digit != 0) digitfound = 1;
    13ec:	e3a05001 	mov	r5, #1
          if (digitfound) str[pos++] = digit + '0' ;
    13f0:	e28d4088 	add	r4, sp, #136	; 0x88
    13f4:	e0843000 	add	r3, r4, r0
    13f8:	e2822030 	add	r2, r2, #48	; 0x30
    13fc:	e5432078 	strb	r2, [r3, #-120]	; 0x78
    1400:	e2800001 	add	r0, r0, #1
              1};
      int unit;



      for (i = 0; i < 10; ++i)
    1404:	e59d7004 	ldr	r7, [sp, #4]
    1408:	e1510007 	cmp	r1, r7
    140c:	1affffee 	bne	13cc <STACK_SIZE+0xbcc>
            }

          if (digit != 0) digitfound = 1;
          if (digitfound) str[pos++] = digit + '0' ;
        }
      str[pos] = '\0';
    1410:	e28de088 	add	lr, sp, #136	; 0x88
    1414:	e08e0000 	add	r0, lr, r0
    1418:	e3a03000 	mov	r3, #0
    141c:	e5403078 	strb	r3, [r0, #-120]	; 0x78
  puts_UART ("        should be:   %d\n");
  int_to_a(buffer, 0);
  puts_UART( buffer );
  puts_UART ("  Enum_Comp:         %d\n");
  int_to_a(buffer, Next_Ptr_Glob->variant.var_1.Enum_Comp);
  puts_UART( buffer );
    1420:	e28d0010 	add	r0, sp, #16
    {
      int i;
      int pos = 0;
      int digit;
      int digitfound = 0;
      const int units[] =
    1424:	e51f4c40 	ldr	r4, [pc, #-3136]	; 7ec <PLLSTAT_PLOCK+0x3ec>
  puts_UART ("        should be:   %d\n");
  int_to_a(buffer, 0);
  puts_UART( buffer );
  puts_UART ("  Enum_Comp:         %d\n");
  int_to_a(buffer, Next_Ptr_Glob->variant.var_1.Enum_Comp);
  puts_UART( buffer );
    1428:	e58dc000 	str	ip, [sp]
    142c:	eb000468 	bl	25d4 <puts_UART>
  puts_UART ("        should be:   %d\n");
    1430:	e51f0c54 	ldr	r0, [pc, #-3156]	; 7e4 <PLLSTAT_PLOCK+0x3e4>
    1434:	eb000466 	bl	25d4 <puts_UART>
    {
      int i;
      int pos = 0;
      int digit;
      int digitfound = 0;
      const int units[] =
    1438:	e8b4000f 	ldm	r4!, {r0, r1, r2, r3}
    143c:	e28de060 	add	lr, sp, #96	; 0x60
    1440:	e8ae000f 	stmia	lr!, {r0, r1, r2, r3}
    1444:	e8b4000f 	ldm	r4!, {r0, r1, r2, r3}
    1448:	e8ae000f 	stmia	lr!, {r0, r1, r2, r3}
    144c:	e8940003 	ldm	r4, {r0, r1}
    return 1;

  if (number > 0)
    {
      int i;
      int pos = 0;
    1450:	e59dc000 	ldr	ip, [sp]
      int digit;
      int digitfound = 0;
      const int units[] =
    1454:	e88e0003 	stm	lr, {r0, r1}
  if (number > 0)
    {
      int i;
      int pos = 0;
      int digit;
      int digitfound = 0;
    1458:	e3a01000 	mov	r1, #0
  dhrystone();
}



int dhrystone (void)
    145c:	e28d005c 	add	r0, sp, #92	; 0x5c
    1460:	e3a03001 	mov	r3, #1
    return 1;

  if (number > 0)
    {
      int i;
      int pos = 0;
    1464:	e1a0e001 	mov	lr, r1



      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
    1468:	e5b02004 	ldr	r2, [r0, #4]!
          digit = 0;

          while (number >= unit)
    146c:	e1520003 	cmp	r2, r3
    1470:	ca000214 	bgt	1cc8 <STACK_SIZE+0x14c8>
    1474:	e3a01000 	mov	r1, #0
            {
              digit++;
              number -= unit;
    1478:	e0623003 	rsb	r3, r2, r3
      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
          digit = 0;

          while (number >= unit)
    147c:	e1520003 	cmp	r2, r3
            {
              digit++;
    1480:	e2811001 	add	r1, r1, #1
      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
          digit = 0;

          while (number >= unit)
    1484:	dafffffb 	ble	1478 <STACK_SIZE+0xc78>
              digit++;
              number -= unit;
            }

          if (digit != 0) digitfound = 1;
          if (digitfound) str[pos++] = digit + '0' ;
    1488:	e28d4088 	add	r4, sp, #136	; 0x88
    148c:	e084200e 	add	r2, r4, lr
    1490:	e2811030 	add	r1, r1, #48	; 0x30
    1494:	e5421078 	strb	r1, [r2, #-120]	; 0x78
    1498:	e28ee001 	add	lr, lr, #1
    149c:	e3a01001 	mov	r1, #1
              1};
      int unit;



      for (i = 0; i < 10; ++i)
    14a0:	e59d5004 	ldr	r5, [sp, #4]
    14a4:	e1500005 	cmp	r0, r5
    14a8:	1affffee 	bne	1468 <STACK_SIZE+0xc68>
            }

          if (digit != 0) digitfound = 1;
          if (digitfound) str[pos++] = digit + '0' ;
        }
      str[pos] = '\0';
    14ac:	e28d7088 	add	r7, sp, #136	; 0x88
    14b0:	e087e00e 	add	lr, r7, lr
    14b4:	e3a05000 	mov	r5, #0
    14b8:	e54e5078 	strb	r5, [lr, #-120]	; 0x78
  puts_UART ("  Enum_Comp:         %d\n");
  int_to_a(buffer, Next_Ptr_Glob->variant.var_1.Enum_Comp);
  puts_UART( buffer );
  puts_UART ("        should be:   %d\n");
  int_to_a(buffer, 1);
  puts_UART( buffer );
    14bc:	e28d0010 	add	r0, sp, #16
    14c0:	e58dc000 	str	ip, [sp]
    14c4:	eb000442 	bl	25d4 <puts_UART>
  puts_UART ("  Int_Comp:          %d\n");
    14c8:	e51f0d00 	ldr	r0, [pc, #-3328]	; 7d0 <PLLSTAT_PLOCK+0x3d0>
    14cc:	eb000440 	bl	25d4 <puts_UART>
  int_to_a(buffer, Next_Ptr_Glob->variant.var_1.Int_Comp);
    14d0:	e51fed00 	ldr	lr, [pc, #-3328]	; 7d8 <PLLSTAT_PLOCK+0x3d8>
    14d4:	e59e3000 	ldr	r3, [lr]
    14d8:	e593e00c 	ldr	lr, [r3, #12]
int int_to_a(char * str, int number)
{
  if(str == NULL)
    return 1;

  if (number > 0)
    14dc:	e15e0005 	cmp	lr, r5
    14e0:	e59dc000 	ldr	ip, [sp]
    14e4:	da000269 	ble	1e90 <STACK_SIZE+0x1690>
    {
      int i;
      int pos = 0;
      int digit;
      int digitfound = 0;
      const int units[] =
    14e8:	e51f7d04 	ldr	r7, [pc, #-3332]	; 7ec <PLLSTAT_PLOCK+0x3ec>
    14ec:	e8b7000f 	ldm	r7!, {r0, r1, r2, r3}
    14f0:	e28d4060 	add	r4, sp, #96	; 0x60
    14f4:	e8a4000f 	stmia	r4!, {r0, r1, r2, r3}
    14f8:	e8b7000f 	ldm	r7!, {r0, r1, r2, r3}
    14fc:	e8a4000f 	stmia	r4!, {r0, r1, r2, r3}
    1500:	e8970003 	ldm	r7, {r0, r1}
    1504:	e8840003 	stm	r4, {r0, r1}
  dhrystone();
}



int dhrystone (void)
    1508:	e28d105c 	add	r1, sp, #92	; 0x5c
    return 1;

  if (number > 0)
    {
      int i;
      int pos = 0;
    150c:	e1a00005 	mov	r0, r5



      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
    1510:	e5b13004 	ldr	r3, [r1, #4]!
          digit = 0;

          while (number >= unit)
    1514:	e153000e 	cmp	r3, lr
    1518:	ca00021a 	bgt	1d88 <STACK_SIZE+0x1588>
    151c:	e3a02000 	mov	r2, #0
            {
              digit++;
              number -= unit;
    1520:	e063e00e 	rsb	lr, r3, lr
      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
          digit = 0;

          while (number >= unit)
    1524:	e153000e 	cmp	r3, lr
            {
              digit++;
    1528:	e2822001 	add	r2, r2, #1
      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
          digit = 0;

          while (number >= unit)
    152c:	dafffffb 	ble	1520 <STACK_SIZE+0xd20>
              digit++;
              number -= unit;
            }

          if (digit != 0) digitfound = 1;
          if (digitfound) str[pos++] = digit + '0' ;
    1530:	e28d4088 	add	r4, sp, #136	; 0x88
    1534:	e0843000 	add	r3, r4, r0
    1538:	e2822030 	add	r2, r2, #48	; 0x30
    153c:	e5432078 	strb	r2, [r3, #-120]	; 0x78
    1540:	e2800001 	add	r0, r0, #1
    1544:	e3a05001 	mov	r5, #1
              1};
      int unit;



      for (i = 0; i < 10; ++i)
    1548:	e59d7004 	ldr	r7, [sp, #4]
    154c:	e1510007 	cmp	r1, r7
    1550:	1affffee 	bne	1510 <STACK_SIZE+0xd10>
            }

          if (digit != 0) digitfound = 1;
          if (digitfound) str[pos++] = digit + '0' ;
        }
      str[pos] = '\0';
    1554:	e28de088 	add	lr, sp, #136	; 0x88
    1558:	e08e0000 	add	r0, lr, r0
    155c:	e3a03000 	mov	r3, #0
    1560:	e5403078 	strb	r3, [r0, #-120]	; 0x78
  puts_UART ("        should be:   %d\n");
  int_to_a(buffer, 1);
  puts_UART( buffer );
  puts_UART ("  Int_Comp:          %d\n");
  int_to_a(buffer, Next_Ptr_Glob->variant.var_1.Int_Comp);
  puts_UART( buffer );
    1564:	e28d0010 	add	r0, sp, #16
    {
      int i;
      int pos = 0;
      int digit;
      int digitfound = 0;
      const int units[] =
    1568:	e51f4d84 	ldr	r4, [pc, #-3460]	; 7ec <PLLSTAT_PLOCK+0x3ec>
  puts_UART ("        should be:   %d\n");
  int_to_a(buffer, 1);
  puts_UART( buffer );
  puts_UART ("  Int_Comp:          %d\n");
  int_to_a(buffer, Next_Ptr_Glob->variant.var_1.Int_Comp);
  puts_UART( buffer );
    156c:	e58dc000 	str	ip, [sp]
    1570:	eb000417 	bl	25d4 <puts_UART>
  puts_UART ("        should be:   %d\n");
    1574:	e51f0d98 	ldr	r0, [pc, #-3480]	; 7e4 <PLLSTAT_PLOCK+0x3e4>
    1578:	eb000415 	bl	25d4 <puts_UART>
    {
      int i;
      int pos = 0;
      int digit;
      int digitfound = 0;
      const int units[] =
    157c:	e8b4000f 	ldm	r4!, {r0, r1, r2, r3}
    1580:	e28de060 	add	lr, sp, #96	; 0x60
    1584:	e8ae000f 	stmia	lr!, {r0, r1, r2, r3}
    1588:	e8b4000f 	ldm	r4!, {r0, r1, r2, r3}
    158c:	e8ae000f 	stmia	lr!, {r0, r1, r2, r3}
    1590:	e8940003 	ldm	r4, {r0, r1}
    return 1;

  if (number > 0)
    {
      int i;
      int pos = 0;
    1594:	e59dc000 	ldr	ip, [sp]
      int digit;
      int digitfound = 0;
      const int units[] =
    1598:	e88e0003 	stm	lr, {r0, r1}
  if (number > 0)
    {
      int i;
      int pos = 0;
      int digit;
      int digitfound = 0;
    159c:	e3a01000 	mov	r1, #0
  dhrystone();
}



int dhrystone (void)
    15a0:	e28d005c 	add	r0, sp, #92	; 0x5c
    15a4:	e3a03012 	mov	r3, #18
    return 1;

  if (number > 0)
    {
      int i;
      int pos = 0;
    15a8:	e1a0e001 	mov	lr, r1



      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
    15ac:	e5b02004 	ldr	r2, [r0, #4]!
          digit = 0;

          while (number >= unit)
    15b0:	e1520003 	cmp	r2, r3
    15b4:	ca0001bf 	bgt	1cb8 <STACK_SIZE+0x14b8>
    15b8:	e3a01000 	mov	r1, #0
            {
              digit++;
              number -= unit;
    15bc:	e0623003 	rsb	r3, r2, r3
      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
          digit = 0;

          while (number >= unit)
    15c0:	e1520003 	cmp	r2, r3
            {
              digit++;
    15c4:	e2811001 	add	r1, r1, #1
      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
          digit = 0;

          while (number >= unit)
    15c8:	dafffffb 	ble	15bc <STACK_SIZE+0xdbc>
              digit++;
              number -= unit;
            }

          if (digit != 0) digitfound = 1;
          if (digitfound) str[pos++] = digit + '0' ;
    15cc:	e28d4088 	add	r4, sp, #136	; 0x88
    15d0:	e084200e 	add	r2, r4, lr
    15d4:	e2811030 	add	r1, r1, #48	; 0x30
    15d8:	e5421078 	strb	r1, [r2, #-120]	; 0x78
    15dc:	e28ee001 	add	lr, lr, #1
    15e0:	e3a01001 	mov	r1, #1
              1};
      int unit;



      for (i = 0; i < 10; ++i)
    15e4:	e59d5004 	ldr	r5, [sp, #4]
    15e8:	e1500005 	cmp	r0, r5
    15ec:	1affffee 	bne	15ac <STACK_SIZE+0xdac>
            }

          if (digit != 0) digitfound = 1;
          if (digitfound) str[pos++] = digit + '0' ;
        }
      str[pos] = '\0';
    15f0:	e28d7088 	add	r7, sp, #136	; 0x88
    15f4:	e087e00e 	add	lr, r7, lr
    15f8:	e3a04000 	mov	r4, #0
    15fc:	e54e4078 	strb	r4, [lr, #-120]	; 0x78
  puts_UART ("  Int_Comp:          %d\n");
  int_to_a(buffer, Next_Ptr_Glob->variant.var_1.Int_Comp);
  puts_UART( buffer );
  puts_UART ("        should be:   %d\n");
  int_to_a(buffer, 18);
  puts_UART( buffer );
    1600:	e28d0010 	add	r0, sp, #16
    1604:	e58dc000 	str	ip, [sp]
    1608:	eb0003f1 	bl	25d4 <puts_UART>
  puts_UART ("  Str_Comp:          %s\n");
    160c:	e51f0e40 	ldr	r0, [pc, #-3648]	; 7d4 <PLLSTAT_PLOCK+0x3d4>
    1610:	eb0003ef 	bl	25d4 <puts_UART>
  puts_UART ( Next_Ptr_Glob->variant.var_1.Str_Comp);
    1614:	e51fee44 	ldr	lr, [pc, #-3652]	; 7d8 <PLLSTAT_PLOCK+0x3d8>
    1618:	e59e0000 	ldr	r0, [lr]
    161c:	e2800010 	add	r0, r0, #16
    1620:	eb0003eb 	bl	25d4 <puts_UART>
  puts_UART ("        should be:   DHRYSTONE PROGRAM, SOME STRING\n");
    1624:	e51f0e50 	ldr	r0, [pc, #-3664]	; 7dc <PLLSTAT_PLOCK+0x3dc>
    1628:	eb0003e9 	bl	25d4 <puts_UART>
  puts_UART ("Int_1_Loc:           %d\n");
    162c:	e51f0e54 	ldr	r0, [pc, #-3668]	; 7e0 <PLLSTAT_PLOCK+0x3e0>
    1630:	eb0003e7 	bl	25d4 <puts_UART>
int int_to_a(char * str, int number)
{
  if(str == NULL)
    return 1;

  if (number > 0)
    1634:	e15b0004 	cmp	fp, r4
    1638:	e59dc000 	ldr	ip, [sp]
    163c:	da00020e 	ble	1e7c <STACK_SIZE+0x167c>
    {
      int i;
      int pos = 0;
      int digit;
      int digitfound = 0;
      const int units[] =
    1640:	e51f5e5c 	ldr	r5, [pc, #-3676]	; 7ec <PLLSTAT_PLOCK+0x3ec>
    1644:	e8b5000f 	ldm	r5!, {r0, r1, r2, r3}
    1648:	e28de060 	add	lr, sp, #96	; 0x60
    164c:	e8ae000f 	stmia	lr!, {r0, r1, r2, r3}
    1650:	e8b5000f 	ldm	r5!, {r0, r1, r2, r3}
    1654:	e8ae000f 	stmia	lr!, {r0, r1, r2, r3}
    1658:	e8950003 	ldm	r5, {r0, r1}
    165c:	e88e0003 	stm	lr, {r0, r1}
  dhrystone();
}



int dhrystone (void)
    1660:	e28d105c 	add	r1, sp, #92	; 0x5c
    return 1;

  if (number > 0)
    {
      int i;
      int pos = 0;
    1664:	e1a00004 	mov	r0, r4



      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
    1668:	e5b13004 	ldr	r3, [r1, #4]!
          digit = 0;

          while (number >= unit)
    166c:	e153000b 	cmp	r3, fp
    1670:	ca0001e0 	bgt	1df8 <STACK_SIZE+0x15f8>
    1674:	e3a02000 	mov	r2, #0
  dhrystone();
}



int dhrystone (void)
    1678:	e063b00b 	rsb	fp, r3, fp
      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
          digit = 0;

          while (number >= unit)
    167c:	e15b0003 	cmp	fp, r3
            {
              digit++;
    1680:	e2822001 	add	r2, r2, #1
      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
          digit = 0;

          while (number >= unit)
    1684:	aafffffb 	bge	1678 <STACK_SIZE+0xe78>
              digit++;
              number -= unit;
            }

          if (digit != 0) digitfound = 1;
          if (digitfound) str[pos++] = digit + '0' ;
    1688:	e28d4088 	add	r4, sp, #136	; 0x88
    168c:	e0843000 	add	r3, r4, r0
    1690:	e2822030 	add	r2, r2, #48	; 0x30
    1694:	e5432078 	strb	r2, [r3, #-120]	; 0x78
    1698:	e2800001 	add	r0, r0, #1
    169c:	e3a04001 	mov	r4, #1
              1};
      int unit;



      for (i = 0; i < 10; ++i)
    16a0:	e59d5004 	ldr	r5, [sp, #4]
    16a4:	e1510005 	cmp	r1, r5
    16a8:	1affffee 	bne	1668 <STACK_SIZE+0xe68>
            }

          if (digit != 0) digitfound = 1;
          if (digitfound) str[pos++] = digit + '0' ;
        }
      str[pos] = '\0';
    16ac:	e28d7088 	add	r7, sp, #136	; 0x88
    16b0:	e0870000 	add	r0, r7, r0
    16b4:	e3a03000 	mov	r3, #0
    16b8:	e5403078 	strb	r3, [r0, #-120]	; 0x78
  puts_UART ("  Str_Comp:          %s\n");
  puts_UART ( Next_Ptr_Glob->variant.var_1.Str_Comp);
  puts_UART ("        should be:   DHRYSTONE PROGRAM, SOME STRING\n");
  puts_UART ("Int_1_Loc:           %d\n");
  int_to_a(buffer, Int_1_Loc);
  puts_UART( buffer );
    16bc:	e28d0010 	add	r0, sp, #16
    {
      int i;
      int pos = 0;
      int digit;
      int digitfound = 0;
      const int units[] =
    16c0:	e51f4edc 	ldr	r4, [pc, #-3804]	; 7ec <PLLSTAT_PLOCK+0x3ec>
  puts_UART ("  Str_Comp:          %s\n");
  puts_UART ( Next_Ptr_Glob->variant.var_1.Str_Comp);
  puts_UART ("        should be:   DHRYSTONE PROGRAM, SOME STRING\n");
  puts_UART ("Int_1_Loc:           %d\n");
  int_to_a(buffer, Int_1_Loc);
  puts_UART( buffer );
    16c4:	e58dc000 	str	ip, [sp]
    16c8:	eb0003c1 	bl	25d4 <puts_UART>
  puts_UART ("        should be:   %d\n");
    16cc:	e51f0ef0 	ldr	r0, [pc, #-3824]	; 7e4 <PLLSTAT_PLOCK+0x3e4>
    16d0:	eb0003bf 	bl	25d4 <puts_UART>
    {
      int i;
      int pos = 0;
      int digit;
      int digitfound = 0;
      const int units[] =
    16d4:	e8b4000f 	ldm	r4!, {r0, r1, r2, r3}
    16d8:	e28de060 	add	lr, sp, #96	; 0x60
    16dc:	e8ae000f 	stmia	lr!, {r0, r1, r2, r3}
    16e0:	e8b4000f 	ldm	r4!, {r0, r1, r2, r3}
    16e4:	e8ae000f 	stmia	lr!, {r0, r1, r2, r3}
    16e8:	e8940003 	ldm	r4, {r0, r1}
    return 1;

  if (number > 0)
    {
      int i;
      int pos = 0;
    16ec:	e59dc000 	ldr	ip, [sp]
      int digit;
      int digitfound = 0;
      const int units[] =
    16f0:	e88e0003 	stm	lr, {r0, r1}
  if (number > 0)
    {
      int i;
      int pos = 0;
      int digit;
      int digitfound = 0;
    16f4:	e3a01000 	mov	r1, #0
  dhrystone();
}



int dhrystone (void)
    16f8:	e28d005c 	add	r0, sp, #92	; 0x5c
    16fc:	e3a03005 	mov	r3, #5
    return 1;

  if (number > 0)
    {
      int i;
      int pos = 0;
    1700:	e1a0e001 	mov	lr, r1



      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
    1704:	e5b02004 	ldr	r2, [r0, #4]!
          digit = 0;

          while (number >= unit)
    1708:	e1520003 	cmp	r2, r3
    170c:	ca000165 	bgt	1ca8 <STACK_SIZE+0x14a8>
    1710:	e3a01000 	mov	r1, #0
            {
              digit++;
              number -= unit;
    1714:	e0623003 	rsb	r3, r2, r3
      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
          digit = 0;

          while (number >= unit)
    1718:	e1520003 	cmp	r2, r3
            {
              digit++;
    171c:	e2811001 	add	r1, r1, #1
      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
          digit = 0;

          while (number >= unit)
    1720:	dafffffb 	ble	1714 <STACK_SIZE+0xf14>
              digit++;
              number -= unit;
            }

          if (digit != 0) digitfound = 1;
          if (digitfound) str[pos++] = digit + '0' ;
    1724:	e28d4088 	add	r4, sp, #136	; 0x88
    1728:	e084200e 	add	r2, r4, lr
    172c:	e2811030 	add	r1, r1, #48	; 0x30
    1730:	e5421078 	strb	r1, [r2, #-120]	; 0x78
    1734:	e28ee001 	add	lr, lr, #1
    1738:	e3a01001 	mov	r1, #1
              1};
      int unit;



      for (i = 0; i < 10; ++i)
    173c:	e59d5004 	ldr	r5, [sp, #4]
    1740:	e1500005 	cmp	r0, r5
    1744:	1affffee 	bne	1704 <STACK_SIZE+0xf04>
            }

          if (digit != 0) digitfound = 1;
          if (digitfound) str[pos++] = digit + '0' ;
        }
      str[pos] = '\0';
    1748:	e28d7088 	add	r7, sp, #136	; 0x88
    174c:	e087e00e 	add	lr, r7, lr
    1750:	e3a05000 	mov	r5, #0
    1754:	e54e5078 	strb	r5, [lr, #-120]	; 0x78
  puts_UART ("Int_1_Loc:           %d\n");
  int_to_a(buffer, Int_1_Loc);
  puts_UART( buffer );
  puts_UART ("        should be:   %d\n");
  int_to_a(buffer, 5);
  puts_UART( buffer );
    1758:	e28d0010 	add	r0, sp, #16
    175c:	e58dc000 	str	ip, [sp]
    1760:	eb00039b 	bl	25d4 <puts_UART>
  puts_UART ("Int_2_Loc:           %d\n" );
    1764:	e51f0f84 	ldr	r0, [pc, #-3972]	; 7e8 <PLLSTAT_PLOCK+0x3e8>
    1768:	eb000399 	bl	25d4 <puts_UART>
int int_to_a(char * str, int number)
{
  if(str == NULL)
    return 1;

  if (number > 0)
    176c:	e59dc000 	ldr	ip, [sp]
    1770:	e15c0005 	cmp	ip, r5
    1774:	da0001bb 	ble	1e68 <STACK_SIZE+0x1668>
    {
      int i;
      int pos = 0;
      int digit;
      int digitfound = 0;
      const int units[] =
    1778:	e51f4f94 	ldr	r4, [pc, #-3988]	; 7ec <PLLSTAT_PLOCK+0x3ec>
    177c:	e8b4000f 	ldm	r4!, {r0, r1, r2, r3}
    1780:	e28de060 	add	lr, sp, #96	; 0x60
    1784:	e8ae000f 	stmia	lr!, {r0, r1, r2, r3}
    1788:	e8b4000f 	ldm	r4!, {r0, r1, r2, r3}
    178c:	e8ae000f 	stmia	lr!, {r0, r1, r2, r3}
    1790:	e8940003 	ldm	r4, {r0, r1}
  if (number > 0)
    {
      int i;
      int pos = 0;
      int digit;
      int digitfound = 0;
    1794:	e1a02005 	mov	r2, r5
      const int units[] =
    1798:	e88e0003 	stm	lr, {r0, r1}
  dhrystone();
}



int dhrystone (void)
    179c:	e28d105c 	add	r1, sp, #92	; 0x5c
    return 1;

  if (number > 0)
    {
      int i;
      int pos = 0;
    17a0:	e1a00005 	mov	r0, r5



      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
    17a4:	e5b13004 	ldr	r3, [r1, #4]!
          digit = 0;

          while (number >= unit)
    17a8:	e153000c 	cmp	r3, ip
    17ac:	ca00018d 	bgt	1de8 <STACK_SIZE+0x15e8>
    17b0:	e3a02000 	mov	r2, #0
  dhrystone();
}



int dhrystone (void)
    17b4:	e063c00c 	rsb	ip, r3, ip
      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
          digit = 0;

          while (number >= unit)
    17b8:	e15c0003 	cmp	ip, r3
            {
              digit++;
    17bc:	e2822001 	add	r2, r2, #1
      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
          digit = 0;

          while (number >= unit)
    17c0:	aafffffb 	bge	17b4 <STACK_SIZE+0xfb4>
              digit++;
              number -= unit;
            }

          if (digit != 0) digitfound = 1;
          if (digitfound) str[pos++] = digit + '0' ;
    17c4:	e28de088 	add	lr, sp, #136	; 0x88
    17c8:	e08e3000 	add	r3, lr, r0
    17cc:	e2822030 	add	r2, r2, #48	; 0x30
    17d0:	e5432078 	strb	r2, [r3, #-120]	; 0x78
    17d4:	e2800001 	add	r0, r0, #1
    17d8:	e3a02001 	mov	r2, #1
              1};
      int unit;



      for (i = 0; i < 10; ++i)
    17dc:	e59d4004 	ldr	r4, [sp, #4]
    17e0:	e1510004 	cmp	r1, r4
    17e4:	1affffee 	bne	17a4 <STACK_SIZE+0xfa4>
            }

          if (digit != 0) digitfound = 1;
          if (digitfound) str[pos++] = digit + '0' ;
        }
      str[pos] = '\0';
    17e8:	e28d5088 	add	r5, sp, #136	; 0x88
    17ec:	e0850000 	add	r0, r5, r0
    17f0:	e3a03000 	mov	r3, #0
    17f4:	e5403078 	strb	r3, [r0, #-120]	; 0x78
  puts_UART ("        should be:   %d\n");
  int_to_a(buffer, 5);
  puts_UART( buffer );
  puts_UART ("Int_2_Loc:           %d\n" );
  int_to_a(buffer, Int_2_Loc);
  puts_UART( buffer );
    17f8:	e28d0010 	add	r0, sp, #16
    17fc:	eb000374 	bl	25d4 <puts_UART>
  puts_UART ("        should be:   %d\n");
    1800:	e59f08e8 	ldr	r0, [pc, #2280]	; 20f0 <STACK_SIZE+0x18f0>
    1804:	eb000372 	bl	25d4 <puts_UART>
    {
      int i;
      int pos = 0;
      int digit;
      int digitfound = 0;
      const int units[] =
    1808:	e59fe8e4 	ldr	lr, [pc, #2276]	; 20f4 <STACK_SIZE+0x18f4>
    180c:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    1810:	e28dc060 	add	ip, sp, #96	; 0x60
    1814:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    1818:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    181c:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    1820:	e89e0003 	ldm	lr, {r0, r1}
    1824:	e88c0003 	stm	ip, {r0, r1}
  if (number > 0)
    {
      int i;
      int pos = 0;
      int digit;
      int digitfound = 0;
    1828:	e3a01000 	mov	r1, #0
  dhrystone();
}



int dhrystone (void)
    182c:	e28d005c 	add	r0, sp, #92	; 0x5c
    1830:	e3a0300d 	mov	r3, #13
    return 1;

  if (number > 0)
    {
      int i;
      int pos = 0;
    1834:	e1a0c001 	mov	ip, r1



      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
    1838:	e5b02004 	ldr	r2, [r0, #4]!
          digit = 0;

          while (number >= unit)
    183c:	e1520003 	cmp	r2, r3
    1840:	ca000114 	bgt	1c98 <STACK_SIZE+0x1498>
    1844:	e3a01000 	mov	r1, #0
            {
              digit++;
              number -= unit;
    1848:	e0623003 	rsb	r3, r2, r3
      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
          digit = 0;

          while (number >= unit)
    184c:	e1520003 	cmp	r2, r3
            {
              digit++;
    1850:	e2811001 	add	r1, r1, #1
      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
          digit = 0;

          while (number >= unit)
    1854:	dafffffb 	ble	1848 <STACK_SIZE+0x1048>
              digit++;
              number -= unit;
            }

          if (digit != 0) digitfound = 1;
          if (digitfound) str[pos++] = digit + '0' ;
    1858:	e28d7088 	add	r7, sp, #136	; 0x88
    185c:	e087200c 	add	r2, r7, ip
    1860:	e2811030 	add	r1, r1, #48	; 0x30
    1864:	e5421078 	strb	r1, [r2, #-120]	; 0x78
    1868:	e28cc001 	add	ip, ip, #1
    186c:	e3a01001 	mov	r1, #1
              1};
      int unit;



      for (i = 0; i < 10; ++i)
    1870:	e59d4004 	ldr	r4, [sp, #4]
    1874:	e1500004 	cmp	r0, r4
    1878:	1affffee 	bne	1838 <STACK_SIZE+0x1038>
            }

          if (digit != 0) digitfound = 1;
          if (digitfound) str[pos++] = digit + '0' ;
        }
      str[pos] = '\0';
    187c:	e28d5088 	add	r5, sp, #136	; 0x88
    1880:	e085c00c 	add	ip, r5, ip
    1884:	e3a04000 	mov	r4, #0
    1888:	e54c4078 	strb	r4, [ip, #-120]	; 0x78
  puts_UART ("Int_2_Loc:           %d\n" );
  int_to_a(buffer, Int_2_Loc);
  puts_UART( buffer );
  puts_UART ("        should be:   %d\n");
  int_to_a(buffer, 13);
  puts_UART( buffer );
    188c:	e28d0010 	add	r0, sp, #16
    1890:	eb00034f 	bl	25d4 <puts_UART>
  puts_UART ("Int_3_Loc:           %d\n");
    1894:	e59f085c 	ldr	r0, [pc, #2140]	; 20f8 <STACK_SIZE+0x18f8>
    1898:	eb00034d 	bl	25d4 <puts_UART>
    {
      int i;
      int pos = 0;
      int digit;
      int digitfound = 0;
      const int units[] =
    189c:	e59fe850 	ldr	lr, [pc, #2128]	; 20f4 <STACK_SIZE+0x18f4>
    18a0:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    18a4:	e28dc060 	add	ip, sp, #96	; 0x60
    18a8:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    18ac:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    18b0:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    18b4:	e89e0003 	ldm	lr, {r0, r1}
  dhrystone();
}



int dhrystone (void)
    18b8:	e3a03007 	mov	r3, #7
    {
      int i;
      int pos = 0;
      int digit;
      int digitfound = 0;
      const int units[] =
    18bc:	e88c0003 	stm	ip, {r0, r1}
  if (number > 0)
    {
      int i;
      int pos = 0;
      int digit;
      int digitfound = 0;
    18c0:	e1a01004 	mov	r1, r4
  dhrystone();
}



int dhrystone (void)
    18c4:	e28d005c 	add	r0, sp, #92	; 0x5c
    return 1;

  if (number > 0)
    {
      int i;
      int pos = 0;
    18c8:	e1a0c004 	mov	ip, r4



      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
    18cc:	e5b02004 	ldr	r2, [r0, #4]!
          digit = 0;

          while (number >= unit)
    18d0:	e1520003 	cmp	r2, r3
    18d4:	ca000157 	bgt	1e38 <STACK_SIZE+0x1638>
    18d8:	e3a01000 	mov	r1, #0
  dhrystone();
}



int dhrystone (void)
    18dc:	e0623003 	rsb	r3, r2, r3
      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
          digit = 0;

          while (number >= unit)
    18e0:	e1520003 	cmp	r2, r3
            {
              digit++;
    18e4:	e2811001 	add	r1, r1, #1
      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
          digit = 0;

          while (number >= unit)
    18e8:	dafffffb 	ble	18dc <STACK_SIZE+0x10dc>
              digit++;
              number -= unit;
            }

          if (digit != 0) digitfound = 1;
          if (digitfound) str[pos++] = digit + '0' ;
    18ec:	e28d7088 	add	r7, sp, #136	; 0x88
    18f0:	e087200c 	add	r2, r7, ip
    18f4:	e2811030 	add	r1, r1, #48	; 0x30
    18f8:	e5421078 	strb	r1, [r2, #-120]	; 0x78
    18fc:	e28cc001 	add	ip, ip, #1
    1900:	e3a01001 	mov	r1, #1
              1};
      int unit;



      for (i = 0; i < 10; ++i)
    1904:	e59d4004 	ldr	r4, [sp, #4]
    1908:	e1500004 	cmp	r0, r4
    190c:	1affffee 	bne	18cc <STACK_SIZE+0x10cc>
            }

          if (digit != 0) digitfound = 1;
          if (digitfound) str[pos++] = digit + '0' ;
        }
      str[pos] = '\0';
    1910:	e28d5088 	add	r5, sp, #136	; 0x88
    1914:	e085c00c 	add	ip, r5, ip
    1918:	e3a04000 	mov	r4, #0
    191c:	e54c4078 	strb	r4, [ip, #-120]	; 0x78
  puts_UART ("        should be:   %d\n");
  int_to_a(buffer, 13);
  puts_UART( buffer );
  puts_UART ("Int_3_Loc:           %d\n");
  int_to_a(buffer, Int_3_Loc);
  puts_UART( buffer );
    1920:	e28d0010 	add	r0, sp, #16
    1924:	eb00032a 	bl	25d4 <puts_UART>
  puts_UART ("        should be:   %d\n");
    1928:	e59f07c0 	ldr	r0, [pc, #1984]	; 20f0 <STACK_SIZE+0x18f0>
    192c:	eb000328 	bl	25d4 <puts_UART>
    {
      int i;
      int pos = 0;
      int digit;
      int digitfound = 0;
      const int units[] =
    1930:	e59fe7bc 	ldr	lr, [pc, #1980]	; 20f4 <STACK_SIZE+0x18f4>
    1934:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    1938:	e28dc060 	add	ip, sp, #96	; 0x60
    193c:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    1940:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    1944:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    1948:	e89e0003 	ldm	lr, {r0, r1}
  dhrystone();
}



int dhrystone (void)
    194c:	e3a03007 	mov	r3, #7
    {
      int i;
      int pos = 0;
      int digit;
      int digitfound = 0;
      const int units[] =
    1950:	e88c0003 	stm	ip, {r0, r1}
  if (number > 0)
    {
      int i;
      int pos = 0;
      int digit;
      int digitfound = 0;
    1954:	e1a01004 	mov	r1, r4
  dhrystone();
}



int dhrystone (void)
    1958:	e28d005c 	add	r0, sp, #92	; 0x5c
    return 1;

  if (number > 0)
    {
      int i;
      int pos = 0;
    195c:	e1a0c004 	mov	ip, r4



      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
    1960:	e5b02004 	ldr	r2, [r0, #4]!
          digit = 0;

          while (number >= unit)
    1964:	e1520003 	cmp	r2, r3
    1968:	ca0000c6 	bgt	1c88 <STACK_SIZE+0x1488>
    196c:	e3a01000 	mov	r1, #0
            {
              digit++;
              number -= unit;
    1970:	e0623003 	rsb	r3, r2, r3
      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
          digit = 0;

          while (number >= unit)
    1974:	e1520003 	cmp	r2, r3
            {
              digit++;
    1978:	e2811001 	add	r1, r1, #1
      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
          digit = 0;

          while (number >= unit)
    197c:	dafffffb 	ble	1970 <STACK_SIZE+0x1170>
              digit++;
              number -= unit;
            }

          if (digit != 0) digitfound = 1;
          if (digitfound) str[pos++] = digit + '0' ;
    1980:	e28d7088 	add	r7, sp, #136	; 0x88
    1984:	e087200c 	add	r2, r7, ip
    1988:	e2811030 	add	r1, r1, #48	; 0x30
    198c:	e5421078 	strb	r1, [r2, #-120]	; 0x78
    1990:	e28cc001 	add	ip, ip, #1
    1994:	e3a01001 	mov	r1, #1
              1};
      int unit;



      for (i = 0; i < 10; ++i)
    1998:	e59d4004 	ldr	r4, [sp, #4]
    199c:	e1500004 	cmp	r0, r4
    19a0:	1affffee 	bne	1960 <STACK_SIZE+0x1160>
            }

          if (digit != 0) digitfound = 1;
          if (digitfound) str[pos++] = digit + '0' ;
        }
      str[pos] = '\0';
    19a4:	e28d5088 	add	r5, sp, #136	; 0x88
    19a8:	e085c00c 	add	ip, r5, ip
    19ac:	e3a05000 	mov	r5, #0
    19b0:	e54c5078 	strb	r5, [ip, #-120]	; 0x78
  puts_UART ("Int_3_Loc:           %d\n");
  int_to_a(buffer, Int_3_Loc);
  puts_UART( buffer );
  puts_UART ("        should be:   %d\n");
  int_to_a(buffer, 7);
  puts_UART( buffer );
    19b4:	e28d0010 	add	r0, sp, #16
    19b8:	eb000305 	bl	25d4 <puts_UART>
  puts_UART ("Enum_Loc:            %d\n");
    19bc:	e59f0738 	ldr	r0, [pc, #1848]	; 20fc <STACK_SIZE+0x18fc>
    19c0:	eb000303 	bl	25d4 <puts_UART>
int int_to_a(char * str, int number)
{
  if(str == NULL)
    return 1;

  if (number > 0)
    19c4:	e256c000 	subs	ip, r6, #0
    19c8:	0a00015c 	beq	1f40 <STACK_SIZE+0x1740>
    {
      int i;
      int pos = 0;
      int digit;
      int digitfound = 0;
      const int units[] =
    19cc:	e59f4720 	ldr	r4, [pc, #1824]	; 20f4 <STACK_SIZE+0x18f4>
    19d0:	e8b4000f 	ldm	r4!, {r0, r1, r2, r3}
    19d4:	e28de060 	add	lr, sp, #96	; 0x60
    19d8:	e8ae000f 	stmia	lr!, {r0, r1, r2, r3}
    19dc:	e8b4000f 	ldm	r4!, {r0, r1, r2, r3}
    19e0:	e8ae000f 	stmia	lr!, {r0, r1, r2, r3}
    19e4:	e8940003 	ldm	r4, {r0, r1}
  if (number > 0)
    {
      int i;
      int pos = 0;
      int digit;
      int digitfound = 0;
    19e8:	e1a02005 	mov	r2, r5
      const int units[] =
    19ec:	e88e0003 	stm	lr, {r0, r1}
  dhrystone();
}



int dhrystone (void)
    19f0:	e28d105c 	add	r1, sp, #92	; 0x5c
    return 1;

  if (number > 0)
    {
      int i;
      int pos = 0;
    19f4:	e1a00005 	mov	r0, r5



      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
    19f8:	e5b13004 	ldr	r3, [r1, #4]!
          digit = 0;

          while (number >= unit)
    19fc:	e153000c 	cmp	r3, ip
    1a00:	ca000108 	bgt	1e28 <STACK_SIZE+0x1628>
    1a04:	e3a02000 	mov	r2, #0
            {
              digit++;
              number -= unit;
    1a08:	e063c00c 	rsb	ip, r3, ip
      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
          digit = 0;

          while (number >= unit)
    1a0c:	e153000c 	cmp	r3, ip
            {
              digit++;
    1a10:	e2822001 	add	r2, r2, #1
      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
          digit = 0;

          while (number >= unit)
    1a14:	dafffffb 	ble	1a08 <STACK_SIZE+0x1208>
              digit++;
              number -= unit;
            }

          if (digit != 0) digitfound = 1;
          if (digitfound) str[pos++] = digit + '0' ;
    1a18:	e28d7088 	add	r7, sp, #136	; 0x88
    1a1c:	e0873000 	add	r3, r7, r0
    1a20:	e2822030 	add	r2, r2, #48	; 0x30
    1a24:	e5432078 	strb	r2, [r3, #-120]	; 0x78
    1a28:	e2800001 	add	r0, r0, #1
    1a2c:	e3a02001 	mov	r2, #1
              1};
      int unit;



      for (i = 0; i < 10; ++i)
    1a30:	e59d4004 	ldr	r4, [sp, #4]
    1a34:	e1510004 	cmp	r1, r4
    1a38:	1affffee 	bne	19f8 <STACK_SIZE+0x11f8>
            }

          if (digit != 0) digitfound = 1;
          if (digitfound) str[pos++] = digit + '0' ;
        }
      str[pos] = '\0';
    1a3c:	e28d5088 	add	r5, sp, #136	; 0x88
    1a40:	e0850000 	add	r0, r5, r0
    1a44:	e3a03000 	mov	r3, #0
    1a48:	e5403078 	strb	r3, [r0, #-120]	; 0x78
  puts_UART ("        should be:   %d\n");
  int_to_a(buffer, 7);
  puts_UART( buffer );
  puts_UART ("Enum_Loc:            %d\n");
  int_to_a(buffer, Enum_Loc);
  puts_UART( buffer );
    1a4c:	e28d0010 	add	r0, sp, #16
    1a50:	eb0002df 	bl	25d4 <puts_UART>
  puts_UART ("        should be:   %d\n");
    1a54:	e59f0694 	ldr	r0, [pc, #1684]	; 20f0 <STACK_SIZE+0x18f0>
    1a58:	eb0002dd 	bl	25d4 <puts_UART>
    {
      int i;
      int pos = 0;
      int digit;
      int digitfound = 0;
      const int units[] =
    1a5c:	e59fe690 	ldr	lr, [pc, #1680]	; 20f4 <STACK_SIZE+0x18f4>
    1a60:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    1a64:	e28dc060 	add	ip, sp, #96	; 0x60
    1a68:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    1a6c:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    1a70:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    1a74:	e89e0003 	ldm	lr, {r0, r1}
    1a78:	e88c0003 	stm	ip, {r0, r1}
  if (number > 0)
    {
      int i;
      int pos = 0;
      int digit;
      int digitfound = 0;
    1a7c:	e3a01000 	mov	r1, #0
  dhrystone();
}



int dhrystone (void)
    1a80:	e28d005c 	add	r0, sp, #92	; 0x5c
    1a84:	e3a03001 	mov	r3, #1
    return 1;

  if (number > 0)
    {
      int i;
      int pos = 0;
    1a88:	e1a0c001 	mov	ip, r1



      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
    1a8c:	e5b02004 	ldr	r2, [r0, #4]!
          digit = 0;

          while (number >= unit)
    1a90:	e1520003 	cmp	r2, r3
    1a94:	ca000077 	bgt	1c78 <STACK_SIZE+0x1478>
    1a98:	e3a01000 	mov	r1, #0
            {
              digit++;
              number -= unit;
    1a9c:	e0623003 	rsb	r3, r2, r3
      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
          digit = 0;

          while (number >= unit)
    1aa0:	e1520003 	cmp	r2, r3
            {
              digit++;
    1aa4:	e2811001 	add	r1, r1, #1
      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
          digit = 0;

          while (number >= unit)
    1aa8:	dafffffb 	ble	1a9c <STACK_SIZE+0x129c>
              digit++;
              number -= unit;
            }

          if (digit != 0) digitfound = 1;
          if (digitfound) str[pos++] = digit + '0' ;
    1aac:	e28d7088 	add	r7, sp, #136	; 0x88
    1ab0:	e087200c 	add	r2, r7, ip
    1ab4:	e2811030 	add	r1, r1, #48	; 0x30
    1ab8:	e5421078 	strb	r1, [r2, #-120]	; 0x78
    1abc:	e28cc001 	add	ip, ip, #1
    1ac0:	e3a01001 	mov	r1, #1
              1};
      int unit;



      for (i = 0; i < 10; ++i)
    1ac4:	e59d4004 	ldr	r4, [sp, #4]
    1ac8:	e1500004 	cmp	r0, r4
    1acc:	1affffee 	bne	1a8c <STACK_SIZE+0x128c>
            }

          if (digit != 0) digitfound = 1;
          if (digitfound) str[pos++] = digit + '0' ;
        }
      str[pos] = '\0';
    1ad0:	e28d5088 	add	r5, sp, #136	; 0x88
    1ad4:	e085c00c 	add	ip, r5, ip
    1ad8:	e3a04000 	mov	r4, #0
    1adc:	e54c4078 	strb	r4, [ip, #-120]	; 0x78
  puts_UART ("Enum_Loc:            %d\n");
  int_to_a(buffer, Enum_Loc);
  puts_UART( buffer );
  puts_UART ("        should be:   %d\n");
  int_to_a(buffer, 1);
  puts_UART( buffer );
    1ae0:	e28d0010 	add	r0, sp, #16
    1ae4:	eb0002ba 	bl	25d4 <puts_UART>
  puts_UART ("Str_1_Loc:           %s\n");
    1ae8:	e59f0610 	ldr	r0, [pc, #1552]	; 2100 <STACK_SIZE+0x1900>
    1aec:	eb0002b8 	bl	25d4 <puts_UART>
  puts_UART( Str_1_Loc );
    1af0:	e28d0020 	add	r0, sp, #32
    1af4:	eb0002b6 	bl	25d4 <puts_UART>
  puts_UART ("        should be:   DHRYSTONE PROGRAM, 1'ST STRING\n");
    1af8:	e59f0604 	ldr	r0, [pc, #1540]	; 2104 <STACK_SIZE+0x1904>
    1afc:	eb0002b4 	bl	25d4 <puts_UART>
  puts_UART ("Str_2_Loc:           %s\n");
    1b00:	e59f0600 	ldr	r0, [pc, #1536]	; 2108 <STACK_SIZE+0x1908>
    1b04:	eb0002b2 	bl	25d4 <puts_UART>
  puts_UART( Str_2_Loc );
    1b08:	e28d0040 	add	r0, sp, #64	; 0x40
    1b0c:	eb0002b0 	bl	25d4 <puts_UART>
  puts_UART ("        should be:   DHRYSTONE PROGRAM, 2'ND STRING\n");
    1b10:	e59f05f4 	ldr	r0, [pc, #1524]	; 210c <STACK_SIZE+0x190c>
    1b14:	eb0002ae 	bl	25d4 <puts_UART>
  puts_UART ("\n");
    1b18:	e59f05f0 	ldr	r0, [pc, #1520]	; 2110 <STACK_SIZE+0x1910>
    1b1c:	eb0002ac 	bl	25d4 <puts_UART>
#endif

  puts_UART("Test runned successfully !!!\n");
    1b20:	e59f05ec 	ldr	r0, [pc, #1516]	; 2114 <STACK_SIZE+0x1914>
    1b24:	eb0002aa 	bl	25d4 <puts_UART>

  puts_UART ("LOOPS: ");
    1b28:	e59f05e8 	ldr	r0, [pc, #1512]	; 2118 <STACK_SIZE+0x1918>
    1b2c:	eb0002a8 	bl	25d4 <puts_UART>
    {
      int i;
      int pos = 0;
      int digit;
      int digitfound = 0;
      const int units[] =
    1b30:	e59fe5bc 	ldr	lr, [pc, #1468]	; 20f4 <STACK_SIZE+0x18f4>
    1b34:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    1b38:	e28dc060 	add	ip, sp, #96	; 0x60
    1b3c:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    1b40:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    1b44:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    1b48:	e89e0003 	ldm	lr, {r0, r1}
    return 1;

  if (number > 0)
    {
      int i;
      int pos = 0;
    1b4c:	e59d300c 	ldr	r3, [sp, #12]
      int digit;
      int digitfound = 0;
      const int units[] =
    1b50:	e88c0003 	stm	ip, {r0, r1}
  if (number > 0)
    {
      int i;
      int pos = 0;
      int digit;
      int digitfound = 0;
    1b54:	e1a02004 	mov	r2, r4
  dhrystone();
}



int dhrystone (void)
    1b58:	e28d105c 	add	r1, sp, #92	; 0x5c
    return 1;

  if (number > 0)
    {
      int i;
      int pos = 0;
    1b5c:	e1a00004 	mov	r0, r4



      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
    1b60:	e5b1c004 	ldr	ip, [r1, #4]!
          digit = 0;

          while (number >= unit)
    1b64:	e15c0003 	cmp	ip, r3
    1b68:	ca0000ba 	bgt	1e58 <STACK_SIZE+0x1658>
    1b6c:	e3a02000 	mov	r2, #0
            {
              digit++;
              number -= unit;
    1b70:	e06c3003 	rsb	r3, ip, r3
      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
          digit = 0;

          while (number >= unit)
    1b74:	e15c0003 	cmp	ip, r3
            {
              digit++;
    1b78:	e2822001 	add	r2, r2, #1
      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
          digit = 0;

          while (number >= unit)
    1b7c:	dafffffb 	ble	1b70 <STACK_SIZE+0x1370>
              digit++;
              number -= unit;
            }

          if (digit != 0) digitfound = 1;
          if (digitfound) str[pos++] = digit + '0' ;
    1b80:	e28d7088 	add	r7, sp, #136	; 0x88
    1b84:	e087c000 	add	ip, r7, r0
    1b88:	e2822030 	add	r2, r2, #48	; 0x30
    1b8c:	e54c2078 	strb	r2, [ip, #-120]	; 0x78
    1b90:	e2800001 	add	r0, r0, #1
    1b94:	e3a02001 	mov	r2, #1
              1};
      int unit;



      for (i = 0; i < 10; ++i)
    1b98:	e59dc004 	ldr	ip, [sp, #4]
    1b9c:	e151000c 	cmp	r1, ip
    1ba0:	1affffee 	bne	1b60 <STACK_SIZE+0x1360>
            }

          if (digit != 0) digitfound = 1;
          if (digitfound) str[pos++] = digit + '0' ;
        }
      str[pos] = '\0';
    1ba4:	e28de088 	add	lr, sp, #136	; 0x88
    1ba8:	e08e3000 	add	r3, lr, r0
    1bac:	e3a05000 	mov	r5, #0
    1bb0:	e5435078 	strb	r5, [r3, #-120]	; 0x78

  puts_UART("Test runned successfully !!!\n");

  puts_UART ("LOOPS: ");
  int_to_a( buffer, loops );
  puts_UART( buffer );
    1bb4:	e28d0010 	add	r0, sp, #16
    1bb8:	eb000285 	bl	25d4 <puts_UART>
  puts_UART ("\n");
    1bbc:	e59f054c 	ldr	r0, [pc, #1356]	; 2110 <STACK_SIZE+0x1910>
    1bc0:	eb000283 	bl	25d4 <puts_UART>

  puts_UART ("TIME : ");
    1bc4:	e59f0550 	ldr	r0, [pc, #1360]	; 211c <STACK_SIZE+0x191c>
    1bc8:	eb000281 	bl	25d4 <puts_UART>
int int_to_a(char * str, int number)
{
  if(str == NULL)
    return 1;

  if (number > 0)
    1bcc:	e59dc008 	ldr	ip, [sp, #8]
    1bd0:	e35c0000 	cmp	ip, #0
    1bd4:	da000116 	ble	2034 <STACK_SIZE+0x1834>
    {
      int i;
      int pos = 0;
      int digit;
      int digitfound = 0;
      const int units[] =
    1bd8:	e59f4514 	ldr	r4, [pc, #1300]	; 20f4 <STACK_SIZE+0x18f4>
    1bdc:	e8b4000f 	ldm	r4!, {r0, r1, r2, r3}
    1be0:	e28de060 	add	lr, sp, #96	; 0x60
    1be4:	e8ae000f 	stmia	lr!, {r0, r1, r2, r3}
    1be8:	e8b4000f 	ldm	r4!, {r0, r1, r2, r3}
    1bec:	e8ae000f 	stmia	lr!, {r0, r1, r2, r3}
    1bf0:	e8940003 	ldm	r4, {r0, r1}
  if (number > 0)
    {
      int i;
      int pos = 0;
      int digit;
      int digitfound = 0;
    1bf4:	e1a02005 	mov	r2, r5
      const int units[] =
    1bf8:	e88e0003 	stm	lr, {r0, r1}
  dhrystone();
}



int dhrystone (void)
    1bfc:	e28d105c 	add	r1, sp, #92	; 0x5c
    return 1;

  if (number > 0)
    {
      int i;
      int pos = 0;
    1c00:	e1a00005 	mov	r0, r5



      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
    1c04:	e5b13004 	ldr	r3, [r1, #4]!
          digit = 0;

          while (number >= unit)
    1c08:	e153000c 	cmp	r3, ip
    1c0c:	ca00008d 	bgt	1e48 <STACK_SIZE+0x1648>
    1c10:	e3a02000 	mov	r2, #0
            {
              digit++;
              number -= unit;
    1c14:	e063c00c 	rsb	ip, r3, ip
      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
          digit = 0;

          while (number >= unit)
    1c18:	e153000c 	cmp	r3, ip
            {
              digit++;
    1c1c:	e2822001 	add	r2, r2, #1
      for (i = 0; i < 10; ++i)
        {
          unit  = units[i];
          digit = 0;

          while (number >= unit)
    1c20:	dafffffb 	ble	1c14 <STACK_SIZE+0x1414>
              digit++;
              number -= unit;
            }

          if (digit != 0) digitfound = 1;
          if (digitfound) str[pos++] = digit + '0' ;
    1c24:	e28d4088 	add	r4, sp, #136	; 0x88
    1c28:	e0843000 	add	r3, r4, r0
    1c2c:	e2822030 	add	r2, r2, #48	; 0x30
    1c30:	e5432078 	strb	r2, [r3, #-120]	; 0x78
    1c34:	e2800001 	add	r0, r0, #1
    1c38:	e3a02001 	mov	r2, #1
              1};
      int unit;



      for (i = 0; i < 10; ++i)
    1c3c:	e59d5004 	ldr	r5, [sp, #4]
    1c40:	e1510005 	cmp	r1, r5
    1c44:	1affffee 	bne	1c04 <STACK_SIZE+0x1404>
            }

          if (digit != 0) digitfound = 1;
          if (digitfound) str[pos++] = digit + '0' ;
        }
      str[pos] = '\0';
    1c48:	e28d7088 	add	r7, sp, #136	; 0x88
    1c4c:	e0870000 	add	r0, r7, r0
    1c50:	e3a03000 	mov	r3, #0
    1c54:	e5403078 	strb	r3, [r0, #-120]	; 0x78
  puts_UART( buffer );
  puts_UART ("\n");

  puts_UART ("TIME : ");
  int_to_a( buffer, ms );
  puts_UART( buffer );
    1c58:	e28d0010 	add	r0, sp, #16
    1c5c:	eb00025c 	bl	25d4 <puts_UART>
  puts_UART ("\n");
    1c60:	e59f04a8 	ldr	r0, [pc, #1192]	; 2110 <STACK_SIZE+0x1910>
    1c64:	eb00025a 	bl	25d4 <puts_UART>

  return 0;
}
    1c68:	e3a00000 	mov	r0, #0
    1c6c:	e28dd08c 	add	sp, sp, #140	; 0x8c
    1c70:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1c74:	e12fff1e 	bx	lr
              digit++;
              number -= unit;
            }

          if (digit != 0) digitfound = 1;
          if (digitfound) str[pos++] = digit + '0' ;
    1c78:	e3510000 	cmp	r1, #0
    1c7c:	0affff90 	beq	1ac4 <STACK_SIZE+0x12c4>
    1c80:	e3a01000 	mov	r1, #0
    1c84:	eaffff88 	b	1aac <STACK_SIZE+0x12ac>
    1c88:	e3510000 	cmp	r1, #0
    1c8c:	0affff41 	beq	1998 <STACK_SIZE+0x1198>
    1c90:	e3a01000 	mov	r1, #0
    1c94:	eaffff39 	b	1980 <STACK_SIZE+0x1180>
    1c98:	e3510000 	cmp	r1, #0
    1c9c:	0afffef3 	beq	1870 <STACK_SIZE+0x1070>
    1ca0:	e3a01000 	mov	r1, #0
    1ca4:	eafffeeb 	b	1858 <STACK_SIZE+0x1058>
    1ca8:	e3510000 	cmp	r1, #0
    1cac:	0afffea2 	beq	173c <STACK_SIZE+0xf3c>
    1cb0:	e3a01000 	mov	r1, #0
    1cb4:	eafffe9a 	b	1724 <STACK_SIZE+0xf24>
    1cb8:	e3510000 	cmp	r1, #0
    1cbc:	0afffe48 	beq	15e4 <STACK_SIZE+0xde4>
    1cc0:	e3a01000 	mov	r1, #0
    1cc4:	eafffe40 	b	15cc <STACK_SIZE+0xdcc>
    1cc8:	e3510000 	cmp	r1, #0
    1ccc:	0afffdf3 	beq	14a0 <STACK_SIZE+0xca0>
    1cd0:	e3a01000 	mov	r1, #0
    1cd4:	eafffdeb 	b	1488 <STACK_SIZE+0xc88>
    1cd8:	e3510000 	cmp	r1, #0
    1cdc:	0afffd36 	beq	11bc <STACK_SIZE+0x9bc>
    1ce0:	e3a01000 	mov	r1, #0
    1ce4:	eafffd2e 	b	11a4 <STACK_SIZE+0x9a4>
    1ce8:	e3510000 	cmp	r1, #0
    1cec:	0afffce2 	beq	107c <STACK_SIZE+0x87c>
    1cf0:	e3a01000 	mov	r1, #0
    1cf4:	eafffcda 	b	1064 <STACK_SIZE+0x864>
    1cf8:	e3510000 	cmp	r1, #0
    1cfc:	0afffc07 	beq	d20 <STACK_SIZE+0x520>
    1d00:	e3a01000 	mov	r1, #0
    1d04:	eafffbff 	b	d08 <STACK_SIZE+0x508>
    1d08:	e3510000 	cmp	r1, #0
    1d0c:	0afffb58 	beq	a74 <STACK_SIZE+0x274>
    1d10:	e3a01000 	mov	r1, #0
    1d14:	eafffb50 	b	a5c <STACK_SIZE+0x25c>
    1d18:	e3510000 	cmp	r1, #0
    1d1c:	0afffb04 	beq	934 <STACK_SIZE+0x134>
    1d20:	e3a01000 	mov	r1, #0
    1d24:	eafffafc 	b	91c <STACK_SIZE+0x11c>
    1d28:	e3520000 	cmp	r2, #0
    1d2c:	0afffcab 	beq	fe0 <STACK_SIZE+0x7e0>
    1d30:	e3a02000 	mov	r2, #0
    1d34:	eafffca3 	b	fc8 <STACK_SIZE+0x7c8>
    1d38:	e3520000 	cmp	r2, #0
    1d3c:	0afffc79 	beq	f28 <STACK_SIZE+0x728>
    1d40:	e3a02000 	mov	r2, #0
    1d44:	eafffc71 	b	f10 <STACK_SIZE+0x710>
    1d48:	e3520000 	cmp	r2, #0
    1d4c:	0afffc49 	beq	e78 <STACK_SIZE+0x678>
    1d50:	e3a02000 	mov	r2, #0
    1d54:	eafffc41 	b	e60 <STACK_SIZE+0x660>
    1d58:	e3550000 	cmp	r5, #0
    1d5c:	0afffc17 	beq	dc0 <STACK_SIZE+0x5c0>
    1d60:	e3a02000 	mov	r2, #0
    1d64:	eafffc0f 	b	da8 <STACK_SIZE+0x5a8>
    1d68:	e35a0000 	cmp	sl, #0
    1d6c:	0afffb19 	beq	9d8 <STACK_SIZE+0x1d8>
    1d70:	e3a02000 	mov	r2, #0
    1d74:	eafffb11 	b	9c0 <STACK_SIZE+0x1c0>
    1d78:	e3520000 	cmp	r2, #0
    1d7c:	0afffac5 	beq	898 <STACK_SIZE+0x98>
    1d80:	e3a02000 	mov	r2, #0
    1d84:	eafffabd 	b	880 <STACK_SIZE+0x80>
    1d88:	e3550000 	cmp	r5, #0
    1d8c:	0afffded 	beq	1548 <STACK_SIZE+0xd48>
    1d90:	e3a02000 	mov	r2, #0
    1d94:	eafffde5 	b	1530 <STACK_SIZE+0xd30>
    1d98:	e3540000 	cmp	r4, #0
    1d9c:	0afffd39 	beq	1288 <STACK_SIZE+0xa88>
    1da0:	e3a02000 	mov	r2, #0
    1da4:	eafffd31 	b	1270 <STACK_SIZE+0xa70>
    1da8:	e3550000 	cmp	r5, #0
    1dac:	0afffcdb 	beq	1120 <STACK_SIZE+0x920>
    1db0:	e3a02000 	mov	r2, #0
    1db4:	eafffcd3 	b	1108 <STACK_SIZE+0x908>
    1db8:	e3550000 	cmp	r5, #0
    1dbc:	0afffbb0 	beq	c84 <STACK_SIZE+0x484>
    1dc0:	e3a02000 	mov	r2, #0
    1dc4:	eafffba9 	b	c70 <STACK_SIZE+0x470>
    1dc8:	e3520000 	cmp	r2, #0
    1dcc:	0afffb7f 	beq	bd0 <STACK_SIZE+0x3d0>
    1dd0:	e3a02000 	mov	r2, #0
    1dd4:	eafffb77 	b	bb8 <STACK_SIZE+0x3b8>
    1dd8:	e35a0000 	cmp	sl, #0
    1ddc:	0afffb4d 	beq	b18 <STACK_SIZE+0x318>
    1de0:	e3a02000 	mov	r2, #0
    1de4:	eafffb45 	b	b00 <STACK_SIZE+0x300>
    1de8:	e3520000 	cmp	r2, #0
    1dec:	0afffe7a 	beq	17dc <STACK_SIZE+0xfdc>
    1df0:	e3a02000 	mov	r2, #0
    1df4:	eafffe72 	b	17c4 <STACK_SIZE+0xfc4>
    1df8:	e3540000 	cmp	r4, #0
    1dfc:	0afffe27 	beq	16a0 <STACK_SIZE+0xea0>
    1e00:	e3a02000 	mov	r2, #0
    1e04:	eafffe1f 	b	1688 <STACK_SIZE+0xe88>
    1e08:	e3550000 	cmp	r5, #0
    1e0c:	0afffd7c 	beq	1404 <STACK_SIZE+0xc04>
    1e10:	e3a02000 	mov	r2, #0
    1e14:	eafffd75 	b	13f0 <STACK_SIZE+0xbf0>
    1e18:	e3520000 	cmp	r2, #0
    1e1c:	0afffd46 	beq	133c <STACK_SIZE+0xb3c>
    1e20:	e3a02000 	mov	r2, #0
    1e24:	eafffd3e 	b	1324 <STACK_SIZE+0xb24>
    1e28:	e3520000 	cmp	r2, #0
    1e2c:	0afffeff 	beq	1a30 <STACK_SIZE+0x1230>
    1e30:	e3a02000 	mov	r2, #0
    1e34:	eafffef7 	b	1a18 <STACK_SIZE+0x1218>
    1e38:	e3510000 	cmp	r1, #0
    1e3c:	0afffeb0 	beq	1904 <STACK_SIZE+0x1104>
    1e40:	e3a01000 	mov	r1, #0
    1e44:	eafffea8 	b	18ec <STACK_SIZE+0x10ec>
    1e48:	e3520000 	cmp	r2, #0
    1e4c:	0affff7a 	beq	1c3c <STACK_SIZE+0x143c>
    1e50:	e3a02000 	mov	r2, #0
    1e54:	eaffff72 	b	1c24 <STACK_SIZE+0x1424>
    1e58:	e3520000 	cmp	r2, #0
    1e5c:	0affff4d 	beq	1b98 <STACK_SIZE+0x1398>
    1e60:	e3a02000 	mov	r2, #0
    1e64:	eaffff45 	b	1b80 <STACK_SIZE+0x1380>
        }
      str[pos] = '\0';
    }
  else if (number == 0)
    1e68:	1a00004b 	bne	1f9c <STACK_SIZE+0x179c>
    {
      str[0] = '0';
    1e6c:	e3a03030 	mov	r3, #48	; 0x30
    1e70:	e5cd3010 	strb	r3, [sp, #16]
      str[1] = '\0';
    1e74:	e5cdc011 	strb	ip, [sp, #17]
    1e78:	eafffe5e 	b	17f8 <STACK_SIZE+0xff8>
          if (digit != 0) digitfound = 1;
          if (digitfound) str[pos++] = digit + '0' ;
        }
      str[pos] = '\0';
    }
  else if (number == 0)
    1e7c:	1a000064 	bne	2014 <STACK_SIZE+0x1814>
    {
      str[0] = '0';
    1e80:	e3a03030 	mov	r3, #48	; 0x30
    1e84:	e5cd3010 	strb	r3, [sp, #16]
      str[1] = '\0';
    1e88:	e5cdb011 	strb	fp, [sp, #17]
    1e8c:	eafffe0a 	b	16bc <STACK_SIZE+0xebc>
          if (digit != 0) digitfound = 1;
          if (digitfound) str[pos++] = digit + '0' ;
        }
      str[pos] = '\0';
    }
  else if (number == 0)
    1e90:	1a000057 	bne	1ff4 <STACK_SIZE+0x17f4>
    {
      str[0] = '0';
    1e94:	e3a03030 	mov	r3, #48	; 0x30
    1e98:	e5cd3010 	strb	r3, [sp, #16]
      str[1] = '\0';
    1e9c:	e5cde011 	strb	lr, [sp, #17]
    1ea0:	eafffdaf 	b	1564 <STACK_SIZE+0xd64>
          if (digit != 0) digitfound = 1;
          if (digitfound) str[pos++] = digit + '0' ;
        }
      str[pos] = '\0';
    }
  else if (number == 0)
    1ea4:	1a00004a 	bne	1fd4 <STACK_SIZE+0x17d4>
    {
      str[0] = '0';
    1ea8:	e3a03030 	mov	r3, #48	; 0x30
    1eac:	e5cd3010 	strb	r3, [sp, #16]
      str[1] = '\0';
    1eb0:	e5cde011 	strb	lr, [sp, #17]
    1eb4:	eafffcfa 	b	12a4 <STACK_SIZE+0xaa4>
          if (digit != 0) digitfound = 1;
          if (digitfound) str[pos++] = digit + '0' ;
        }
      str[pos] = '\0';
    }
  else if (number == 0)
    1eb8:	1a00003d 	bne	1fb4 <STACK_SIZE+0x17b4>
    {
      str[0] = '0';
    1ebc:	e3a03030 	mov	r3, #48	; 0x30
    1ec0:	e5cd3010 	strb	r3, [sp, #16]
      str[1] = '\0';
    1ec4:	e5cde011 	strb	lr, [sp, #17]
    1ec8:	eafffc9b 	b	113c <STACK_SIZE+0x93c>
          if (digit != 0) digitfound = 1;
          if (digitfound) str[pos++] = digit + '0' ;
        }
      str[pos] = '\0';
    }
  else if (number == 0)
    1ecc:	1a00007f 	bne	20d0 <STACK_SIZE+0x18d0>
    {
      str[0] = '0';
    1ed0:	e3a03030 	mov	r3, #48	; 0x30
    1ed4:	e5cd3010 	strb	r3, [sp, #16]
      str[1] = '\0';
    1ed8:	e5cde011 	strb	lr, [sp, #17]
    1edc:	eafffbec 	b	e94 <STACK_SIZE+0x694>
          if (digit != 0) digitfound = 1;
          if (digitfound) str[pos++] = digit + '0' ;
        }
      str[pos] = '\0';
    }
  else if (number == 0)
    1ee0:	1a000072 	bne	20b0 <STACK_SIZE+0x18b0>
    {
      str[0] = '0';
    1ee4:	e3a03030 	mov	r3, #48	; 0x30
    1ee8:	e5cd3010 	strb	r3, [sp, #16]
      str[1] = '\0';
    1eec:	e5cde011 	strb	lr, [sp, #17]
    1ef0:	eafffbb9 	b	ddc <STACK_SIZE+0x5dc>
          if (digit != 0) digitfound = 1;
          if (digitfound) str[pos++] = digit + '0' ;
        }
      str[pos] = '\0';
    }
  else if (number == 0)
    1ef4:	1a000065 	bne	2090 <STACK_SIZE+0x1890>
    {
      str[0] = '0';
    1ef8:	e3a03030 	mov	r3, #48	; 0x30
    1efc:	e5cd3010 	strb	r3, [sp, #16]
      str[1] = '\0';
    1f00:	e5cde011 	strb	lr, [sp, #17]
    1f04:	eafffb65 	b	ca0 <STACK_SIZE+0x4a0>
          if (digit != 0) digitfound = 1;
          if (digitfound) str[pos++] = digit + '0' ;
        }
      str[pos] = '\0';
    }
  else if (number == 0)
    1f08:	1a000058 	bne	2070 <STACK_SIZE+0x1870>
    {
      str[0] = '0';
    1f0c:	e3a03030 	mov	r3, #48	; 0x30
    1f10:	e5cd3010 	strb	r3, [sp, #16]
      str[1] = '\0';
    1f14:	e5cde011 	strb	lr, [sp, #17]
    1f18:	eafffab5 	b	9f4 <STACK_SIZE+0x1f4>
          if (digit != 0) digitfound = 1;
          if (digitfound) str[pos++] = digit + '0' ;
        }
      str[pos] = '\0';
    }
  else if (number == 0)
    1f1c:	1a00004b 	bne	2050 <STACK_SIZE+0x1850>
    {
      str[0] = '0';
    1f20:	e3a03030 	mov	r3, #48	; 0x30
    1f24:	e5cd3010 	strb	r3, [sp, #16]
      str[1] = '\0';
    1f28:	e5cde011 	strb	lr, [sp, #17]
    1f2c:	eafffa60 	b	8b4 <STACK_SIZE+0xb4>
        }
      str[pos] = '\0';
    }
  else if (number == 0)
    {
      str[0] = '0';
    1f30:	e3a03030 	mov	r3, #48	; 0x30
    1f34:	e5cd3010 	strb	r3, [sp, #16]
      str[1] = '\0';
    1f38:	e5cde011 	strb	lr, [sp, #17]
    1f3c:	eafffafc 	b	b34 <STACK_SIZE+0x334>
        }
      str[pos] = '\0';
    }
  else if (number == 0)
    {
      str[0] = '0';
    1f40:	e3a03030 	mov	r3, #48	; 0x30
    1f44:	e5cd3010 	strb	r3, [sp, #16]
      str[1] = '\0';
    1f48:	e5cd6011 	strb	r6, [sp, #17]
    1f4c:	eafffebe 	b	1a4c <STACK_SIZE+0x124c>
        }
      str[pos] = '\0';
    }
  else if (number == 0)
    {
      str[0] = '0';
    1f50:	e3a03030 	mov	r3, #48	; 0x30
    1f54:	e5cd3010 	strb	r3, [sp, #16]
      str[1] = '\0';
    1f58:	e5cde011 	strb	lr, [sp, #17]
    1f5c:	eafffb22 	b	bec <STACK_SIZE+0x3ec>
        }
      str[pos] = '\0';
    }
  else if (number == 0)
    {
      str[0] = '0';
    1f60:	e5cd4010 	strb	r4, [sp, #16]
      str[1] = '\0';
    1f64:	e5cde011 	strb	lr, [sp, #17]
    1f68:	eafffd2c 	b	1420 <STACK_SIZE+0xc20>
        }
      str[pos] = '\0';
    }
  else if (number == 0)
    {
      str[0] = '0';
    1f6c:	e3a03030 	mov	r3, #48	; 0x30
    1f70:	e5cd3010 	strb	r3, [sp, #16]
      str[1] = '\0';
    1f74:	e5cde011 	strb	lr, [sp, #17]
    1f78:	eafffcf6 	b	1358 <STACK_SIZE+0xb58>
        }
      str[pos] = '\0';
    }
  else if (number == 0)
    {
      str[0] = '0';
    1f7c:	e3a03030 	mov	r3, #48	; 0x30
    1f80:	e5cd3010 	strb	r3, [sp, #16]
      str[1] = '\0';
    1f84:	e5cde011 	strb	lr, [sp, #17]
    1f88:	eafffc1b 	b	ffc <STACK_SIZE+0x7fc>
        }
      str[pos] = '\0';
    }
  else if (number == 0)
    {
      str[0] = '0';
    1f8c:	e3a03030 	mov	r3, #48	; 0x30
    1f90:	e5cd3010 	strb	r3, [sp, #16]
      str[1] = '\0';
    1f94:	e5cde011 	strb	lr, [sp, #17]
    1f98:	eafffbe9 	b	f44 <STACK_SIZE+0x744>
    }
  else
    {
      str[0] = '-';
    1f9c:	e3a0302d 	mov	r3, #45	; 0x2d
      int_to_a(str+1, -number);
    1fa0:	e28d0011 	add	r0, sp, #17
    1fa4:	e26c1000 	rsb	r1, ip, #0
      str[0] = '0';
      str[1] = '\0';
    }
  else
    {
      str[0] = '-';
    1fa8:	e5cd3010 	strb	r3, [sp, #16]
      int_to_a(str+1, -number);
    1fac:	ebfff88c 	bl	1e4 <int_to_a>
    1fb0:	eafffe10 	b	17f8 <STACK_SIZE+0xff8>
      str[0] = '0';
      str[1] = '\0';
    }
  else
    {
      str[0] = '-';
    1fb4:	e3a0302d 	mov	r3, #45	; 0x2d
      int_to_a(str+1, -number);
    1fb8:	e28d0011 	add	r0, sp, #17
    1fbc:	e26e1000 	rsb	r1, lr, #0
    1fc0:	e58dc000 	str	ip, [sp]
      str[0] = '0';
      str[1] = '\0';
    }
  else
    {
      str[0] = '-';
    1fc4:	e5cd3010 	strb	r3, [sp, #16]
      int_to_a(str+1, -number);
    1fc8:	ebfff885 	bl	1e4 <int_to_a>
    1fcc:	e59dc000 	ldr	ip, [sp]
    1fd0:	eafffc59 	b	113c <STACK_SIZE+0x93c>
      str[0] = '0';
      str[1] = '\0';
    }
  else
    {
      str[0] = '-';
    1fd4:	e3a0302d 	mov	r3, #45	; 0x2d
      int_to_a(str+1, -number);
    1fd8:	e28d0011 	add	r0, sp, #17
    1fdc:	e26e1000 	rsb	r1, lr, #0
    1fe0:	e58dc000 	str	ip, [sp]
      str[0] = '0';
      str[1] = '\0';
    }
  else
    {
      str[0] = '-';
    1fe4:	e5cd3010 	strb	r3, [sp, #16]
      int_to_a(str+1, -number);
    1fe8:	ebfff87d 	bl	1e4 <int_to_a>
    1fec:	e59dc000 	ldr	ip, [sp]
    1ff0:	eafffcab 	b	12a4 <STACK_SIZE+0xaa4>
      str[0] = '0';
      str[1] = '\0';
    }
  else
    {
      str[0] = '-';
    1ff4:	e3a0302d 	mov	r3, #45	; 0x2d
      int_to_a(str+1, -number);
    1ff8:	e28d0011 	add	r0, sp, #17
    1ffc:	e26e1000 	rsb	r1, lr, #0
    2000:	e58dc000 	str	ip, [sp]
      str[0] = '0';
      str[1] = '\0';
    }
  else
    {
      str[0] = '-';
    2004:	e5cd3010 	strb	r3, [sp, #16]
      int_to_a(str+1, -number);
    2008:	ebfff875 	bl	1e4 <int_to_a>
    200c:	e59dc000 	ldr	ip, [sp]
    2010:	eafffd53 	b	1564 <STACK_SIZE+0xd64>
      str[0] = '0';
      str[1] = '\0';
    }
  else
    {
      str[0] = '-';
    2014:	e3a0302d 	mov	r3, #45	; 0x2d
      int_to_a(str+1, -number);
    2018:	e28d0011 	add	r0, sp, #17
    201c:	e26b1000 	rsb	r1, fp, #0
    2020:	e58dc000 	str	ip, [sp]
      str[0] = '0';
      str[1] = '\0';
    }
  else
    {
      str[0] = '-';
    2024:	e5cd3010 	strb	r3, [sp, #16]
      int_to_a(str+1, -number);
    2028:	ebfff86d 	bl	1e4 <int_to_a>
    202c:	e59dc000 	ldr	ip, [sp]
    2030:	eafffda1 	b	16bc <STACK_SIZE+0xebc>
    2034:	e59dc008 	ldr	ip, [sp, #8]
      str[0] = '0';
      str[1] = '\0';
    }
  else
    {
      str[0] = '-';
    2038:	e3a0302d 	mov	r3, #45	; 0x2d
      int_to_a(str+1, -number);
    203c:	e28d0011 	add	r0, sp, #17
    2040:	e26c1000 	rsb	r1, ip, #0
      str[0] = '0';
      str[1] = '\0';
    }
  else
    {
      str[0] = '-';
    2044:	e5cd3010 	strb	r3, [sp, #16]
      int_to_a(str+1, -number);
    2048:	ebfff865 	bl	1e4 <int_to_a>
    204c:	eaffff01 	b	1c58 <STACK_SIZE+0x1458>
      str[0] = '0';
      str[1] = '\0';
    }
  else
    {
      str[0] = '-';
    2050:	e3a0302d 	mov	r3, #45	; 0x2d
      int_to_a(str+1, -number);
    2054:	e28d0011 	add	r0, sp, #17
    2058:	e26e1000 	rsb	r1, lr, #0
    205c:	e58dc000 	str	ip, [sp]
      str[0] = '0';
      str[1] = '\0';
    }
  else
    {
      str[0] = '-';
    2060:	e5cd3010 	strb	r3, [sp, #16]
      int_to_a(str+1, -number);
    2064:	ebfff85e 	bl	1e4 <int_to_a>
    2068:	e59dc000 	ldr	ip, [sp]
    206c:	eafffa10 	b	8b4 <STACK_SIZE+0xb4>
      str[0] = '0';
      str[1] = '\0';
    }
  else
    {
      str[0] = '-';
    2070:	e3a0302d 	mov	r3, #45	; 0x2d
      int_to_a(str+1, -number);
    2074:	e28d0011 	add	r0, sp, #17
    2078:	e26e1000 	rsb	r1, lr, #0
    207c:	e58dc000 	str	ip, [sp]
      str[0] = '0';
      str[1] = '\0';
    }
  else
    {
      str[0] = '-';
    2080:	e5cd3010 	strb	r3, [sp, #16]
      int_to_a(str+1, -number);
    2084:	ebfff856 	bl	1e4 <int_to_a>
    2088:	e59dc000 	ldr	ip, [sp]
    208c:	eafffa58 	b	9f4 <STACK_SIZE+0x1f4>
      str[0] = '0';
      str[1] = '\0';
    }
  else
    {
      str[0] = '-';
    2090:	e3a0302d 	mov	r3, #45	; 0x2d
      int_to_a(str+1, -number);
    2094:	e28d0011 	add	r0, sp, #17
    2098:	e26e1000 	rsb	r1, lr, #0
    209c:	e58dc000 	str	ip, [sp]
      str[0] = '0';
      str[1] = '\0';
    }
  else
    {
      str[0] = '-';
    20a0:	e5cd3010 	strb	r3, [sp, #16]
      int_to_a(str+1, -number);
    20a4:	ebfff84e 	bl	1e4 <int_to_a>
    20a8:	e59dc000 	ldr	ip, [sp]
    20ac:	eafffafb 	b	ca0 <STACK_SIZE+0x4a0>
      str[0] = '0';
      str[1] = '\0';
    }
  else
    {
      str[0] = '-';
    20b0:	e3a0302d 	mov	r3, #45	; 0x2d
      int_to_a(str+1, -number);
    20b4:	e28d0011 	add	r0, sp, #17
    20b8:	e26e1000 	rsb	r1, lr, #0
    20bc:	e58dc000 	str	ip, [sp]
      str[0] = '0';
      str[1] = '\0';
    }
  else
    {
      str[0] = '-';
    20c0:	e5cd3010 	strb	r3, [sp, #16]
      int_to_a(str+1, -number);
    20c4:	ebfff846 	bl	1e4 <int_to_a>
    20c8:	e59dc000 	ldr	ip, [sp]
    20cc:	eafffb42 	b	ddc <STACK_SIZE+0x5dc>
      str[0] = '0';
      str[1] = '\0';
    }
  else
    {
      str[0] = '-';
    20d0:	e3a0302d 	mov	r3, #45	; 0x2d
      int_to_a(str+1, -number);
    20d4:	e28d0011 	add	r0, sp, #17
    20d8:	e26e1000 	rsb	r1, lr, #0
    20dc:	e58dc000 	str	ip, [sp]
      str[0] = '0';
      str[1] = '\0';
    }
  else
    {
      str[0] = '-';
    20e0:	e5cd3010 	strb	r3, [sp, #16]
      int_to_a(str+1, -number);
    20e4:	ebfff83e 	bl	1e4 <int_to_a>
    20e8:	e59dc000 	ldr	ip, [sp]
    20ec:	eafffb68 	b	e94 <STACK_SIZE+0x694>
    20f0:	00004c0c 	.word	0x00004c0c
    20f4:	00004b04 	.word	0x00004b04
    20f8:	00004e90 	.word	0x00004e90
    20fc:	00004eac 	.word	0x00004eac
    2100:	00004ec8 	.word	0x00004ec8
    2104:	00004ee4 	.word	0x00004ee4
    2108:	00004f1c 	.word	0x00004f1c
    210c:	00004f38 	.word	0x00004f38
    2110:	00004f8c 	.word	0x00004f8c
    2114:	00004f70 	.word	0x00004f70
    2118:	00004f90 	.word	0x00004f90
    211c:	00004f98 	.word	0x00004f98

00002120 <start_benchmark>:



void start_benchmark(void)
{
  dhrystone();
    2120:	eafff8b0 	b	3e8 <dhrystone>

00002124 <Proc_2>:
  One_Fifty  Int_Loc;
  Enumeration   Enum_Loc;

  Int_Loc = *Int_Par_Ref + 10;
  do /* executed once */
    if (Ch_1_Glob == 'A')
    2124:	e59f3020 	ldr	r3, [pc, #32]	; 214c <Proc_2+0x28>
    2128:	e5d33000 	ldrb	r3, [r3]
    212c:	e3530041 	cmp	r3, #65	; 0x41
      /* then, executed */
      {
        Int_Loc -= 1;
        *Int_Par_Ref = Int_Loc - Int_Glob;
    2130:	059f2018 	ldreq	r2, [pc, #24]	; 2150 <Proc_2+0x2c>
/* *Int_Par_Ref == 1, becomes 4 */
{
  One_Fifty  Int_Loc;
  Enumeration   Enum_Loc;

  Int_Loc = *Int_Par_Ref + 10;
    2134:	e5903000 	ldr	r3, [r0]
  do /* executed once */
    if (Ch_1_Glob == 'A')
      /* then, executed */
      {
        Int_Loc -= 1;
        *Int_Par_Ref = Int_Loc - Int_Glob;
    2138:	05922000 	ldreq	r2, [r2]
  Int_Loc = *Int_Par_Ref + 10;
  do /* executed once */
    if (Ch_1_Glob == 'A')
      /* then, executed */
      {
        Int_Loc -= 1;
    213c:	02833009 	addeq	r3, r3, #9
        *Int_Par_Ref = Int_Loc - Int_Glob;
    2140:	00623003 	rsbeq	r3, r2, r3
    2144:	05803000 	streq	r3, [r0]
    2148:	e12fff1e 	bx	lr
    214c:	40003248 	.word	0x40003248
    2150:	40003244 	.word	0x40003244

00002154 <Proc_3>:
void Proc_3 (Rec_Pointer *Ptr_Ref_Par)
/******************/
/* executed once */
/* Ptr_Ref_Par becomes Ptr_Glob */
{
  if (Ptr_Glob != NULL)
    2154:	e59f2024 	ldr	r2, [pc, #36]	; 2180 <Proc_3+0x2c>
    2158:	e5923000 	ldr	r3, [r2]
    215c:	e3530000 	cmp	r3, #0
    /* then, executed */
    *Ptr_Ref_Par = Ptr_Glob->Ptr_Comp;
    2160:	15933000 	ldrne	r3, [r3]
    2164:	15803000 	strne	r3, [r0]
    2168:	15923000 	ldrne	r3, [r2]
/*                  Int_Par_Ref becomes 18                   */
{
  One_Fifty Int_Loc;

  Int_Loc = Int_1_Par_Val + 2;
  *Int_Par_Ref = Int_2_Par_Val + Int_Loc;
    216c:	e59f2010 	ldr	r2, [pc, #16]	; 2184 <Proc_3+0x30>
    2170:	e5922000 	ldr	r2, [r2]
    2174:	e282200c 	add	r2, r2, #12
    2178:	e583200c 	str	r2, [r3, #12]
    217c:	e12fff1e 	bx	lr
    2180:	4000324c 	.word	0x4000324c
    2184:	40003244 	.word	0x40003244

00002188 <Proc_4>:
/* executed once */
{
  Boolean Bool_Loc;

  Bool_Loc = Ch_1_Glob == 'A';
  Bool_Glob = Bool_Loc | Bool_Glob;
    2188:	e59f3024 	ldr	r3, [pc, #36]	; 21b4 <Proc_4+0x2c>
/*******/
/* executed once */
{
  Boolean Bool_Loc;

  Bool_Loc = Ch_1_Glob == 'A';
    218c:	e59f1024 	ldr	r1, [pc, #36]	; 21b8 <Proc_4+0x30>
  Bool_Glob = Bool_Loc | Bool_Glob;
    2190:	e5932000 	ldr	r2, [r3]
/*******/
/* executed once */
{
  Boolean Bool_Loc;

  Bool_Loc = Ch_1_Glob == 'A';
    2194:	e5d11000 	ldrb	r1, [r1]
  Bool_Glob = Bool_Loc | Bool_Glob;
    2198:	e3510041 	cmp	r1, #65	; 0x41
    219c:	03822001 	orreq	r2, r2, #1
    21a0:	e5832000 	str	r2, [r3]
  Ch_2_Glob = 'B';
    21a4:	e59f3010 	ldr	r3, [pc, #16]	; 21bc <Proc_4+0x34>
    21a8:	e3a02042 	mov	r2, #66	; 0x42
    21ac:	e5c32000 	strb	r2, [r3]
    21b0:	e12fff1e 	bx	lr
    21b4:	40003318 	.word	0x40003318
    21b8:	40003248 	.word	0x40003248
    21bc:	40003249 	.word	0x40003249

000021c0 <Proc_5>:

void Proc_5 (void) /* without parameters */
/*******/
/* executed once */
{
  Ch_1_Glob = 'A';
    21c0:	e59f3014 	ldr	r3, [pc, #20]	; 21dc <Proc_5+0x1c>
    21c4:	e3a02041 	mov	r2, #65	; 0x41
    21c8:	e5c32000 	strb	r2, [r3]
  Bool_Glob = false;
    21cc:	e59f300c 	ldr	r3, [pc, #12]	; 21e0 <Proc_5+0x20>
    21d0:	e3a02000 	mov	r2, #0
    21d4:	e5832000 	str	r2, [r3]
    21d8:	e12fff1e 	bx	lr
    21dc:	40003248 	.word	0x40003248
    21e0:	40003318 	.word	0x40003318

000021e4 <Proc_6>:
/* Enum_Par_Val == Ident_3 */
{
  Enumeration Enum_Loc;

  Enum_Loc = Enum_Par_Val;
  if (Enum_Loc == Ident_3)
    21e4:	e3500002 	cmp	r0, #2
void Proc_6 (Enumeration Enum_Val_Par, Enumeration *Enum_Ref_Par)
/*********************************/
/* executed once */
/* Enum_Val_Par == Ident_3, Enum_Ref_Par becomes Ident_2 */
{
  *Enum_Ref_Par = Enum_Val_Par;
    21e8:	e5c10000 	strb	r0, [r1]
/* Enum_Par_Val == Ident_3 */
{
  Enumeration Enum_Loc;

  Enum_Loc = Enum_Par_Val;
  if (Enum_Loc == Ident_3)
    21ec:	0a000013 	beq	2240 <Proc_6+0x5c>
    21f0:	e3a03003 	mov	r3, #3
    21f4:	e5c13000 	strb	r3, [r1]
{
  *Enum_Ref_Par = Enum_Val_Par;
  if (! Func_3 (Enum_Val_Par))
    /* then, not executed */
    *Enum_Ref_Par = Ident_4;
  switch (Enum_Val_Par)
    21f8:	e3500004 	cmp	r0, #4
    21fc:	979ff100 	ldrls	pc, [pc, r0, lsl #2]
    2200:	ea000006 	b	2220 <Proc_6+0x3c>
    2204:	00002234 	.word	0x00002234
    2208:	00002224 	.word	0x00002224
    220c:	00002240 	.word	0x00002240
    2210:	00002220 	.word	0x00002220
    2214:	00002218 	.word	0x00002218
    *Enum_Ref_Par = Ident_2;
    break;
  case Ident_4:
    break;
  case Ident_5:
    *Enum_Ref_Par = Ident_3;
    2218:	e3a03002 	mov	r3, #2
    221c:	e5c13000 	strb	r3, [r1]
    2220:	e12fff1e 	bx	lr
  {
  case Ident_1:
    *Enum_Ref_Par = Ident_1;
    break;
  case Ident_2:
    if (Int_Glob > 100)
    2224:	e59f3020 	ldr	r3, [pc, #32]	; 224c <Proc_6+0x68>
    2228:	e5933000 	ldr	r3, [r3]
    222c:	e3530064 	cmp	r3, #100	; 0x64
    2230:	d12fff1e 	bxle	lr
      *Enum_Ref_Par = Ident_1;
    2234:	e3a03000 	mov	r3, #0
    2238:	e5c13000 	strb	r3, [r1]
    223c:	e12fff1e 	bx	lr
    else
      *Enum_Ref_Par = Ident_4;
    break;
  case Ident_3: /* executed */
    *Enum_Ref_Par = Ident_2;
    2240:	e3a03001 	mov	r3, #1
    2244:	e5c13000 	strb	r3, [r1]
    break;
    2248:	e12fff1e 	bx	lr
    224c:	40003244 	.word	0x40003244

00002250 <Proc_7>:
/* third call:      Int_1_Par_Val == 6, Int_2_Par_Val == 10, */
/*                  Int_Par_Ref becomes 18                   */
{
  One_Fifty Int_Loc;

  Int_Loc = Int_1_Par_Val + 2;
    2250:	e2800002 	add	r0, r0, #2
  *Int_Par_Ref = Int_2_Par_Val + Int_Loc;
    2254:	e0811000 	add	r1, r1, r0
    2258:	e5821000 	str	r1, [r2]
    225c:	e12fff1e 	bx	lr

00002260 <Proc_8>:
/* Int_Par_Val_2 == 7 */
{
  REG One_Fifty Int_Index;
  REG One_Fifty Int_Loc;

  Int_Loc = Int_1_Par_Val + 5;
    2260:	e282c005 	add	ip, r2, #5
    int Int_2_Par_Val)
/*********************************************************************/
/* executed once      */
/* Int_Par_Val_1 == 3 */
/* Int_Par_Val_2 == 7 */
{
    2264:	e92d0030 	push	{r4, r5}
  Int_Loc = Int_1_Par_Val + 5;
  Arr_1_Par_Ref [Int_Loc] = Int_2_Par_Val;
  Arr_1_Par_Ref [Int_Loc+1] = Arr_1_Par_Ref [Int_Loc];
  Arr_1_Par_Ref [Int_Loc+30] = Int_Loc;
  for (Int_Index = Int_Loc; Int_Index <= Int_Loc+1; ++Int_Index)
    Arr_2_Par_Ref [Int_Loc] [Int_Index] = Int_Loc;
    2268:	e08c410c 	add	r4, ip, ip, lsl #2
    226c:	e0844104 	add	r4, r4, r4, lsl #2
    2270:	e0811184 	add	r1, r1, r4, lsl #3
  REG One_Fifty Int_Loc;

  Int_Loc = Int_1_Par_Val + 5;
  Arr_1_Par_Ref [Int_Loc] = Int_2_Par_Val;
  Arr_1_Par_Ref [Int_Loc+1] = Arr_1_Par_Ref [Int_Loc];
  Arr_1_Par_Ref [Int_Loc+30] = Int_Loc;
    2274:	e2825023 	add	r5, r2, #35	; 0x23
  REG One_Fifty Int_Index;
  REG One_Fifty Int_Loc;

  Int_Loc = Int_1_Par_Val + 5;
  Arr_1_Par_Ref [Int_Loc] = Int_2_Par_Val;
  Arr_1_Par_Ref [Int_Loc+1] = Arr_1_Par_Ref [Int_Loc];
    2278:	e2824006 	add	r4, r2, #6
{
  REG One_Fifty Int_Index;
  REG One_Fifty Int_Loc;

  Int_Loc = Int_1_Par_Val + 5;
  Arr_1_Par_Ref [Int_Loc] = Int_2_Par_Val;
    227c:	e780310c 	str	r3, [r0, ip, lsl #2]
  Arr_1_Par_Ref [Int_Loc+1] = Arr_1_Par_Ref [Int_Loc];
    2280:	e7803104 	str	r3, [r0, r4, lsl #2]
  Arr_1_Par_Ref [Int_Loc+30] = Int_Loc;
    2284:	e780c105 	str	ip, [r0, r5, lsl #2]
  for (Int_Index = Int_Loc; Int_Index <= Int_Loc+1; ++Int_Index)
    Arr_2_Par_Ref [Int_Loc] [Int_Index] = Int_Loc;
    2288:	e781c10c 	str	ip, [r1, ip, lsl #2]
    228c:	e781c104 	str	ip, [r1, r4, lsl #2]
  Arr_2_Par_Ref [Int_Loc] [Int_Loc-1] += 1;
    2290:	e2822004 	add	r2, r2, #4
    2294:	e7913102 	ldr	r3, [r1, r2, lsl #2]
    2298:	e2833001 	add	r3, r3, #1
    229c:	e7813102 	str	r3, [r1, r2, lsl #2]
  Arr_2_Par_Ref [Int_Loc+20] [Int_Loc] = Arr_1_Par_Ref [Int_Loc];
    22a0:	e790310c 	ldr	r3, [r0, ip, lsl #2]
    22a4:	e2811efa 	add	r1, r1, #4000	; 0xfa0
    22a8:	e781310c 	str	r3, [r1, ip, lsl #2]
  Int_Glob = 5;
    22ac:	e59f300c 	ldr	r3, [pc, #12]	; 22c0 <Proc_8+0x60>
    22b0:	e3a02005 	mov	r2, #5
    22b4:	e5832000 	str	r2, [r3]
} /* Proc_8 */
    22b8:	e8bd0030 	pop	{r4, r5}
    22bc:	e12fff1e 	bx	lr
    22c0:	40003244 	.word	0x40003244

000022c4 <Func_1>:
  Capital_Letter        Ch_1_Loc;
  Capital_Letter        Ch_2_Loc;

  Ch_1_Loc = Ch_1_Par_Val;
  Ch_2_Loc = Ch_1_Loc;
  if (Ch_2_Loc != Ch_2_Par_Val)
    22c4:	e1500001 	cmp	r0, r1
    /* then, executed */
    return (Ident_1);
  else  /* not executed */
    {
      Ch_1_Glob = Ch_1_Loc;
    22c8:	059f2010 	ldreq	r2, [pc, #16]	; 22e0 <Func_1+0x1c>
/*************************************************/
/* executed three times                                         */
/* first call:      Ch_1_Par_Val == 'H', Ch_2_Par_Val == 'R'    */
/* second call:     Ch_1_Par_Val == 'A', Ch_2_Par_Val == 'C'    */
/* third call:      Ch_1_Par_Val == 'B', Ch_2_Par_Val == 'C'    */
{
    22cc:	e1a03000 	mov	r3, r0
  if (Ch_2_Loc != Ch_2_Par_Val)
    /* then, executed */
    return (Ident_1);
  else  /* not executed */
    {
      Ch_1_Glob = Ch_1_Loc;
    22d0:	05c23000 	strbeq	r3, [r2]
      return (Ident_2);
    22d4:	03a00001 	moveq	r0, #1

  Ch_1_Loc = Ch_1_Par_Val;
  Ch_2_Loc = Ch_1_Loc;
  if (Ch_2_Loc != Ch_2_Par_Val)
    /* then, executed */
    return (Ident_1);
    22d8:	13a00000 	movne	r0, #0
  else  /* not executed */
    {
      Ch_1_Glob = Ch_1_Loc;
      return (Ident_2);
    }
} /* Func_1 */
    22dc:	e12fff1e 	bx	lr
    22e0:	40003248 	.word	0x40003248

000022e4 <Func_2>:
Boolean Func_2 (Str_30  Str_1_Par_Ref, Str_30  Str_2_Par_Ref)
/*************************************************/
/* executed once */
/* Str_1_Par_Ref == "DHRYSTONE PROGRAM, 1'ST STRING" */
/* Str_2_Par_Ref == "DHRYSTONE PROGRAM, 2'ND STRING" */
{
    22e4:	e92d4008 	push	{r3, lr}
    22e8:	e5d02002 	ldrb	r2, [r0, #2]
    22ec:	e5d13003 	ldrb	r3, [r1, #3]
    22f0:	e1520003 	cmp	r2, r3
    22f4:	0a000008 	beq	231c <Func_2+0x38>
  if (Ch_Loc == 'R')
    /* then, not executed */
    return (true);
  else /* executed */
    {
      if (strcmp (Str_1_Par_Ref, Str_2_Par_Ref) > 0)
    22f8:	eb000329 	bl	2fa4 <strcmp>
    22fc:	e3500000 	cmp	r0, #0
        /* then, not executed */
        {
          Int_Loc += 7;
          Int_Glob = Int_Loc;
    2300:	c59f3018 	ldrgt	r3, [pc, #24]	; 2320 <Func_2+0x3c>
    2304:	c3a0200a 	movgt	r2, #10
    2308:	c5832000 	strgt	r2, [r3]
          return (true);
    230c:	c3a00001 	movgt	r0, #1
        }
      else /* executed */
        return (false);
    2310:	d3a00000 	movle	r0, #0
    } /* if Ch_Loc */
} /* Func_2 */
    2314:	e8bd4008 	pop	{r3, lr}
    2318:	e12fff1e 	bx	lr
    231c:	eafffffe 	b	231c <Func_2+0x38>
    2320:	40003244 	.word	0x40003244

00002324 <Func_3>:
  if (Enum_Loc == Ident_3)
    /* then, executed */
    return (true);
  else /* not executed */
    return (false);
} /* Func_3 */
    2324:	e2503002 	subs	r3, r0, #2
    2328:	e2730000 	rsbs	r0, r3, #0
    232c:	e0b00003 	adcs	r0, r0, r3
    2330:	e12fff1e 	bx	lr

00002334 <init_counter_ms>:
#include "../inc/target.h"
#include "../inc_lpc/lpc213x.h"

void init_counter_ms()
{   
  T0TCR  = 0x1;         //counter enable
    2334:	e59f3010 	ldr	r3, [pc, #16]	; 234c <init_counter_ms+0x18>
    2338:	e3a02001 	mov	r2, #1
    233c:	e5832004 	str	r2, [r3, #4]
  T0PR   = Fpclk / 1000;  //prescaler set to count ms
    2340:	e59f2008 	ldr	r2, [pc, #8]	; 2350 <init_counter_ms+0x1c>
    2344:	e583200c 	str	r2, [r3, #12]
    2348:	e12fff1e 	bx	lr
    234c:	e0004000 	.word	0xe0004000
    2350:	0000e666 	.word	0x0000e666

00002354 <reset_counter>:
}

void reset_counter()
{
  T0TCR = 0x3;          //reset to 0
    2354:	e59f3010 	ldr	r3, [pc, #16]	; 236c <reset_counter+0x18>
    2358:	e3a02003 	mov	r2, #3
    235c:	e5832004 	str	r2, [r3, #4]
  T0TCR = 0x1;          //restart
    2360:	e3a02001 	mov	r2, #1
    2364:	e5832004 	str	r2, [r3, #4]
    2368:	e12fff1e 	bx	lr
    236c:	e0004000 	.word	0xe0004000

00002370 <read_counter>:
}

unsigned int read_counter()
{
  return T0TC;        //read time
    2370:	e59f3004 	ldr	r3, [pc, #4]	; 237c <read_counter+0xc>
    2374:	e5930008 	ldr	r0, [r3, #8]
}
    2378:	e12fff1e 	bx	lr
    237c:	e0004000 	.word	0xe0004000

00002380 <UART0Handler>:
 ** parameters:			None
 ** Returned value:		None
 **
 *****************************************************************************/
void UART0Handler (void)
{
    2380:	e92d100f 	push	{r0, r1, r2, r3, ip}
  char IIRValue, LSRValue;
  char Dummy;

  IIRValue = U0IIR;
    2384:	e59f2118 	ldr	r2, [pc, #280]	; 24a4 <UART0Handler+0x124>
    2388:	e5d23008 	ldrb	r3, [r2, #8]

  IIRValue >>= 1;			/* skip pending bit in IIR */
    238c:	e1a030a3 	lsr	r3, r3, #1
  IIRValue &= 0x07;			/* check bit 1~3, interrupt identification */
    2390:	e2033007 	and	r3, r3, #7
  if ( IIRValue == IIR_RLS )		/* Receive Line Status */
    2394:	e3530003 	cmp	r3, #3
    2398:	0a00000a 	beq	23c8 <UART0Handler+0x48>
              UART0Count = 0;		/* buffer overflow */
            }

        }
    }
  else if ( IIRValue == IIR_RDA )	/* Receive Data Available */
    239c:	e3530002 	cmp	r3, #2
    23a0:	0a00001b 	beq	2414 <UART0Handler+0x94>
          UART0Count = 0;		/* buffer overflow */
        }

      UART0Count--;
    }
  else if ( IIRValue == IIR_CTI )	/* Character timeout indicator */
    23a4:	e3530006 	cmp	r3, #6
    23a8:	0a00002a 	beq	2458 <UART0Handler+0xd8>
    {
      /* Character Time-out indicator */
      UART0Status |= 0x100;		/* Bit 9 as the CTI error */
    }
  else if ( IIRValue == IIR_THRE )	/* THRE, transmit holding register empty */
    23ac:	e3530001 	cmp	r3, #1
    23b0:	0a000034 	beq	2488 <UART0Handler+0x108>
          {
            UART0TxEmpty = 0;
          }
      }

  VICVectAddr = 0;		/* Acknowledge Interrupt */
    23b4:	e3a02000 	mov	r2, #0
    23b8:	e3e03000 	mvn	r3, #0
    23bc:	e5032fcf 	str	r2, [r3, #-4047]	; 0xfcf
}
    23c0:	e8bd100f 	pop	{r0, r1, r2, r3, ip}
    23c4:	e25ef004 	subs	pc, lr, #4

  IIRValue >>= 1;			/* skip pending bit in IIR */
  IIRValue &= 0x07;			/* check bit 1~3, interrupt identification */
  if ( IIRValue == IIR_RLS )		/* Receive Line Status */
    {
      LSRValue = U0LSR;
    23c8:	e5d23014 	ldrb	r3, [r2, #20]
      /* Receive Line Status */
      if ( LSRValue & (LSR_OE|LSR_PE|LSR_FE|LSR_RXFE|LSR_BI) )
    23cc:	e213009e 	ands	r0, r3, #158	; 0x9e

  IIRValue >>= 1;			/* skip pending bit in IIR */
  IIRValue &= 0x07;			/* check bit 1~3, interrupt identification */
  if ( IIRValue == IIR_RLS )		/* Receive Line Status */
    {
      LSRValue = U0LSR;
    23d0:	e20310ff 	and	r1, r3, #255	; 0xff
      /* Receive Line Status */
      if ( LSRValue & (LSR_OE|LSR_PE|LSR_FE|LSR_RXFE|LSR_BI) )
    23d4:	1a000024 	bne	246c <UART0Handler+0xec>
          Dummy = U0RBR;		/* Dummy read on RX to clear interrupt, then bail out */

          VICVectAddr = 0;		/* Acknowledge Interrupt */
          return;
        }
      if ( LSRValue & LSR_RDR )	/* Receive Data Ready */
    23d8:	e3130001 	tst	r3, #1
    23dc:	0afffff4 	beq	23b4 <UART0Handler+0x34>
        {
          /* If no error on RLS, normal ready, save into the data buffer. */
          /* Note: read RBR will clear the interrupt */
          UART0Buffer[UART0Count] = U0RBR;
    23e0:	e59f30c0 	ldr	r3, [pc, #192]	; 24a8 <UART0Handler+0x128>
    23e4:	e5931000 	ldr	r1, [r3]
    23e8:	e5d2c000 	ldrb	ip, [r2]
    23ec:	e59f20b8 	ldr	r2, [pc, #184]	; 24ac <UART0Handler+0x12c>
    23f0:	e20cc0ff 	and	ip, ip, #255	; 0xff
    23f4:	e7c2c001 	strb	ip, [r2, r1]
          UART0Count++;
    23f8:	e5932000 	ldr	r2, [r3]
    23fc:	e2822001 	add	r2, r2, #1
    2400:	e5832000 	str	r2, [r3]
          if ( UART0Count == BUFSIZE )
    2404:	e5932000 	ldr	r2, [r3]
    2408:	e3520010 	cmp	r2, #16
            {
              UART0Count = 0;		/* buffer overflow */
    240c:	05830000 	streq	r0, [r3]
    2410:	eaffffe7 	b	23b4 <UART0Handler+0x34>
        }
    }
  else if ( IIRValue == IIR_RDA )	/* Receive Data Available */
    {
      /* Receive Data Available */
      UART0Buffer[UART0Count] = U0RBR;
    2414:	e59f308c 	ldr	r3, [pc, #140]	; 24a8 <UART0Handler+0x128>
    2418:	e5931000 	ldr	r1, [r3]
    241c:	e5d20000 	ldrb	r0, [r2]
    2420:	e59f2084 	ldr	r2, [pc, #132]	; 24ac <UART0Handler+0x12c>
    2424:	e20000ff 	and	r0, r0, #255	; 0xff
    2428:	e7c20001 	strb	r0, [r2, r1]
      UART0Count++;
    242c:	e5932000 	ldr	r2, [r3]
    2430:	e2822001 	add	r2, r2, #1
    2434:	e5832000 	str	r2, [r3]
      if ( UART0Count == BUFSIZE )
    2438:	e5932000 	ldr	r2, [r3]
    243c:	e3520010 	cmp	r2, #16
        {
          UART0Count = 0;		/* buffer overflow */
    2440:	03a02000 	moveq	r2, #0
    2444:	05832000 	streq	r2, [r3]
        }

      UART0Count--;
    2448:	e5932000 	ldr	r2, [r3]
    244c:	e2422001 	sub	r2, r2, #1
    2450:	e5832000 	str	r2, [r3]
    2454:	eaffffd6 	b	23b4 <UART0Handler+0x34>
    }
  else if ( IIRValue == IIR_CTI )	/* Character timeout indicator */
    {
      /* Character Time-out indicator */
      UART0Status |= 0x100;		/* Bit 9 as the CTI error */
    2458:	e59f3050 	ldr	r3, [pc, #80]	; 24b0 <UART0Handler+0x130>
    245c:	e5932000 	ldr	r2, [r3]
    2460:	e3822c01 	orr	r2, r2, #256	; 0x100
    2464:	e5832000 	str	r2, [r3]
    2468:	eaffffd1 	b	23b4 <UART0Handler+0x34>
      /* Receive Line Status */
      if ( LSRValue & (LSR_OE|LSR_PE|LSR_FE|LSR_RXFE|LSR_BI) )
        {
          /* There are errors or break interrupt */
          /* Read LSR will clear the interrupt */
          UART0Status = LSRValue;
    246c:	e59f303c 	ldr	r3, [pc, #60]	; 24b0 <UART0Handler+0x130>
    2470:	e5831000 	str	r1, [r3]
          Dummy = U0RBR;		/* Dummy read on RX to clear interrupt, then bail out */
    2474:	e5d23000 	ldrb	r3, [r2]

          VICVectAddr = 0;		/* Acknowledge Interrupt */
    2478:	e3a02000 	mov	r2, #0
    247c:	e3e03000 	mvn	r3, #0
    2480:	e5032fcf 	str	r2, [r3, #-4047]	; 0xfcf
          return;
    2484:	eaffffcd 	b	23c0 <UART0Handler+0x40>
      UART0Status |= 0x100;		/* Bit 9 as the CTI error */
    }
  else if ( IIRValue == IIR_THRE )	/* THRE, transmit holding register empty */
      {
        /* THRE interrupt */
        LSRValue = U0LSR;		/* Check status in the LSR to see if
    2488:	e5d22014 	ldrb	r2, [r2, #20]
					valid data in U0THR or not */
        if ( LSRValue & LSR_THRE )
    248c:	e2122020 	ands	r2, r2, #32
          {
            UART0TxEmpty = 1;
    2490:	159f201c 	ldrne	r2, [pc, #28]	; 24b4 <UART0Handler+0x134>
          }
        else
          {
            UART0TxEmpty = 0;
    2494:	059f3018 	ldreq	r3, [pc, #24]	; 24b4 <UART0Handler+0x134>
        /* THRE interrupt */
        LSRValue = U0LSR;		/* Check status in the LSR to see if
					valid data in U0THR or not */
        if ( LSRValue & LSR_THRE )
          {
            UART0TxEmpty = 1;
    2498:	15c23000 	strbne	r3, [r2]
          }
        else
          {
            UART0TxEmpty = 0;
    249c:	05c32000 	strbeq	r2, [r3]
    24a0:	eaffffc3 	b	23b4 <UART0Handler+0x34>
    24a4:	e000c000 	.word	0xe000c000
    24a8:	40000b2c 	.word	0x40000b2c
    24ac:	4000331c 	.word	0x4000331c
    24b0:	4000332c 	.word	0x4000332c
    24b4:	40000a40 	.word	0x40000a40

000024b8 <UARTInit>:
 *****************************************************************************/
int  UARTInit( int  baudrate )
{
  int  Fdiv;

  PINSEL0 |= 0x05;              /* Enable RxD1 and TxD1, RxD0 and TxD0 */
    24b8:	e59f20a0 	ldr	r2, [pc, #160]	; 2560 <UARTInit+0xa8>
    24bc:	e592c000 	ldr	ip, [r2]
 **				interrupt handler can't be installed to the
 **				VIC table
 **
 *****************************************************************************/
int  UARTInit( int  baudrate )
{
    24c0:	e92d4038 	push	{r3, r4, r5, lr}
  int  Fdiv;

  PINSEL0 |= 0x05;              /* Enable RxD1 and TxD1, RxD0 and TxD0 */

  U0IER = 0x01;                 // disable all interrupts
    24c4:	e59f4098 	ldr	r4, [pc, #152]	; 2564 <UARTInit+0xac>
 *****************************************************************************/
int  UARTInit( int  baudrate )
{
  int  Fdiv;

  PINSEL0 |= 0x05;              /* Enable RxD1 and TxD1, RxD0 and TxD0 */
    24c8:	e38cc005 	orr	ip, ip, #5

  U0IER = 0x01;                 // disable all interrupts
    24cc:	e3a05001 	mov	r5, #1
  U0IIR = 0x00;                 // clear interrupt ID register
    24d0:	e3a03000 	mov	r3, #0
 *****************************************************************************/
int  UARTInit( int  baudrate )
{
  int  Fdiv;

  PINSEL0 |= 0x05;              /* Enable RxD1 and TxD1, RxD0 and TxD0 */
    24d4:	e582c000 	str	ip, [r2]

  U0IER = 0x01;                 // disable all interrupts
    24d8:	e5c45004 	strb	r5, [r4, #4]
  U0IIR = 0x00;                 // clear interrupt ID register
    24dc:	e5c43008 	strb	r3, [r4, #8]
  U0LSR = 0x00;                 // clear line status register
    24e0:	e5c43014 	strb	r3, [r4, #20]

  U0LCR = 0x83;                         /* 8 bits, no Parity, 1 Stop bit    */
    24e4:	e3e0307c 	mvn	r3, #124	; 0x7c
    24e8:	e5c4300c 	strb	r3, [r4, #12]
 **				interrupt handler can't be installed to the
 **				VIC table
 **
 *****************************************************************************/
int  UARTInit( int  baudrate )
{
    24ec:	e1a01000 	mov	r1, r0
  U0IER = 0x01;                 // disable all interrupts
  U0IIR = 0x00;                 // clear interrupt ID register
  U0LSR = 0x00;                 // clear line status register

  U0LCR = 0x83;                         /* 8 bits, no Parity, 1 Stop bit    */
  Fdiv = ( Fpclk / 16 ) / baudrate ;	/*baud rate */
    24f0:	e3a009e1 	mov	r0, #3686400	; 0x384000
    24f4:	eb00007d 	bl	26f0 <__aeabi_uidiv>
  U0DLM =  Fdiv / 0xFF;
    24f8:	e59f2068 	ldr	r2, [pc, #104]	; 2568 <UARTInit+0xb0>
    24fc:	e0c23290 	smull	r3, r2, r0, r2
    2500:	e1a03fc0 	asr	r3, r0, #31
    2504:	e0822000 	add	r2, r2, r0
    2508:	e06323c2 	rsb	r2, r3, r2, asr #7
  U0DLL =  Fdiv % 0xFF;
    250c:	e0800002 	add	r0, r0, r2
  U0IIR = 0x00;                 // clear interrupt ID register
  U0LSR = 0x00;                 // clear line status register

  U0LCR = 0x83;                         /* 8 bits, no Parity, 1 Stop bit    */
  Fdiv = ( Fpclk / 16 ) / baudrate ;	/*baud rate */
  U0DLM =  Fdiv / 0xFF;
    2510:	e20220ff 	and	r2, r2, #255	; 0xff
    2514:	e5c42004 	strb	r2, [r4, #4]
  U0DLL =  Fdiv % 0xFF;
    2518:	e20010ff 	and	r1, r0, #255	; 0xff
  U0LCR = 0x03;                 /* DLAB = 0                         */
    251c:	e3a02003 	mov	r2, #3
  U0LSR = 0x00;                 // clear line status register

  U0LCR = 0x83;                         /* 8 bits, no Parity, 1 Stop bit    */
  Fdiv = ( Fpclk / 16 ) / baudrate ;	/*baud rate */
  U0DLM =  Fdiv / 0xFF;
  U0DLL =  Fdiv % 0xFF;
    2520:	e5c41000 	strb	r1, [r4]
  U0LCR = 0x03;                 /* DLAB = 0                         */
    2524:	e5c4200c 	strb	r2, [r4, #12]
  U0FCR = 0x47;		        /* Enable and reset TX and RX FIFO. */
    2528:	e3a02047 	mov	r2, #71	; 0x47
    252c:	e5c42008 	strb	r2, [r4, #8]
                                /* Interrupt on each character received */

  U0IER = IER_RBR | IER_THRE | IER_RLS;	/* Enable UART0 interrupt */
    2530:	e3a02007 	mov	r2, #7
    2534:	e5c42004 	strb	r2, [r4, #4]

  VICVectAddr0 = (unsigned)UART0Handler ;
    2538:	e59f202c 	ldr	r2, [pc, #44]	; 256c <UARTInit+0xb4>
    253c:	e3e03000 	mvn	r3, #0
    2540:	e5032eff 	str	r2, [r3, #-3839]	; 0xeff
  VICVectCntl0 = 0x20 | 6;
    2544:	e3a02026 	mov	r2, #38	; 0x26
    2548:	e5032dff 	str	r2, [r3, #-3583]	; 0xdff
  VICIntEnable = (1<<6);
    254c:	e3a02040 	mov	r2, #64	; 0x40

  return 1;
}
    2550:	e1a00005 	mov	r0, r5

  U0IER = IER_RBR | IER_THRE | IER_RLS;	/* Enable UART0 interrupt */

  VICVectAddr0 = (unsigned)UART0Handler ;
  VICVectCntl0 = 0x20 | 6;
  VICIntEnable = (1<<6);
    2554:	e5032fef 	str	r2, [r3, #-4079]	; 0xfef

  return 1;
}
    2558:	e8bd4038 	pop	{r3, r4, r5, lr}
    255c:	e12fff1e 	bx	lr
    2560:	e002c000 	.word	0xe002c000
    2564:	e000c000 	.word	0xe000c000
    2568:	80808081 	.word	0x80808081
    256c:	00002380 	.word	0x00002380

00002570 <UARTSend>:
 ** Returned value:		None
 **
 *****************************************************************************/
void UARTSend(char *BufferPtr, int  length )
{
  if (length <= 0)
    2570:	e3510000 	cmp	r1, #0
 ** parameters:			buffer pointer, and data length
 ** Returned value:		None
 **
 *****************************************************************************/
void UARTSend(char *BufferPtr, int  length )
{
    2574:	e92d4038 	push	{r3, r4, r5, lr}
    2578:	e1a04000 	mov	r4, r0
  if (length <= 0)
    257c:	da00000e 	ble	25bc <UARTSend+0x4c>
    2580:	e59f2044 	ldr	r2, [pc, #68]	; 25cc <UARTSend+0x5c>
    }
  while ( length != 0 )
    {
      while ( !UART0TxEmpty );	/* THRE status, contain valid data */

      U0THR = *BufferPtr;
    2584:	e59f0044 	ldr	r0, [pc, #68]	; 25d0 <UARTSend+0x60>
 **
 ** parameters:			buffer pointer, and data length
 ** Returned value:		None
 **
 *****************************************************************************/
void UARTSend(char *BufferPtr, int  length )
    2588:	e0845001 	add	r5, r4, r1
    {
      length = strlen(BufferPtr);
    }
  while ( length != 0 )
    {
      while ( !UART0TxEmpty );	/* THRE status, contain valid data */
    258c:	e1a0c002 	mov	ip, r2

      U0THR = *BufferPtr;
      UART0TxEmpty = 0;	/* not empty in the THR until it shifts out */
    2590:	e3a01000 	mov	r1, #0
    {
      length = strlen(BufferPtr);
    }
  while ( length != 0 )
    {
      while ( !UART0TxEmpty );	/* THRE status, contain valid data */
    2594:	e5d23000 	ldrb	r3, [r2]
    2598:	e3530000 	cmp	r3, #0
    259c:	0afffffc 	beq	2594 <UARTSend+0x24>

      U0THR = *BufferPtr;
    25a0:	e4d43001 	ldrb	r3, [r4], #1
{
  if (length <= 0)
    {
      length = strlen(BufferPtr);
    }
  while ( length != 0 )
    25a4:	e1540005 	cmp	r4, r5
    {
      while ( !UART0TxEmpty );	/* THRE status, contain valid data */

      U0THR = *BufferPtr;
    25a8:	e5c03000 	strb	r3, [r0]
      UART0TxEmpty = 0;	/* not empty in the THR until it shifts out */
    25ac:	e5cc1000 	strb	r1, [ip]
{
  if (length <= 0)
    {
      length = strlen(BufferPtr);
    }
  while ( length != 0 )
    25b0:	1afffff7 	bne	2594 <UARTSend+0x24>

      BufferPtr++;
      length--;
    }
  return;
}
    25b4:	e8bd4038 	pop	{r3, r4, r5, lr}
    25b8:	e12fff1e 	bx	lr
 *****************************************************************************/
void UARTSend(char *BufferPtr, int  length )
{
  if (length <= 0)
    {
      length = strlen(BufferPtr);
    25bc:	eb000304 	bl	31d4 <strlen>
    }
  while ( length != 0 )
    25c0:	e2501000 	subs	r1, r0, #0
    25c4:	1affffed 	bne	2580 <UARTSend+0x10>
    25c8:	eafffff9 	b	25b4 <UARTSend+0x44>
    25cc:	40000a40 	.word	0x40000a40
    25d0:	e000c000 	.word	0xe000c000

000025d4 <puts_UART>:
 ** parameters:                 buffer pointer, and data length
 ** Returned value:             None
 **
 *****************************************************************************/
void puts_UART(char *BufferPtr)
{
    25d4:	e92d4038 	push	{r3, r4, r5, lr}
    25d8:	e1a04000 	mov	r4, r0
 *****************************************************************************/
void UARTSend(char *BufferPtr, int  length )
{
  if (length <= 0)
    {
      length = strlen(BufferPtr);
    25dc:	eb0002fc 	bl	31d4 <strlen>
    }
  while ( length != 0 )
    25e0:	e3500000 	cmp	r0, #0
    25e4:	0a00000c 	beq	261c <puts_UART+0x48>
    25e8:	e59f2034 	ldr	r2, [pc, #52]	; 2624 <puts_UART+0x50>
    {
      while ( !UART0TxEmpty );	/* THRE status, contain valid data */

      U0THR = *BufferPtr;
    25ec:	e59f5034 	ldr	r5, [pc, #52]	; 2628 <puts_UART+0x54>
 **
 ** parameters:                 buffer pointer, and data length
 ** Returned value:             None
 **
 *****************************************************************************/
void puts_UART(char *BufferPtr)
    25f0:	e084c000 	add	ip, r4, r0
  while ( length != 0 )
    {
      while ( !UART0TxEmpty );	/* THRE status, contain valid data */

      U0THR = *BufferPtr;
      UART0TxEmpty = 0;	/* not empty in the THR until it shifts out */
    25f4:	e3a01000 	mov	r1, #0
    {
      length = strlen(BufferPtr);
    }
  while ( length != 0 )
    {
      while ( !UART0TxEmpty );	/* THRE status, contain valid data */
    25f8:	e1a00002 	mov	r0, r2
    25fc:	e5d23000 	ldrb	r3, [r2]
    2600:	e3530000 	cmp	r3, #0
    2604:	0afffffc 	beq	25fc <puts_UART+0x28>

      U0THR = *BufferPtr;
    2608:	e4d43001 	ldrb	r3, [r4], #1
{
  if (length <= 0)
    {
      length = strlen(BufferPtr);
    }
  while ( length != 0 )
    260c:	e154000c 	cmp	r4, ip
    {
      while ( !UART0TxEmpty );	/* THRE status, contain valid data */

      U0THR = *BufferPtr;
    2610:	e5c53000 	strb	r3, [r5]
      UART0TxEmpty = 0;	/* not empty in the THR until it shifts out */
    2614:	e5c01000 	strb	r1, [r0]
{
  if (length <= 0)
    {
      length = strlen(BufferPtr);
    }
  while ( length != 0 )
    2618:	1afffff7 	bne	25fc <puts_UART+0x28>
 **
 *****************************************************************************/
void puts_UART(char *BufferPtr)
{
  UARTSend( BufferPtr, 0);
}
    261c:	e8bd4038 	pop	{r3, r4, r5, lr}
    2620:	e12fff1e 	bx	lr
    2624:	40000a40 	.word	0x40000a40
    2628:	e000c000 	.word	0xe000c000

0000262c <feed>:
}


void feed(void)
{
  PLLFEED=0xAA;
    262c:	e59f3010 	ldr	r3, [pc, #16]	; 2644 <feed+0x18>
    2630:	e3e02055 	mvn	r2, #85	; 0x55
    2634:	e5c3208c 	strb	r2, [r3, #140]	; 0x8c
  PLLFEED=0x55;
    2638:	e3a02055 	mov	r2, #85	; 0x55
    263c:	e5c3208c 	strb	r2, [r3, #140]	; 0x8c
    2640:	e12fff1e 	bx	lr
    2644:	e01fc000 	.word	0xe01fc000

00002648 <init_chip>:
void init_chip(void)
{

  // Enabling PLL

  PLLCFG=PLLCFG_VAL;
    2648:	e59f206c 	ldr	r2, [pc, #108]	; 26bc <init_chip+0x74>
    264c:	e3a00023 	mov	r0, #35	; 0x23
    2650:	e5c20084 	strb	r0, [r2, #132]	; 0x84
}


void feed(void)
{
  PLLFEED=0xAA;
    2654:	e3e01055 	mvn	r1, #85	; 0x55
  PLLFEED=0x55;
    2658:	e3a03055 	mov	r3, #85	; 0x55
  // Enabling PLL

  PLLCFG=PLLCFG_VAL;
  feed();

  PLLCON=0x1;
    265c:	e3a00001 	mov	r0, #1
}


void feed(void)
{
  PLLFEED=0xAA;
    2660:	e5c2108c 	strb	r1, [r2, #140]	; 0x8c
  PLLFEED=0x55;
    2664:	e5c2308c 	strb	r3, [r2, #140]	; 0x8c
  // Enabling PLL

  PLLCFG=PLLCFG_VAL;
  feed();

  PLLCON=0x1;
    2668:	e5c20080 	strb	r0, [r2, #128]	; 0x80
}


void feed(void)
{
  PLLFEED=0xAA;
    266c:	e5c2108c 	strb	r1, [r2, #140]	; 0x8c
  PLLFEED=0x55;
    2670:	e5c2308c 	strb	r3, [r2, #140]	; 0x8c
  feed();

  PLLCON=0x1;
  feed();

  while(!(PLLSTAT & 0x400)) ;
    2674:	e1d238b8 	ldrh	r3, [r2, #136]	; 0x88
    2678:	e3130b01 	tst	r3, #1024	; 0x400
    267c:	e59f3038 	ldr	r3, [pc, #56]	; 26bc <init_chip+0x74>
    2680:	0afffffb 	beq	2674 <init_chip+0x2c>

  PLLCON=0x3;
    2684:	e3a01003 	mov	r1, #3
    2688:	e5c31080 	strb	r1, [r3, #128]	; 0x80
}


void feed(void)
{
  PLLFEED=0xAA;
    268c:	e3e01055 	mvn	r1, #85	; 0x55
    2690:	e5c3108c 	strb	r1, [r3, #140]	; 0x8c
  PLLFEED=0x55;
    2694:	e3a01055 	mov	r1, #85	; 0x55
    2698:	e5c3108c 	strb	r1, [r3, #140]	; 0x8c
  feed();

  // Enabling MAM

  MAMCR=0x0;
  MAMTIM=0x2;
    269c:	e3a02002 	mov	r2, #2
  PLLCON=0x3;
  feed();

  // Enabling MAM

  MAMCR=0x0;
    26a0:	e3a01000 	mov	r1, #0
    26a4:	e5c31000 	strb	r1, [r3]
  MAMTIM=0x2;
    26a8:	e5c32004 	strb	r2, [r3, #4]
  MAMCR=0x2;
    26ac:	e5c32000 	strb	r2, [r3]

  // Enabling Fpclk = Fcclk

  APBDIV=APBDIV_VAL;
    26b0:	e3a02001 	mov	r2, #1
    26b4:	e5c32100 	strb	r2, [r3, #256]	; 0x100
    26b8:	e12fff1e 	bx	lr
    26bc:	e01fc000 	.word	0xe01fc000

000026c0 <main>:

void init_chip(void);


int main(void)
{
    26c0:	e92d4008 	push	{r3, lr}
  init_chip();
    26c4:	ebffffdf 	bl	2648 <init_chip>
  init_counter_ms();
    26c8:	ebffff19 	bl	2334 <init_counter_ms>

  UARTInit(115200);
    26cc:	e59f0014 	ldr	r0, [pc, #20]	; 26e8 <main+0x28>
    26d0:	ebffff78 	bl	24b8 <UARTInit>
  UARTSend("--------------UART INITIALIZED--------------\n\n", 0);
    26d4:	e59f0010 	ldr	r0, [pc, #16]	; 26ec <main+0x2c>
    26d8:	e3a01000 	mov	r1, #0
    26dc:	ebffffa3 	bl	2570 <UARTSend>

  while(1)
    start_benchmark();
    26e0:	ebfffe8e 	bl	2120 <start_benchmark>
    26e4:	eafffffd 	b	26e0 <main+0x20>
    26e8:	0001c200 	.word	0x0001c200
    26ec:	00005004 	.word	0x00005004

000026f0 <__aeabi_uidiv>:
    26f0:	e2512001 	subs	r2, r1, #1
    26f4:	012fff1e 	bxeq	lr
    26f8:	3a000036 	bcc	27d8 <__aeabi_uidiv+0xe8>
    26fc:	e1500001 	cmp	r0, r1
    2700:	9a000022 	bls	2790 <__aeabi_uidiv+0xa0>
    2704:	e1110002 	tst	r1, r2
    2708:	0a000023 	beq	279c <__aeabi_uidiv+0xac>
    270c:	e311020e 	tst	r1, #-536870912	; 0xe0000000
    2710:	01a01181 	lsleq	r1, r1, #3
    2714:	03a03008 	moveq	r3, #8
    2718:	13a03001 	movne	r3, #1
    271c:	e3510201 	cmp	r1, #268435456	; 0x10000000
    2720:	31510000 	cmpcc	r1, r0
    2724:	31a01201 	lslcc	r1, r1, #4
    2728:	31a03203 	lslcc	r3, r3, #4
    272c:	3afffffa 	bcc	271c <__aeabi_uidiv+0x2c>
    2730:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
    2734:	31510000 	cmpcc	r1, r0
    2738:	31a01081 	lslcc	r1, r1, #1
    273c:	31a03083 	lslcc	r3, r3, #1
    2740:	3afffffa 	bcc	2730 <__aeabi_uidiv+0x40>
    2744:	e3a02000 	mov	r2, #0
    2748:	e1500001 	cmp	r0, r1
    274c:	20400001 	subcs	r0, r0, r1
    2750:	21822003 	orrcs	r2, r2, r3
    2754:	e15000a1 	cmp	r0, r1, lsr #1
    2758:	204000a1 	subcs	r0, r0, r1, lsr #1
    275c:	218220a3 	orrcs	r2, r2, r3, lsr #1
    2760:	e1500121 	cmp	r0, r1, lsr #2
    2764:	20400121 	subcs	r0, r0, r1, lsr #2
    2768:	21822123 	orrcs	r2, r2, r3, lsr #2
    276c:	e15001a1 	cmp	r0, r1, lsr #3
    2770:	204001a1 	subcs	r0, r0, r1, lsr #3
    2774:	218221a3 	orrcs	r2, r2, r3, lsr #3
    2778:	e3500000 	cmp	r0, #0
    277c:	11b03223 	lsrsne	r3, r3, #4
    2780:	11a01221 	lsrne	r1, r1, #4
    2784:	1affffef 	bne	2748 <__aeabi_uidiv+0x58>
    2788:	e1a00002 	mov	r0, r2
    278c:	e12fff1e 	bx	lr
    2790:	03a00001 	moveq	r0, #1
    2794:	13a00000 	movne	r0, #0
    2798:	e12fff1e 	bx	lr
    279c:	e3510801 	cmp	r1, #65536	; 0x10000
    27a0:	21a01821 	lsrcs	r1, r1, #16
    27a4:	23a02010 	movcs	r2, #16
    27a8:	33a02000 	movcc	r2, #0
    27ac:	e3510c01 	cmp	r1, #256	; 0x100
    27b0:	21a01421 	lsrcs	r1, r1, #8
    27b4:	22822008 	addcs	r2, r2, #8
    27b8:	e3510010 	cmp	r1, #16
    27bc:	21a01221 	lsrcs	r1, r1, #4
    27c0:	22822004 	addcs	r2, r2, #4
    27c4:	e3510004 	cmp	r1, #4
    27c8:	82822003 	addhi	r2, r2, #3
    27cc:	908220a1 	addls	r2, r2, r1, lsr #1
    27d0:	e1a00230 	lsr	r0, r0, r2
    27d4:	e12fff1e 	bx	lr
    27d8:	e3500000 	cmp	r0, #0
    27dc:	13e00000 	mvnne	r0, #0
    27e0:	ea000007 	b	2804 <__aeabi_idiv0>

000027e4 <__aeabi_uidivmod>:
    27e4:	e3510000 	cmp	r1, #0
    27e8:	0afffffa 	beq	27d8 <__aeabi_uidiv+0xe8>
    27ec:	e92d4003 	push	{r0, r1, lr}
    27f0:	ebffffbe 	bl	26f0 <__aeabi_uidiv>
    27f4:	e8bd4006 	pop	{r1, r2, lr}
    27f8:	e0030092 	mul	r3, r2, r0
    27fc:	e0411003 	sub	r1, r1, r3
    2800:	e12fff1e 	bx	lr

00002804 <__aeabi_idiv0>:
    2804:	e12fff1e 	bx	lr

00002808 <malloc>:
    2808:	e92d4008 	push	{r3, lr}
    280c:	e59f3010 	ldr	r3, [pc, #16]	; 2824 <malloc+0x1c>
    2810:	e1a01000 	mov	r1, r0
    2814:	e5930000 	ldr	r0, [r3]
    2818:	eb00000a 	bl	2848 <_malloc_r>
    281c:	e8bd4008 	pop	{r3, lr}
    2820:	e12fff1e 	bx	lr
    2824:	40000610 	.word	0x40000610

00002828 <free>:
    2828:	e92d4008 	push	{r3, lr}
    282c:	e59f3010 	ldr	r3, [pc, #16]	; 2844 <free+0x1c>
    2830:	e1a01000 	mov	r1, r0
    2834:	e5930000 	ldr	r0, [r3]
    2838:	eb0005c7 	bl	3f5c <_free_r>
    283c:	e8bd4008 	pop	{r3, lr}
    2840:	e12fff1e 	bx	lr
    2844:	40000610 	.word	0x40000610

00002848 <_malloc_r>:
    2848:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    284c:	e281400b 	add	r4, r1, #11
    2850:	e3540016 	cmp	r4, #22
    2854:	83c44007 	bichi	r4, r4, #7
    2858:	81a03fa4 	lsrhi	r3, r4, #31
    285c:	93a03000 	movls	r3, #0
    2860:	93a04010 	movls	r4, #16
    2864:	e1540001 	cmp	r4, r1
    2868:	21a01003 	movcs	r1, r3
    286c:	33831001 	orrcc	r1, r3, #1
    2870:	e3510000 	cmp	r1, #0
    2874:	13a0300c 	movne	r3, #12
    2878:	e1a05000 	mov	r5, r0
    287c:	15803000 	strne	r3, [r0]
    2880:	13a07000 	movne	r7, #0
    2884:	1a000015 	bne	28e0 <_malloc_r+0x98>
    2888:	eb0001b3 	bl	2f5c <__malloc_lock>
    288c:	e3540f7e 	cmp	r4, #504	; 0x1f8
    2890:	2a000015 	bcs	28ec <_malloc_r+0xa4>
    2894:	e59f66b4 	ldr	r6, [pc, #1716]	; 2f50 <_malloc_r+0x708>
    2898:	e1a0e1a4 	lsr	lr, r4, #3
    289c:	e086318e 	add	r3, r6, lr, lsl #3
    28a0:	e593700c 	ldr	r7, [r3, #12]
    28a4:	e1570003 	cmp	r7, r3
    28a8:	0a000168 	beq	2e50 <_malloc_r+0x608>
    28ac:	e5973004 	ldr	r3, [r7, #4]
    28b0:	e3c33003 	bic	r3, r3, #3
    28b4:	e0873003 	add	r3, r7, r3
    28b8:	e5930004 	ldr	r0, [r3, #4]
    28bc:	e2871008 	add	r1, r7, #8
    28c0:	e8910006 	ldm	r1, {r1, r2}
    28c4:	e3800001 	orr	r0, r0, #1
    28c8:	e5830004 	str	r0, [r3, #4]
    28cc:	e581200c 	str	r2, [r1, #12]
    28d0:	e5821008 	str	r1, [r2, #8]
    28d4:	e1a00005 	mov	r0, r5
    28d8:	eb0001a0 	bl	2f60 <__malloc_unlock>
    28dc:	e2877008 	add	r7, r7, #8
    28e0:	e1a00007 	mov	r0, r7
    28e4:	e8bd4ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    28e8:	e12fff1e 	bx	lr
    28ec:	e1b0e4a4 	lsrs	lr, r4, #9
    28f0:	01a0e1a4 	lsreq	lr, r4, #3
    28f4:	01a0118e 	lsleq	r1, lr, #3
    28f8:	1a000061 	bne	2a84 <_malloc_r+0x23c>
    28fc:	e59f664c 	ldr	r6, [pc, #1612]	; 2f50 <_malloc_r+0x708>
    2900:	e0861001 	add	r1, r6, r1
    2904:	e591700c 	ldr	r7, [r1, #12]
    2908:	e1510007 	cmp	r1, r7
    290c:	1a000005 	bne	2928 <_malloc_r+0xe0>
    2910:	ea00000a 	b	2940 <_malloc_r+0xf8>
    2914:	e3530000 	cmp	r3, #0
    2918:	aa0000e5 	bge	2cb4 <_malloc_r+0x46c>
    291c:	e597700c 	ldr	r7, [r7, #12]
    2920:	e1510007 	cmp	r1, r7
    2924:	0a000005 	beq	2940 <_malloc_r+0xf8>
    2928:	e5972004 	ldr	r2, [r7, #4]
    292c:	e3c22003 	bic	r2, r2, #3
    2930:	e0643002 	rsb	r3, r4, r2
    2934:	e353000f 	cmp	r3, #15
    2938:	dafffff5 	ble	2914 <_malloc_r+0xcc>
    293c:	e24ee001 	sub	lr, lr, #1
    2940:	e28ee001 	add	lr, lr, #1
    2944:	e59f3604 	ldr	r3, [pc, #1540]	; 2f50 <_malloc_r+0x708>
    2948:	e5967010 	ldr	r7, [r6, #16]
    294c:	e2838008 	add	r8, r3, #8
    2950:	e1570008 	cmp	r7, r8
    2954:	05931004 	ldreq	r1, [r3, #4]
    2958:	0a000016 	beq	29b8 <_malloc_r+0x170>
    295c:	e5972004 	ldr	r2, [r7, #4]
    2960:	e3c22003 	bic	r2, r2, #3
    2964:	e0641002 	rsb	r1, r4, r2
    2968:	e351000f 	cmp	r1, #15
    296c:	ca000115 	bgt	2dc8 <_malloc_r+0x580>
    2970:	e3510000 	cmp	r1, #0
    2974:	e5838014 	str	r8, [r3, #20]
    2978:	e5838010 	str	r8, [r3, #16]
    297c:	aa00005b 	bge	2af0 <_malloc_r+0x2a8>
    2980:	e3520c02 	cmp	r2, #512	; 0x200
    2984:	2a0000e0 	bcs	2d0c <_malloc_r+0x4c4>
    2988:	e5930004 	ldr	r0, [r3, #4]
    298c:	e1a021a2 	lsr	r2, r2, #3
    2990:	e1a01142 	asr	r1, r2, #2
    2994:	e3a0c001 	mov	ip, #1
    2998:	e180111c 	orr	r1, r0, ip, lsl r1
    299c:	e0832182 	add	r2, r3, r2, lsl #3
    29a0:	e5920008 	ldr	r0, [r2, #8]
    29a4:	e587200c 	str	r2, [r7, #12]
    29a8:	e5870008 	str	r0, [r7, #8]
    29ac:	e5831004 	str	r1, [r3, #4]
    29b0:	e5827008 	str	r7, [r2, #8]
    29b4:	e580700c 	str	r7, [r0, #12]
    29b8:	e1a0314e 	asr	r3, lr, #2
    29bc:	e3a00001 	mov	r0, #1
    29c0:	e1a00310 	lsl	r0, r0, r3
    29c4:	e1500001 	cmp	r0, r1
    29c8:	8a000050 	bhi	2b10 <_malloc_r+0x2c8>
    29cc:	e1110000 	tst	r1, r0
    29d0:	1a000008 	bne	29f8 <_malloc_r+0x1b0>
    29d4:	e1a00080 	lsl	r0, r0, #1
    29d8:	e3cee003 	bic	lr, lr, #3
    29dc:	e1110000 	tst	r1, r0
    29e0:	e28ee004 	add	lr, lr, #4
    29e4:	1a000003 	bne	29f8 <_malloc_r+0x1b0>
    29e8:	e1a00080 	lsl	r0, r0, #1
    29ec:	e1100001 	tst	r0, r1
    29f0:	e28ee004 	add	lr, lr, #4
    29f4:	0afffffb 	beq	29e8 <_malloc_r+0x1a0>
    29f8:	e086a18e 	add	sl, r6, lr, lsl #3
    29fc:	e1a0c00a 	mov	ip, sl
    2a00:	e1a0700e 	mov	r7, lr
    2a04:	e59c300c 	ldr	r3, [ip, #12]
    2a08:	e15c0003 	cmp	ip, r3
    2a0c:	1a000005 	bne	2a28 <_malloc_r+0x1e0>
    2a10:	ea0000f9 	b	2dfc <_malloc_r+0x5b4>
    2a14:	e3520000 	cmp	r2, #0
    2a18:	aa000112 	bge	2e68 <_malloc_r+0x620>
    2a1c:	e593300c 	ldr	r3, [r3, #12]
    2a20:	e15c0003 	cmp	ip, r3
    2a24:	0a0000f4 	beq	2dfc <_malloc_r+0x5b4>
    2a28:	e5931004 	ldr	r1, [r3, #4]
    2a2c:	e3c11003 	bic	r1, r1, #3
    2a30:	e0642001 	rsb	r2, r4, r1
    2a34:	e352000f 	cmp	r2, #15
    2a38:	dafffff5 	ble	2a14 <_malloc_r+0x1cc>
    2a3c:	e1a07003 	mov	r7, r3
    2a40:	e593000c 	ldr	r0, [r3, #12]
    2a44:	e5b7c008 	ldr	ip, [r7, #8]!
    2a48:	e0831004 	add	r1, r3, r4
    2a4c:	e382e001 	orr	lr, r2, #1
    2a50:	e3844001 	orr	r4, r4, #1
    2a54:	e58c000c 	str	r0, [ip, #12]
    2a58:	e580c008 	str	ip, [r0, #8]
    2a5c:	e5834004 	str	r4, [r3, #4]
    2a60:	e5861014 	str	r1, [r6, #20]
    2a64:	e5861010 	str	r1, [r6, #16]
    2a68:	e581800c 	str	r8, [r1, #12]
    2a6c:	e5818008 	str	r8, [r1, #8]
    2a70:	e581e004 	str	lr, [r1, #4]
    2a74:	e7812002 	str	r2, [r1, r2]
    2a78:	e1a00005 	mov	r0, r5
    2a7c:	eb000137 	bl	2f60 <__malloc_unlock>
    2a80:	eaffff96 	b	28e0 <_malloc_r+0x98>
    2a84:	e35e0004 	cmp	lr, #4
    2a88:	91a0e324 	lsrls	lr, r4, #6
    2a8c:	928ee038 	addls	lr, lr, #56	; 0x38
    2a90:	91a0118e 	lslls	r1, lr, #3
    2a94:	9affff98 	bls	28fc <_malloc_r+0xb4>
    2a98:	e35e0014 	cmp	lr, #20
    2a9c:	928ee05b 	addls	lr, lr, #91	; 0x5b
    2aa0:	91a0118e 	lslls	r1, lr, #3
    2aa4:	9affff94 	bls	28fc <_malloc_r+0xb4>
    2aa8:	e35e0054 	cmp	lr, #84	; 0x54
    2aac:	91a0e624 	lsrls	lr, r4, #12
    2ab0:	928ee06e 	addls	lr, lr, #110	; 0x6e
    2ab4:	91a0118e 	lslls	r1, lr, #3
    2ab8:	9affff8f 	bls	28fc <_malloc_r+0xb4>
    2abc:	e35e0f55 	cmp	lr, #340	; 0x154
    2ac0:	91a0e7a4 	lsrls	lr, r4, #15
    2ac4:	928ee077 	addls	lr, lr, #119	; 0x77
    2ac8:	91a0118e 	lslls	r1, lr, #3
    2acc:	9affff8a 	bls	28fc <_malloc_r+0xb4>
    2ad0:	e59f347c 	ldr	r3, [pc, #1148]	; 2f54 <_malloc_r+0x70c>
    2ad4:	e15e0003 	cmp	lr, r3
    2ad8:	91a0e924 	lsrls	lr, r4, #18
    2adc:	928ee07c 	addls	lr, lr, #124	; 0x7c
    2ae0:	91a0118e 	lslls	r1, lr, #3
    2ae4:	83a01e3f 	movhi	r1, #1008	; 0x3f0
    2ae8:	83a0e07e 	movhi	lr, #126	; 0x7e
    2aec:	eaffff82 	b	28fc <_malloc_r+0xb4>
    2af0:	e0872002 	add	r2, r7, r2
    2af4:	e5923004 	ldr	r3, [r2, #4]
    2af8:	e3833001 	orr	r3, r3, #1
    2afc:	e5823004 	str	r3, [r2, #4]
    2b00:	e1a00005 	mov	r0, r5
    2b04:	eb000115 	bl	2f60 <__malloc_unlock>
    2b08:	e2877008 	add	r7, r7, #8
    2b0c:	eaffff73 	b	28e0 <_malloc_r+0x98>
    2b10:	e5967008 	ldr	r7, [r6, #8]
    2b14:	e5978004 	ldr	r8, [r7, #4]
    2b18:	e3c88003 	bic	r8, r8, #3
    2b1c:	e1540008 	cmp	r4, r8
    2b20:	93a03000 	movls	r3, #0
    2b24:	83a03001 	movhi	r3, #1
    2b28:	e0642008 	rsb	r2, r4, r8
    2b2c:	e352000f 	cmp	r2, #15
    2b30:	d3833001 	orrle	r3, r3, #1
    2b34:	e3530000 	cmp	r3, #0
    2b38:	0a000069 	beq	2ce4 <_malloc_r+0x49c>
    2b3c:	e59f9414 	ldr	r9, [pc, #1044]	; 2f58 <_malloc_r+0x710>
    2b40:	e59f3408 	ldr	r3, [pc, #1032]	; 2f50 <_malloc_r+0x708>
    2b44:	e599b000 	ldr	fp, [r9]
    2b48:	e5933408 	ldr	r3, [r3, #1032]	; 0x408
    2b4c:	e084b00b 	add	fp, r4, fp
    2b50:	e3730001 	cmn	r3, #1
    2b54:	128bba01 	addne	fp, fp, #4096	; 0x1000
    2b58:	128bb00f 	addne	fp, fp, #15
    2b5c:	13cbbeff 	bicne	fp, fp, #4080	; 0xff0
    2b60:	028bb010 	addeq	fp, fp, #16
    2b64:	13cbb00f 	bicne	fp, fp, #15
    2b68:	e1a00005 	mov	r0, r5
    2b6c:	e1a0100b 	mov	r1, fp
    2b70:	eb0000fb 	bl	2f64 <_sbrk_r>
    2b74:	e3700001 	cmn	r0, #1
    2b78:	e1a0a000 	mov	sl, r0
    2b7c:	0a0000de 	beq	2efc <_malloc_r+0x6b4>
    2b80:	e0872008 	add	r2, r7, r8
    2b84:	e1520000 	cmp	r2, r0
    2b88:	8a0000c2 	bhi	2e98 <_malloc_r+0x650>
    2b8c:	e5993004 	ldr	r3, [r9, #4]
    2b90:	e152000a 	cmp	r2, sl
    2b94:	e08b3003 	add	r3, fp, r3
    2b98:	e5893004 	str	r3, [r9, #4]
    2b9c:	0a0000da 	beq	2f0c <_malloc_r+0x6c4>
    2ba0:	e5961408 	ldr	r1, [r6, #1032]	; 0x408
    2ba4:	e3710001 	cmn	r1, #1
    2ba8:	1062200a 	rsbne	r2, r2, sl
    2bac:	059f339c 	ldreq	r3, [pc, #924]	; 2f50 <_malloc_r+0x708>
    2bb0:	10833002 	addne	r3, r3, r2
    2bb4:	0583a408 	streq	sl, [r3, #1032]	; 0x408
    2bb8:	15893004 	strne	r3, [r9, #4]
    2bbc:	e21a3007 	ands	r3, sl, #7
    2bc0:	12632008 	rsbne	r2, r3, #8
    2bc4:	108aa002 	addne	sl, sl, r2
    2bc8:	12633a01 	rsbne	r3, r3, #4096	; 0x1000
    2bcc:	12832008 	addne	r2, r3, #8
    2bd0:	e08a300b 	add	r3, sl, fp
    2bd4:	03a02a01 	moveq	r2, #4096	; 0x1000
    2bd8:	e1a03a03 	lsl	r3, r3, #20
    2bdc:	e042ba23 	sub	fp, r2, r3, lsr #20
    2be0:	e1a0100b 	mov	r1, fp
    2be4:	e1a00005 	mov	r0, r5
    2be8:	eb0000dd 	bl	2f64 <_sbrk_r>
    2bec:	e3700001 	cmn	r0, #1
    2bf0:	106a2000 	rsbne	r2, sl, r0
    2bf4:	e5993004 	ldr	r3, [r9, #4]
    2bf8:	1082200b 	addne	r2, r2, fp
    2bfc:	03a0b000 	moveq	fp, #0
    2c00:	13822001 	orrne	r2, r2, #1
    2c04:	03a02001 	moveq	r2, #1
    2c08:	e08b3003 	add	r3, fp, r3
    2c0c:	e1570006 	cmp	r7, r6
    2c10:	e5893004 	str	r3, [r9, #4]
    2c14:	e586a008 	str	sl, [r6, #8]
    2c18:	e58a2004 	str	r2, [sl, #4]
    2c1c:	0a00000d 	beq	2c58 <_malloc_r+0x410>
    2c20:	e358000f 	cmp	r8, #15
    2c24:	9a0000af 	bls	2ee8 <_malloc_r+0x6a0>
    2c28:	e597c004 	ldr	ip, [r7, #4]
    2c2c:	e248200c 	sub	r2, r8, #12
    2c30:	e3c22007 	bic	r2, r2, #7
    2c34:	e20cc001 	and	ip, ip, #1
    2c38:	e0871002 	add	r1, r7, r2
    2c3c:	e3a00005 	mov	r0, #5
    2c40:	e182c00c 	orr	ip, r2, ip
    2c44:	e352000f 	cmp	r2, #15
    2c48:	e587c004 	str	ip, [r7, #4]
    2c4c:	e5810004 	str	r0, [r1, #4]
    2c50:	e5810008 	str	r0, [r1, #8]
    2c54:	8a0000b3 	bhi	2f28 <_malloc_r+0x6e0>
    2c58:	e599202c 	ldr	r2, [r9, #44]	; 0x2c
    2c5c:	e1530002 	cmp	r3, r2
    2c60:	859f22f0 	ldrhi	r2, [pc, #752]	; 2f58 <_malloc_r+0x710>
    2c64:	8582302c 	strhi	r3, [r2, #44]	; 0x2c
    2c68:	e5992030 	ldr	r2, [r9, #48]	; 0x30
    2c6c:	e5967008 	ldr	r7, [r6, #8]
    2c70:	e1530002 	cmp	r3, r2
    2c74:	859f12dc 	ldrhi	r1, [pc, #732]	; 2f58 <_malloc_r+0x710>
    2c78:	e5972004 	ldr	r2, [r7, #4]
    2c7c:	85813030 	strhi	r3, [r1, #48]	; 0x30
    2c80:	e3c22003 	bic	r2, r2, #3
    2c84:	e1540002 	cmp	r4, r2
    2c88:	93a03000 	movls	r3, #0
    2c8c:	83a03001 	movhi	r3, #1
    2c90:	e0642002 	rsb	r2, r4, r2
    2c94:	e352000f 	cmp	r2, #15
    2c98:	d3833001 	orrle	r3, r3, #1
    2c9c:	e3530000 	cmp	r3, #0
    2ca0:	0a00000f 	beq	2ce4 <_malloc_r+0x49c>
    2ca4:	e1a00005 	mov	r0, r5
    2ca8:	eb0000ac 	bl	2f60 <__malloc_unlock>
    2cac:	e3a07000 	mov	r7, #0
    2cb0:	eaffff0a 	b	28e0 <_malloc_r+0x98>
    2cb4:	e0872002 	add	r2, r7, r2
    2cb8:	e5920004 	ldr	r0, [r2, #4]
    2cbc:	e2871008 	add	r1, r7, #8
    2cc0:	e891000a 	ldm	r1, {r1, r3}
    2cc4:	e3800001 	orr	r0, r0, #1
    2cc8:	e5820004 	str	r0, [r2, #4]
    2ccc:	e581300c 	str	r3, [r1, #12]
    2cd0:	e5831008 	str	r1, [r3, #8]
    2cd4:	e1a00005 	mov	r0, r5
    2cd8:	eb0000a0 	bl	2f60 <__malloc_unlock>
    2cdc:	e2877008 	add	r7, r7, #8
    2ce0:	eafffefe 	b	28e0 <_malloc_r+0x98>
    2ce4:	e0873004 	add	r3, r7, r4
    2ce8:	e3822001 	orr	r2, r2, #1
    2cec:	e3844001 	orr	r4, r4, #1
    2cf0:	e5874004 	str	r4, [r7, #4]
    2cf4:	e1a00005 	mov	r0, r5
    2cf8:	e5832004 	str	r2, [r3, #4]
    2cfc:	e5863008 	str	r3, [r6, #8]
    2d00:	e2877008 	add	r7, r7, #8
    2d04:	eb000095 	bl	2f60 <__malloc_unlock>
    2d08:	eafffef4 	b	28e0 <_malloc_r+0x98>
    2d0c:	e1a034a2 	lsr	r3, r2, #9
    2d10:	e3530004 	cmp	r3, #4
    2d14:	91a0a322 	lsrls	sl, r2, #6
    2d18:	928aa038 	addls	sl, sl, #56	; 0x38
    2d1c:	91a0018a 	lslls	r0, sl, #3
    2d20:	9a000014 	bls	2d78 <_malloc_r+0x530>
    2d24:	e3530014 	cmp	r3, #20
    2d28:	9283a05b 	addls	sl, r3, #91	; 0x5b
    2d2c:	91a0018a 	lslls	r0, sl, #3
    2d30:	9a000010 	bls	2d78 <_malloc_r+0x530>
    2d34:	e3530054 	cmp	r3, #84	; 0x54
    2d38:	91a0a622 	lsrls	sl, r2, #12
    2d3c:	928aa06e 	addls	sl, sl, #110	; 0x6e
    2d40:	91a0018a 	lslls	r0, sl, #3
    2d44:	9a00000b 	bls	2d78 <_malloc_r+0x530>
    2d48:	e3530f55 	cmp	r3, #340	; 0x154
    2d4c:	91a0a7a2 	lsrls	sl, r2, #15
    2d50:	928aa077 	addls	sl, sl, #119	; 0x77
    2d54:	91a0018a 	lslls	r0, sl, #3
    2d58:	9a000006 	bls	2d78 <_malloc_r+0x530>
    2d5c:	e59f11f0 	ldr	r1, [pc, #496]	; 2f54 <_malloc_r+0x70c>
    2d60:	e1530001 	cmp	r3, r1
    2d64:	91a0a922 	lsrls	sl, r2, #18
    2d68:	928aa07c 	addls	sl, sl, #124	; 0x7c
    2d6c:	91a0018a 	lslls	r0, sl, #3
    2d70:	83a00e3f 	movhi	r0, #1008	; 0x3f0
    2d74:	83a0a07e 	movhi	sl, #126	; 0x7e
    2d78:	e0860000 	add	r0, r6, r0
    2d7c:	e5903008 	ldr	r3, [r0, #8]
    2d80:	e1530000 	cmp	r3, r0
    2d84:	e59fc1c4 	ldr	ip, [pc, #452]	; 2f50 <_malloc_r+0x708>
    2d88:	1a000003 	bne	2d9c <_malloc_r+0x554>
    2d8c:	ea00004e 	b	2ecc <_malloc_r+0x684>
    2d90:	e5933008 	ldr	r3, [r3, #8]
    2d94:	e1500003 	cmp	r0, r3
    2d98:	0a000003 	beq	2dac <_malloc_r+0x564>
    2d9c:	e5931004 	ldr	r1, [r3, #4]
    2da0:	e3c11003 	bic	r1, r1, #3
    2da4:	e1520001 	cmp	r2, r1
    2da8:	3afffff8 	bcc	2d90 <_malloc_r+0x548>
    2dac:	e593200c 	ldr	r2, [r3, #12]
    2db0:	e5961004 	ldr	r1, [r6, #4]
    2db4:	e587200c 	str	r2, [r7, #12]
    2db8:	e5873008 	str	r3, [r7, #8]
    2dbc:	e583700c 	str	r7, [r3, #12]
    2dc0:	e5827008 	str	r7, [r2, #8]
    2dc4:	eafffefb 	b	29b8 <_malloc_r+0x170>
    2dc8:	e0872004 	add	r2, r7, r4
    2dcc:	e3810001 	orr	r0, r1, #1
    2dd0:	e3844001 	orr	r4, r4, #1
    2dd4:	e5874004 	str	r4, [r7, #4]
    2dd8:	e5832014 	str	r2, [r3, #20]
    2ddc:	e5832010 	str	r2, [r3, #16]
    2de0:	e582800c 	str	r8, [r2, #12]
    2de4:	e9820101 	stmib	r2, {r0, r8}
    2de8:	e7821001 	str	r1, [r2, r1]
    2dec:	e1a00005 	mov	r0, r5
    2df0:	eb00005a 	bl	2f60 <__malloc_unlock>
    2df4:	e2877008 	add	r7, r7, #8
    2df8:	eafffeb8 	b	28e0 <_malloc_r+0x98>
    2dfc:	e2877001 	add	r7, r7, #1
    2e00:	e3170003 	tst	r7, #3
    2e04:	e28cc008 	add	ip, ip, #8
    2e08:	1afffefd 	bne	2a04 <_malloc_r+0x1bc>
    2e0c:	e31e0003 	tst	lr, #3
    2e10:	e24a3008 	sub	r3, sl, #8
    2e14:	0a000049 	beq	2f40 <_malloc_r+0x6f8>
    2e18:	e59aa000 	ldr	sl, [sl]
    2e1c:	e15a0003 	cmp	sl, r3
    2e20:	e24ee001 	sub	lr, lr, #1
    2e24:	0afffff8 	beq	2e0c <_malloc_r+0x5c4>
    2e28:	e5963004 	ldr	r3, [r6, #4]
    2e2c:	e1a00080 	lsl	r0, r0, #1
    2e30:	e1500003 	cmp	r0, r3
    2e34:	8affff35 	bhi	2b10 <_malloc_r+0x2c8>
    2e38:	e3500000 	cmp	r0, #0
    2e3c:	0affff33 	beq	2b10 <_malloc_r+0x2c8>
    2e40:	e1130000 	tst	r3, r0
    2e44:	0a00001a 	beq	2eb4 <_malloc_r+0x66c>
    2e48:	e1a0e007 	mov	lr, r7
    2e4c:	eafffee9 	b	29f8 <_malloc_r+0x1b0>
    2e50:	e2873008 	add	r3, r7, #8
    2e54:	e5977014 	ldr	r7, [r7, #20]
    2e58:	e1530007 	cmp	r3, r7
    2e5c:	028ee002 	addeq	lr, lr, #2
    2e60:	0afffeb7 	beq	2944 <_malloc_r+0xfc>
    2e64:	eafffe90 	b	28ac <_malloc_r+0x64>
    2e68:	e0831001 	add	r1, r3, r1
    2e6c:	e5910004 	ldr	r0, [r1, #4]
    2e70:	e1a07003 	mov	r7, r3
    2e74:	e5b72008 	ldr	r2, [r7, #8]!
    2e78:	e593300c 	ldr	r3, [r3, #12]
    2e7c:	e3800001 	orr	r0, r0, #1
    2e80:	e5810004 	str	r0, [r1, #4]
    2e84:	e582300c 	str	r3, [r2, #12]
    2e88:	e5832008 	str	r2, [r3, #8]
    2e8c:	e1a00005 	mov	r0, r5
    2e90:	eb000032 	bl	2f60 <__malloc_unlock>
    2e94:	eafffe91 	b	28e0 <_malloc_r+0x98>
    2e98:	e1570006 	cmp	r7, r6
    2e9c:	0affff3a 	beq	2b8c <_malloc_r+0x344>
    2ea0:	e59f30a8 	ldr	r3, [pc, #168]	; 2f50 <_malloc_r+0x708>
    2ea4:	e5937008 	ldr	r7, [r3, #8]
    2ea8:	e5972004 	ldr	r2, [r7, #4]
    2eac:	e3c22003 	bic	r2, r2, #3
    2eb0:	eaffff73 	b	2c84 <_malloc_r+0x43c>
    2eb4:	e1a00080 	lsl	r0, r0, #1
    2eb8:	e1100003 	tst	r0, r3
    2ebc:	e2877004 	add	r7, r7, #4
    2ec0:	0afffffb 	beq	2eb4 <_malloc_r+0x66c>
    2ec4:	e1a0e007 	mov	lr, r7
    2ec8:	eafffeca 	b	29f8 <_malloc_r+0x1b0>
    2ecc:	e59c2004 	ldr	r2, [ip, #4]
    2ed0:	e1a0a14a 	asr	sl, sl, #2
    2ed4:	e3a01001 	mov	r1, #1
    2ed8:	e1821a11 	orr	r1, r2, r1, lsl sl
    2edc:	e1a02003 	mov	r2, r3
    2ee0:	e58c1004 	str	r1, [ip, #4]
    2ee4:	eaffffb2 	b	2db4 <_malloc_r+0x56c>
    2ee8:	e3a03001 	mov	r3, #1
    2eec:	e58a3004 	str	r3, [sl, #4]
    2ef0:	e1a0700a 	mov	r7, sl
    2ef4:	e3a02000 	mov	r2, #0
    2ef8:	eaffff61 	b	2c84 <_malloc_r+0x43c>
    2efc:	e5967008 	ldr	r7, [r6, #8]
    2f00:	e5972004 	ldr	r2, [r7, #4]
    2f04:	e3c22003 	bic	r2, r2, #3
    2f08:	eaffff5d 	b	2c84 <_malloc_r+0x43c>
    2f0c:	e1b01a02 	lsls	r1, r2, #20
    2f10:	1affff22 	bne	2ba0 <_malloc_r+0x358>
    2f14:	e5962008 	ldr	r2, [r6, #8]
    2f18:	e08b1008 	add	r1, fp, r8
    2f1c:	e3811001 	orr	r1, r1, #1
    2f20:	e5821004 	str	r1, [r2, #4]
    2f24:	eaffff4b 	b	2c58 <_malloc_r+0x410>
    2f28:	e1a00005 	mov	r0, r5
    2f2c:	e2871008 	add	r1, r7, #8
    2f30:	eb000409 	bl	3f5c <_free_r>
    2f34:	e59f301c 	ldr	r3, [pc, #28]	; 2f58 <_malloc_r+0x710>
    2f38:	e5933004 	ldr	r3, [r3, #4]
    2f3c:	eaffff45 	b	2c58 <_malloc_r+0x410>
    2f40:	e5963004 	ldr	r3, [r6, #4]
    2f44:	e1c33000 	bic	r3, r3, r0
    2f48:	e5863004 	str	r3, [r6, #4]
    2f4c:	eaffffb6 	b	2e2c <_malloc_r+0x5e4>
    2f50:	40000200 	.word	0x40000200
    2f54:	00000554 	.word	0x00000554
    2f58:	40000a44 	.word	0x40000a44

00002f5c <__malloc_lock>:
    2f5c:	e12fff1e 	bx	lr

00002f60 <__malloc_unlock>:
    2f60:	e12fff1e 	bx	lr

00002f64 <_sbrk_r>:
    2f64:	e92d4038 	push	{r3, r4, r5, lr}
    2f68:	e59f4030 	ldr	r4, [pc, #48]	; 2fa0 <_sbrk_r+0x3c>
    2f6c:	e3a03000 	mov	r3, #0
    2f70:	e1a05000 	mov	r5, r0
    2f74:	e1a00001 	mov	r0, r1
    2f78:	e5843000 	str	r3, [r4]
    2f7c:	eb000234 	bl	3854 <_sbrk>
    2f80:	e3700001 	cmn	r0, #1
    2f84:	0a000001 	beq	2f90 <_sbrk_r+0x2c>
    2f88:	e8bd4038 	pop	{r3, r4, r5, lr}
    2f8c:	e12fff1e 	bx	lr
    2f90:	e5943000 	ldr	r3, [r4]
    2f94:	e3530000 	cmp	r3, #0
    2f98:	15853000 	strne	r3, [r5]
    2f9c:	eafffff9 	b	2f88 <_sbrk_r+0x24>
    2fa0:	40003330 	.word	0x40003330

00002fa4 <strcmp>:
    2fa4:	e0202001 	eor	r2, r0, r1
    2fa8:	e3120003 	tst	r2, #3
    2fac:	1a000021 	bne	3038 <strcmp_unaligned>
    2fb0:	e2102003 	ands	r2, r0, #3
    2fb4:	e3c00003 	bic	r0, r0, #3
    2fb8:	e3c11003 	bic	r1, r1, #3
    2fbc:	e490c004 	ldr	ip, [r0], #4
    2fc0:	04913004 	ldreq	r3, [r1], #4
    2fc4:	0a000006 	beq	2fe4 <strcmp+0x40>
    2fc8:	e2222003 	eor	r2, r2, #3
    2fcc:	e1a02182 	lsl	r2, r2, #3
    2fd0:	e3e034ff 	mvn	r3, #-16777216	; 0xff000000
    2fd4:	e1a02233 	lsr	r2, r3, r2
    2fd8:	e4913004 	ldr	r3, [r1], #4
    2fdc:	e18cc002 	orr	ip, ip, r2
    2fe0:	e1833002 	orr	r3, r3, r2
    2fe4:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
    2fe8:	e3a04001 	mov	r4, #1
    2fec:	e1844404 	orr	r4, r4, r4, lsl #8
    2ff0:	e1844804 	orr	r4, r4, r4, lsl #16
    2ff4:	e04c2004 	sub	r2, ip, r4
    2ff8:	e15c0003 	cmp	ip, r3
    2ffc:	01c2200c 	biceq	r2, r2, ip
    3000:	01120384 	tsteq	r2, r4, lsl #7
    3004:	0490c004 	ldreq	ip, [r0], #4
    3008:	04913004 	ldreq	r3, [r1], #4
    300c:	0afffff8 	beq	2ff4 <strcmp+0x50>
    3010:	e1a00c0c 	lsl	r0, ip, #24
    3014:	e1a0c42c 	lsr	ip, ip, #8
    3018:	e3500001 	cmp	r0, #1
    301c:	21500c03 	cmpcs	r0, r3, lsl #24
    3020:	01a03423 	lsreq	r3, r3, #8
    3024:	0afffff9 	beq	3010 <strcmp+0x6c>
    3028:	e20330ff 	and	r3, r3, #255	; 0xff
    302c:	e0630c20 	rsb	r0, r3, r0, lsr #24
    3030:	e49d4004 	pop	{r4}		; (ldr r4, [sp], #4)
    3034:	e12fff1e 	bx	lr

00003038 <strcmp_unaligned>:
    3038:	e3100003 	tst	r0, #3
    303c:	0a000006 	beq	305c <strcmp_unaligned+0x24>
    3040:	e4d02001 	ldrb	r2, [r0], #1
    3044:	e4d13001 	ldrb	r3, [r1], #1
    3048:	e3520001 	cmp	r2, #1
    304c:	21520003 	cmpcs	r2, r3
    3050:	0afffff8 	beq	3038 <strcmp_unaligned>
    3054:	e0420003 	sub	r0, r2, r3
    3058:	e12fff1e 	bx	lr
    305c:	e52d5004 	push	{r5}		; (str r5, [sp, #-4]!)
    3060:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
    3064:	e3a02001 	mov	r2, #1
    3068:	e1822402 	orr	r2, r2, r2, lsl #8
    306c:	e1822802 	orr	r2, r2, r2, lsl #16
    3070:	e201c003 	and	ip, r1, #3
    3074:	e3c11003 	bic	r1, r1, #3
    3078:	e4904004 	ldr	r4, [r0], #4
    307c:	e4915004 	ldr	r5, [r1], #4
    3080:	e35c0002 	cmp	ip, #2
    3084:	0a000017 	beq	30e8 <strcmp_unaligned+0xb0>
    3088:	8a00002d 	bhi	3144 <strcmp_unaligned+0x10c>
    308c:	e3c4c4ff 	bic	ip, r4, #-16777216	; 0xff000000
    3090:	e15c0425 	cmp	ip, r5, lsr #8
    3094:	e0443002 	sub	r3, r4, r2
    3098:	e1c33004 	bic	r3, r3, r4
    309c:	1a000007 	bne	30c0 <strcmp_unaligned+0x88>
    30a0:	e0133382 	ands	r3, r3, r2, lsl #7
    30a4:	04915004 	ldreq	r5, [r1], #4
    30a8:	1a000006 	bne	30c8 <strcmp_unaligned+0x90>
    30ac:	e02cc004 	eor	ip, ip, r4
    30b0:	e15c0c05 	cmp	ip, r5, lsl #24
    30b4:	1a000008 	bne	30dc <strcmp_unaligned+0xa4>
    30b8:	e4904004 	ldr	r4, [r0], #4
    30bc:	eafffff2 	b	308c <strcmp_unaligned+0x54>
    30c0:	e1a05425 	lsr	r5, r5, #8
    30c4:	ea000037 	b	31a8 <strcmp_unaligned+0x170>
    30c8:	e3d334ff 	bics	r3, r3, #-16777216	; 0xff000000
    30cc:	1a000031 	bne	3198 <strcmp_unaligned+0x160>
    30d0:	e5d15000 	ldrb	r5, [r1]
    30d4:	e1a0cc24 	lsr	ip, r4, #24
    30d8:	ea000032 	b	31a8 <strcmp_unaligned+0x170>
    30dc:	e1a0cc24 	lsr	ip, r4, #24
    30e0:	e20550ff 	and	r5, r5, #255	; 0xff
    30e4:	ea00002f 	b	31a8 <strcmp_unaligned+0x170>
    30e8:	e1a0c804 	lsl	ip, r4, #16
    30ec:	e0443002 	sub	r3, r4, r2
    30f0:	e1a0c82c 	lsr	ip, ip, #16
    30f4:	e1c33004 	bic	r3, r3, r4
    30f8:	e15c0825 	cmp	ip, r5, lsr #16
    30fc:	1a00000e 	bne	313c <strcmp_unaligned+0x104>
    3100:	e0133382 	ands	r3, r3, r2, lsl #7
    3104:	04915004 	ldreq	r5, [r1], #4
    3108:	1a000004 	bne	3120 <strcmp_unaligned+0xe8>
    310c:	e02cc004 	eor	ip, ip, r4
    3110:	e15c0805 	cmp	ip, r5, lsl #16
    3114:	1a000006 	bne	3134 <strcmp_unaligned+0xfc>
    3118:	e4904004 	ldr	r4, [r0], #4
    311c:	eafffff1 	b	30e8 <strcmp_unaligned+0xb0>
    3120:	e1b03803 	lsls	r3, r3, #16
    3124:	1a00001b 	bne	3198 <strcmp_unaligned+0x160>
    3128:	e1d150b0 	ldrh	r5, [r1]
    312c:	e1a0c824 	lsr	ip, r4, #16
    3130:	ea00001c 	b	31a8 <strcmp_unaligned+0x170>
    3134:	e1a05805 	lsl	r5, r5, #16
    3138:	e1a0c824 	lsr	ip, r4, #16
    313c:	e1a05825 	lsr	r5, r5, #16
    3140:	ea000018 	b	31a8 <strcmp_unaligned+0x170>
    3144:	e204c0ff 	and	ip, r4, #255	; 0xff
    3148:	e15c0c25 	cmp	ip, r5, lsr #24
    314c:	e0443002 	sub	r3, r4, r2
    3150:	e1c33004 	bic	r3, r3, r4
    3154:	1a000007 	bne	3178 <strcmp_unaligned+0x140>
    3158:	e0133382 	ands	r3, r3, r2, lsl #7
    315c:	04915004 	ldreq	r5, [r1], #4
    3160:	1a000006 	bne	3180 <strcmp_unaligned+0x148>
    3164:	e02cc004 	eor	ip, ip, r4
    3168:	e15c0405 	cmp	ip, r5, lsl #8
    316c:	1a000006 	bne	318c <strcmp_unaligned+0x154>
    3170:	e4904004 	ldr	r4, [r0], #4
    3174:	eafffff2 	b	3144 <strcmp_unaligned+0x10c>
    3178:	e1a05c25 	lsr	r5, r5, #24
    317c:	ea000009 	b	31a8 <strcmp_unaligned+0x170>
    3180:	e31400ff 	tst	r4, #255	; 0xff
    3184:	0a000003 	beq	3198 <strcmp_unaligned+0x160>
    3188:	e4915004 	ldr	r5, [r1], #4
    318c:	e1a0c424 	lsr	ip, r4, #8
    3190:	e3c554ff 	bic	r5, r5, #-16777216	; 0xff000000
    3194:	ea000003 	b	31a8 <strcmp_unaligned+0x170>
    3198:	e3a00000 	mov	r0, #0
    319c:	e49d4004 	pop	{r4}		; (ldr r4, [sp], #4)
    31a0:	e49d5004 	pop	{r5}		; (ldr r5, [sp], #4)
    31a4:	e12fff1e 	bx	lr
    31a8:	e20c20ff 	and	r2, ip, #255	; 0xff
    31ac:	e20500ff 	and	r0, r5, #255	; 0xff
    31b0:	e3500001 	cmp	r0, #1
    31b4:	21500002 	cmpcs	r0, r2
    31b8:	01a0c42c 	lsreq	ip, ip, #8
    31bc:	01a05425 	lsreq	r5, r5, #8
    31c0:	0afffff8 	beq	31a8 <strcmp_unaligned+0x170>
    31c4:	e0420000 	sub	r0, r2, r0
    31c8:	e49d4004 	pop	{r4}		; (ldr r4, [sp], #4)
    31cc:	e49d5004 	pop	{r5}		; (ldr r5, [sp], #4)
    31d0:	e12fff1e 	bx	lr

000031d4 <strlen>:
    31d4:	e3c01003 	bic	r1, r0, #3
    31d8:	e2100003 	ands	r0, r0, #3
    31dc:	e2600000 	rsb	r0, r0, #0
    31e0:	e4913004 	ldr	r3, [r1], #4
    31e4:	e280c004 	add	ip, r0, #4
    31e8:	e1a0c18c 	lsl	ip, ip, #3
    31ec:	e3e02000 	mvn	r2, #0
    31f0:	11833c32 	orrne	r3, r3, r2, lsr ip
    31f4:	e3a0c001 	mov	ip, #1
    31f8:	e18cc40c 	orr	ip, ip, ip, lsl #8
    31fc:	e18cc80c 	orr	ip, ip, ip, lsl #16
    3200:	e043200c 	sub	r2, r3, ip
    3204:	e1c22003 	bic	r2, r2, r3
    3208:	e012238c 	ands	r2, r2, ip, lsl #7
    320c:	04913004 	ldreq	r3, [r1], #4
    3210:	02800004 	addeq	r0, r0, #4
    3214:	0afffff9 	beq	3200 <strlen+0x2c>
    3218:	e31300ff 	tst	r3, #255	; 0xff
    321c:	12800001 	addne	r0, r0, #1
    3220:	13130cff 	tstne	r3, #65280	; 0xff00
    3224:	12800001 	addne	r0, r0, #1
    3228:	131308ff 	tstne	r3, #16711680	; 0xff0000
    322c:	12800001 	addne	r0, r0, #1
    3230:	e12fff1e 	bx	lr

00003234 <error>:
    3234:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    3238:	e1a07000 	mov	r7, r0
    323c:	eb000249 	bl	3b68 <__errno>
    3240:	e3a05000 	mov	r5, #0
    3244:	e1a06000 	mov	r6, r0
    3248:	e3a04013 	mov	r4, #19
    324c:	e1a00004 	mov	r0, r4
    3250:	e1a01005 	mov	r1, r5
    3254:	ef123456 	svc	0x00123456
    3258:	e1a04000 	mov	r4, r0
    325c:	e5864000 	str	r4, [r6]
    3260:	e1a00007 	mov	r0, r7
    3264:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
    3268:	e12fff1e 	bx	lr

0000326c <remap_handle>:
    326c:	e59f3068 	ldr	r3, [pc, #104]	; 32dc <remap_handle+0x70>
    3270:	e5933000 	ldr	r3, [r3]
    3274:	e3530000 	cmp	r3, #0
    3278:	e92d4010 	push	{r4, lr}
    327c:	e1a04000 	mov	r4, r0
    3280:	0a000002 	beq	3290 <remap_handle+0x24>
    3284:	e5932038 	ldr	r2, [r3, #56]	; 0x38
    3288:	e3520000 	cmp	r2, #0
    328c:	0a00000c 	beq	32c4 <remap_handle+0x58>
    3290:	e3540000 	cmp	r4, #0
    3294:	0a000007 	beq	32b8 <remap_handle+0x4c>
    3298:	e3540001 	cmp	r4, #1
    329c:	0a00000b 	beq	32d0 <remap_handle+0x64>
    32a0:	e3540002 	cmp	r4, #2
    32a4:	059f3034 	ldreq	r3, [pc, #52]	; 32e0 <remap_handle+0x74>
    32a8:	05930008 	ldreq	r0, [r3, #8]
    32ac:	12440020 	subne	r0, r4, #32
    32b0:	e8bd4010 	pop	{r4, lr}
    32b4:	e12fff1e 	bx	lr
    32b8:	e59f3020 	ldr	r3, [pc, #32]	; 32e0 <remap_handle+0x74>
    32bc:	e5930000 	ldr	r0, [r3]
    32c0:	eafffffa 	b	32b0 <remap_handle+0x44>
    32c4:	e1a00003 	mov	r0, r3
    32c8:	eb000269 	bl	3c74 <__sinit>
    32cc:	eaffffef 	b	3290 <remap_handle+0x24>
    32d0:	e59f3008 	ldr	r3, [pc, #8]	; 32e0 <remap_handle+0x74>
    32d4:	e5930004 	ldr	r0, [r3, #4]
    32d8:	eafffff4 	b	32b0 <remap_handle+0x44>
    32dc:	40000610 	.word	0x40000610
    32e0:	40000a78 	.word	0x40000a78

000032e4 <initialise_monitor_handles>:
    32e4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    32e8:	e59f609c 	ldr	r6, [pc, #156]	; 338c <initialise_monitor_handles+0xa8>
    32ec:	e24dd010 	sub	sp, sp, #16
    32f0:	e3a07003 	mov	r7, #3
    32f4:	e3a09000 	mov	r9, #0
    32f8:	e58d6004 	str	r6, [sp, #4]
    32fc:	e3a0a001 	mov	sl, #1
    3300:	e58d700c 	str	r7, [sp, #12]
    3304:	e28d8004 	add	r8, sp, #4
    3308:	e58d9008 	str	r9, [sp, #8]
    330c:	e1a0000a 	mov	r0, sl
    3310:	e1a01008 	mov	r1, r8
    3314:	ef123456 	svc	0x00123456
    3318:	e1a05000 	mov	r5, r0
    331c:	e59f406c 	ldr	r4, [pc, #108]	; 3390 <initialise_monitor_handles+0xac>
    3320:	e3a03004 	mov	r3, #4
    3324:	e58d6004 	str	r6, [sp, #4]
    3328:	e5845000 	str	r5, [r4]
    332c:	e58d700c 	str	r7, [sp, #12]
    3330:	e58d3008 	str	r3, [sp, #8]
    3334:	e1a0000a 	mov	r0, sl
    3338:	e1a01008 	mov	r1, r8
    333c:	ef123456 	svc	0x00123456
    3340:	e1a08000 	mov	r8, r0
    3344:	e3e02000 	mvn	r2, #0
    3348:	e5848008 	str	r8, [r4, #8]
    334c:	e5848004 	str	r8, [r4, #4]
    3350:	e284400c 	add	r4, r4, #12
    3354:	e7842009 	str	r2, [r4, r9]
    3358:	e2899008 	add	r9, r9, #8
    335c:	e35900a0 	cmp	r9, #160	; 0xa0
    3360:	e59f3028 	ldr	r3, [pc, #40]	; 3390 <initialise_monitor_handles+0xac>
    3364:	1afffffa 	bne	3354 <initialise_monitor_handles+0x70>
    3368:	e5931000 	ldr	r1, [r3]
    336c:	e3a02000 	mov	r2, #0
    3370:	e583100c 	str	r1, [r3, #12]
    3374:	e5832010 	str	r2, [r3, #16]
    3378:	e5838014 	str	r8, [r3, #20]
    337c:	e5832018 	str	r2, [r3, #24]
    3380:	e28dd010 	add	sp, sp, #16
    3384:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    3388:	e12fff1e 	bx	lr
    338c:	00005034 	.word	0x00005034
    3390:	40000a78 	.word	0x40000a78

00003394 <_swiread>:
    3394:	e92d4030 	push	{r4, r5, lr}
    3398:	e24dd014 	sub	sp, sp, #20
    339c:	e1a04001 	mov	r4, r1
    33a0:	e1a05002 	mov	r5, r2
    33a4:	ebffffb0 	bl	326c <remap_handle>
    33a8:	e98d0031 	stmib	sp, {r0, r4, r5}
    33ac:	e28d5004 	add	r5, sp, #4
    33b0:	e3a04006 	mov	r4, #6
    33b4:	e1a00004 	mov	r0, r4
    33b8:	e1a01005 	mov	r1, r5
    33bc:	ef123456 	svc	0x00123456
    33c0:	e1a04000 	mov	r4, r0
    33c4:	e1a00004 	mov	r0, r4
    33c8:	e28dd014 	add	sp, sp, #20
    33cc:	e8bd4030 	pop	{r4, r5, lr}
    33d0:	e12fff1e 	bx	lr

000033d4 <_read>:
    33d4:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    33d8:	e1a05002 	mov	r5, r2
    33dc:	e1a06000 	mov	r6, r0
    33e0:	e1a07001 	mov	r7, r1
    33e4:	ebffffa0 	bl	326c <remap_handle>
    33e8:	e59f2064 	ldr	r2, [pc, #100]	; 3454 <_read+0x80>
    33ec:	e3a04000 	mov	r4, #0
    33f0:	e7923184 	ldr	r3, [r2, r4, lsl #3]
    33f4:	e1500003 	cmp	r0, r3
    33f8:	0a000002 	beq	3408 <_read+0x34>
    33fc:	e2844001 	add	r4, r4, #1
    3400:	e3540014 	cmp	r4, #20
    3404:	1afffff9 	bne	33f0 <_read+0x1c>
    3408:	e1a00006 	mov	r0, r6
    340c:	e1a01007 	mov	r1, r7
    3410:	e1a02005 	mov	r2, r5
    3414:	ebffffde 	bl	3394 <_swiread>
    3418:	e3500000 	cmp	r0, #0
    341c:	ba000009 	blt	3448 <_read+0x74>
    3420:	e3540014 	cmp	r4, #20
    3424:	159f302c 	ldrne	r3, [pc, #44]	; 3458 <_read+0x84>
    3428:	10834184 	addne	r4, r3, r4, lsl #3
    342c:	15943010 	ldrne	r3, [r4, #16]
    3430:	10600005 	rsbne	r0, r0, r5
    3434:	10833000 	addne	r3, r3, r0
    3438:	00600005 	rsbeq	r0, r0, r5
    343c:	15843010 	strne	r3, [r4, #16]
    3440:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
    3444:	e12fff1e 	bx	lr
    3448:	e3e00000 	mvn	r0, #0
    344c:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
    3450:	eaffff77 	b	3234 <error>
    3454:	40000a84 	.word	0x40000a84
    3458:	40000a78 	.word	0x40000a78

0000345c <_swilseek>:
    345c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    3460:	e24dd008 	sub	sp, sp, #8
    3464:	e1a05002 	mov	r5, r2
    3468:	e1a08000 	mov	r8, r0
    346c:	e1a06001 	mov	r6, r1
    3470:	ebffff7d 	bl	326c <remap_handle>
    3474:	e59f20d8 	ldr	r2, [pc, #216]	; 3554 <_swilseek+0xf8>
    3478:	e3a04000 	mov	r4, #0
    347c:	e7923184 	ldr	r3, [r2, r4, lsl #3]
    3480:	e1500003 	cmp	r0, r3
    3484:	0a000002 	beq	3494 <_swilseek+0x38>
    3488:	e2844001 	add	r4, r4, #1
    348c:	e3540014 	cmp	r4, #20
    3490:	1afffff9 	bne	347c <_swilseek+0x20>
    3494:	e3550001 	cmp	r5, #1
    3498:	0a000024 	beq	3530 <_swilseek+0xd4>
    349c:	e3550002 	cmp	r5, #2
    34a0:	11a0700d 	movne	r7, sp
    34a4:	0a000018 	beq	350c <_swilseek+0xb0>
    34a8:	e1a00008 	mov	r0, r8
    34ac:	ebffff6e 	bl	326c <remap_handle>
    34b0:	e3a0500a 	mov	r5, #10
    34b4:	e88d0041 	stm	sp, {r0, r6}
    34b8:	e1a00005 	mov	r0, r5
    34bc:	e1a01007 	mov	r1, r7
    34c0:	ef123456 	svc	0x00123456
    34c4:	e1a05000 	mov	r5, r0
    34c8:	e2755001 	rsbs	r5, r5, #1
    34cc:	33a05000 	movcc	r5, #0
    34d0:	e3540014 	cmp	r4, #20
    34d4:	03a03000 	moveq	r3, #0
    34d8:	12053001 	andne	r3, r5, #1
    34dc:	e3530000 	cmp	r3, #0
    34e0:	1a000005 	bne	34fc <_swilseek+0xa0>
    34e4:	e3550000 	cmp	r5, #0
    34e8:	03e06000 	mvneq	r6, #0
    34ec:	e1a00006 	mov	r0, r6
    34f0:	e28dd008 	add	sp, sp, #8
    34f4:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    34f8:	e12fff1e 	bx	lr
    34fc:	e59f3054 	ldr	r3, [pc, #84]	; 3558 <_swilseek+0xfc>
    3500:	e0834184 	add	r4, r3, r4, lsl #3
    3504:	e5846010 	str	r6, [r4, #16]
    3508:	eafffff7 	b	34ec <_swilseek+0x90>
    350c:	e28d7008 	add	r7, sp, #8
    3510:	e5270008 	str	r0, [r7, #-8]!
    3514:	e3a0500c 	mov	r5, #12
    3518:	e1a00005 	mov	r0, r5
    351c:	e1a01007 	mov	r1, r7
    3520:	ef123456 	svc	0x00123456
    3524:	e1a05000 	mov	r5, r0
    3528:	e0866005 	add	r6, r6, r5
    352c:	eaffffdd 	b	34a8 <_swilseek+0x4c>
    3530:	e3540014 	cmp	r4, #20
    3534:	03e06000 	mvneq	r6, #0
    3538:	0affffeb 	beq	34ec <_swilseek+0x90>
    353c:	e59f3014 	ldr	r3, [pc, #20]	; 3558 <_swilseek+0xfc>
    3540:	e0833184 	add	r3, r3, r4, lsl #3
    3544:	e5933010 	ldr	r3, [r3, #16]
    3548:	e1a0700d 	mov	r7, sp
    354c:	e0866003 	add	r6, r6, r3
    3550:	eaffffd4 	b	34a8 <_swilseek+0x4c>
    3554:	40000a84 	.word	0x40000a84
    3558:	40000a78 	.word	0x40000a78

0000355c <_lseek>:
    355c:	e92d4008 	push	{r3, lr}
    3560:	ebffffbd 	bl	345c <_swilseek>
    3564:	e3700001 	cmn	r0, #1
    3568:	0a000001 	beq	3574 <_lseek+0x18>
    356c:	e8bd4008 	pop	{r3, lr}
    3570:	e12fff1e 	bx	lr
    3574:	e8bd4008 	pop	{r3, lr}
    3578:	eaffff2d 	b	3234 <error>

0000357c <_swiwrite>:
    357c:	e92d4030 	push	{r4, r5, lr}
    3580:	e24dd014 	sub	sp, sp, #20
    3584:	e1a04001 	mov	r4, r1
    3588:	e1a05002 	mov	r5, r2
    358c:	ebffff36 	bl	326c <remap_handle>
    3590:	e98d0031 	stmib	sp, {r0, r4, r5}
    3594:	e28d5004 	add	r5, sp, #4
    3598:	e3a04005 	mov	r4, #5
    359c:	e1a00004 	mov	r0, r4
    35a0:	e1a01005 	mov	r1, r5
    35a4:	ef123456 	svc	0x00123456
    35a8:	e1a04000 	mov	r4, r0
    35ac:	e1a00004 	mov	r0, r4
    35b0:	e28dd014 	add	sp, sp, #20
    35b4:	e8bd4030 	pop	{r4, r5, lr}
    35b8:	e12fff1e 	bx	lr

000035bc <_write>:
    35bc:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    35c0:	e1a05002 	mov	r5, r2
    35c4:	e1a06000 	mov	r6, r0
    35c8:	e1a07001 	mov	r7, r1
    35cc:	ebffff26 	bl	326c <remap_handle>
    35d0:	e59f2068 	ldr	r2, [pc, #104]	; 3640 <_write+0x84>
    35d4:	e3a04000 	mov	r4, #0
    35d8:	e7923184 	ldr	r3, [r2, r4, lsl #3]
    35dc:	e1500003 	cmp	r0, r3
    35e0:	0a000002 	beq	35f0 <_write+0x34>
    35e4:	e2844001 	add	r4, r4, #1
    35e8:	e3540014 	cmp	r4, #20
    35ec:	1afffff9 	bne	35d8 <_write+0x1c>
    35f0:	e1a00006 	mov	r0, r6
    35f4:	e1a01007 	mov	r1, r7
    35f8:	e1a02005 	mov	r2, r5
    35fc:	ebffffde 	bl	357c <_swiwrite>
    3600:	e3700001 	cmn	r0, #1
    3604:	11500005 	cmpne	r0, r5
    3608:	0a000009 	beq	3634 <_write+0x78>
    360c:	e3540014 	cmp	r4, #20
    3610:	159f302c 	ldrne	r3, [pc, #44]	; 3644 <_write+0x88>
    3614:	10834184 	addne	r4, r3, r4, lsl #3
    3618:	15943010 	ldrne	r3, [r4, #16]
    361c:	10600005 	rsbne	r0, r0, r5
    3620:	10833000 	addne	r3, r3, r0
    3624:	00600005 	rsbeq	r0, r0, r5
    3628:	15843010 	strne	r3, [r4, #16]
    362c:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
    3630:	e12fff1e 	bx	lr
    3634:	e3e00000 	mvn	r0, #0
    3638:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
    363c:	eafffefc 	b	3234 <error>
    3640:	40000a84 	.word	0x40000a84
    3644:	40000a78 	.word	0x40000a78

00003648 <_swiopen>:
    3648:	e92d4070 	push	{r4, r5, r6, lr}
    364c:	e59f30c0 	ldr	r3, [pc, #192]	; 3714 <_swiopen+0xcc>
    3650:	e1a02000 	mov	r2, r0
    3654:	e24dd010 	sub	sp, sp, #16
    3658:	e3a00000 	mov	r0, #0
    365c:	e793c180 	ldr	ip, [r3, r0, lsl #3]
    3660:	e37c0001 	cmn	ip, #1
    3664:	e1a06180 	lsl	r6, r0, #3
    3668:	e2800001 	add	r0, r0, #1
    366c:	0a000005 	beq	3688 <_swiopen+0x40>
    3670:	e3500014 	cmp	r0, #20
    3674:	1afffff8 	bne	365c <_swiopen+0x14>
    3678:	e3e00000 	mvn	r0, #0
    367c:	e28dd010 	add	sp, sp, #16
    3680:	e8bd4070 	pop	{r4, r5, r6, lr}
    3684:	e12fff1e 	bx	lr
    3688:	e3110801 	tst	r1, #65536	; 0x10000
    368c:	03a04000 	moveq	r4, #0
    3690:	13a04001 	movne	r4, #1
    3694:	e3110002 	tst	r1, #2
    3698:	13844002 	orrne	r4, r4, #2
    369c:	e3110c02 	tst	r1, #512	; 0x200
    36a0:	13844004 	orrne	r4, r4, #4
    36a4:	e3110b01 	tst	r1, #1024	; 0x400
    36a8:	13844004 	orrne	r4, r4, #4
    36ac:	e3110008 	tst	r1, #8
    36b0:	13c44004 	bicne	r4, r4, #4
    36b4:	e1a00002 	mov	r0, r2
    36b8:	13844008 	orrne	r4, r4, #8
    36bc:	e58d2004 	str	r2, [sp, #4]
    36c0:	ebfffec3 	bl	31d4 <strlen>
    36c4:	e58d4008 	str	r4, [sp, #8]
    36c8:	e58d000c 	str	r0, [sp, #12]
    36cc:	e28d5004 	add	r5, sp, #4
    36d0:	e3a04001 	mov	r4, #1
    36d4:	e1a00004 	mov	r0, r4
    36d8:	e1a01005 	mov	r1, r5
    36dc:	ef123456 	svc	0x00123456
    36e0:	e1a04000 	mov	r4, r0
    36e4:	e3540000 	cmp	r4, #0
    36e8:	ba000006 	blt	3708 <_swiopen+0xc0>
    36ec:	e59f3024 	ldr	r3, [pc, #36]	; 3718 <_swiopen+0xd0>
    36f0:	e0836006 	add	r6, r3, r6
    36f4:	e3a03000 	mov	r3, #0
    36f8:	e586400c 	str	r4, [r6, #12]
    36fc:	e5863010 	str	r3, [r6, #16]
    3700:	e2840020 	add	r0, r4, #32
    3704:	eaffffdc 	b	367c <_swiopen+0x34>
    3708:	e1a00004 	mov	r0, r4
    370c:	ebfffec8 	bl	3234 <error>
    3710:	eaffffd9 	b	367c <_swiopen+0x34>
    3714:	40000a84 	.word	0x40000a84
    3718:	40000a78 	.word	0x40000a78

0000371c <_open>:
    371c:	e92d000e 	push	{r1, r2, r3}
    3720:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    3724:	e59d1004 	ldr	r1, [sp, #4]
    3728:	ebffffc6 	bl	3648 <_swiopen>
    372c:	e3700001 	cmn	r0, #1
    3730:	e1a03000 	mov	r3, r0
    3734:	0a000003 	beq	3748 <_open+0x2c>
    3738:	e1a00003 	mov	r0, r3
    373c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    3740:	e28dd00c 	add	sp, sp, #12
    3744:	e12fff1e 	bx	lr
    3748:	ebfffeb9 	bl	3234 <error>
    374c:	e1a03000 	mov	r3, r0
    3750:	eafffff8 	b	3738 <_open+0x1c>

00003754 <_swiclose>:
    3754:	e92d4030 	push	{r4, r5, lr}
    3758:	e24dd00c 	sub	sp, sp, #12
    375c:	ebfffec2 	bl	326c <remap_handle>
    3760:	e59f105c 	ldr	r1, [pc, #92]	; 37c4 <_swiclose+0x70>
    3764:	e58d0004 	str	r0, [sp, #4]
    3768:	e3a03000 	mov	r3, #0
    376c:	e7912183 	ldr	r2, [r1, r3, lsl #3]
    3770:	e1500002 	cmp	r0, r2
    3774:	e1a02183 	lsl	r2, r3, #3
    3778:	e2833001 	add	r3, r3, #1
    377c:	0a00000b 	beq	37b0 <_swiclose+0x5c>
    3780:	e3530014 	cmp	r3, #20
    3784:	1afffff8 	bne	376c <_swiclose+0x18>
    3788:	e28d5004 	add	r5, sp, #4
    378c:	e3a04002 	mov	r4, #2
    3790:	e1a00004 	mov	r0, r4
    3794:	e1a01005 	mov	r1, r5
    3798:	ef123456 	svc	0x00123456
    379c:	e1a04000 	mov	r4, r0
    37a0:	e1a00004 	mov	r0, r4
    37a4:	e28dd00c 	add	sp, sp, #12
    37a8:	e8bd4030 	pop	{r4, r5, lr}
    37ac:	e12fff1e 	bx	lr
    37b0:	e59f3010 	ldr	r3, [pc, #16]	; 37c8 <_swiclose+0x74>
    37b4:	e0832002 	add	r2, r3, r2
    37b8:	e3e03000 	mvn	r3, #0
    37bc:	e582300c 	str	r3, [r2, #12]
    37c0:	eafffff0 	b	3788 <_swiclose+0x34>
    37c4:	40000a84 	.word	0x40000a84
    37c8:	40000a78 	.word	0x40000a78

000037cc <_close>:
    37cc:	e92d4008 	push	{r3, lr}
    37d0:	ebffffdf 	bl	3754 <_swiclose>
    37d4:	e3700001 	cmn	r0, #1
    37d8:	0a000001 	beq	37e4 <_close+0x18>
    37dc:	e8bd4008 	pop	{r3, lr}
    37e0:	e12fff1e 	bx	lr
    37e4:	e8bd4008 	pop	{r3, lr}
    37e8:	eafffe91 	b	3234 <error>

000037ec <_kill>:
    37ec:	e3510006 	cmp	r1, #6
    37f0:	e92d4030 	push	{r4, r5, lr}
    37f4:	059f5020 	ldreq	r5, [pc, #32]	; 381c <_kill+0x30>
    37f8:	159f5020 	ldrne	r5, [pc, #32]	; 3820 <_kill+0x34>
    37fc:	e3a04018 	mov	r4, #24
    3800:	e1a00004 	mov	r0, r4
    3804:	e1a01005 	mov	r1, r5
    3808:	ef123456 	svc	0x00123456
    380c:	e1a04000 	mov	r4, r0
    3810:	e1a00004 	mov	r0, r4
    3814:	e8bd4030 	pop	{r4, r5, lr}
    3818:	e12fff1e 	bx	lr
    381c:	00020023 	.word	0x00020023
    3820:	00020026 	.word	0x00020026

00003824 <_exit>:
    3824:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    3828:	e59f5018 	ldr	r5, [pc, #24]	; 3848 <_exit+0x24>
    382c:	e3a04018 	mov	r4, #24
    3830:	e1a00004 	mov	r0, r4
    3834:	e1a01005 	mov	r1, r5
    3838:	ef123456 	svc	0x00123456
    383c:	e1a04000 	mov	r4, r0
    3840:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    3844:	e12fff1e 	bx	lr
    3848:	00020026 	.word	0x00020026

0000384c <_getpid>:
    384c:	e3a00001 	mov	r0, #1
    3850:	e12fff1e 	bx	lr

00003854 <_sbrk>:
    3854:	e59f2044 	ldr	r2, [pc, #68]	; 38a0 <_sbrk+0x4c>
    3858:	e92d4008 	push	{r3, lr}
    385c:	e59230ac 	ldr	r3, [r2, #172]	; 0xac
    3860:	e3530000 	cmp	r3, #0
    3864:	059f3038 	ldreq	r3, [pc, #56]	; 38a4 <_sbrk+0x50>
    3868:	e1a0100d 	mov	r1, sp
    386c:	e0830000 	add	r0, r3, r0
    3870:	058230ac 	streq	r3, [r2, #172]	; 0xac
    3874:	e1500001 	cmp	r0, r1
    3878:	958200ac 	strls	r0, [r2, #172]	; 0xac
    387c:	8a000002 	bhi	388c <_sbrk+0x38>
    3880:	e1a00003 	mov	r0, r3
    3884:	e8bd4008 	pop	{r3, lr}
    3888:	e12fff1e 	bx	lr
    388c:	eb0000b5 	bl	3b68 <__errno>
    3890:	e3a0300c 	mov	r3, #12
    3894:	e5803000 	str	r3, [r0]
    3898:	e3e03000 	mvn	r3, #0
    389c:	eafffff7 	b	3880 <_sbrk+0x2c>
    38a0:	40000a78 	.word	0x40000a78
    38a4:	40003334 	.word	0x40003334

000038a8 <_fstat>:
    38a8:	e92d4010 	push	{r4, lr}
    38ac:	e1a00001 	mov	r0, r1
    38b0:	e1a04001 	mov	r4, r1
    38b4:	e3a0203c 	mov	r2, #60	; 0x3c
    38b8:	e3a01000 	mov	r1, #0
    38bc:	eb000281 	bl	42c8 <memset>
    38c0:	e3a03a02 	mov	r3, #8192	; 0x2000
    38c4:	e5843004 	str	r3, [r4, #4]
    38c8:	e3a03b01 	mov	r3, #1024	; 0x400
    38cc:	e584302c 	str	r3, [r4, #44]	; 0x2c
    38d0:	e3a00000 	mov	r0, #0
    38d4:	e8bd4010 	pop	{r4, lr}
    38d8:	e12fff1e 	bx	lr

000038dc <_stat>:
    38dc:	e92d4038 	push	{r3, r4, r5, lr}
    38e0:	e1a04001 	mov	r4, r1
    38e4:	e3a01000 	mov	r1, #0
    38e8:	ebffff8b 	bl	371c <_open>
    38ec:	e2505000 	subs	r5, r0, #0
    38f0:	b3e00000 	mvnlt	r0, #0
    38f4:	ba00000a 	blt	3924 <_stat+0x48>
    38f8:	e1a00004 	mov	r0, r4
    38fc:	e3a01000 	mov	r1, #0
    3900:	e3a0203c 	mov	r2, #60	; 0x3c
    3904:	eb00026f 	bl	42c8 <memset>
    3908:	e3a03c81 	mov	r3, #33024	; 0x8100
    390c:	e5843004 	str	r3, [r4, #4]
    3910:	e3a03b01 	mov	r3, #1024	; 0x400
    3914:	e584302c 	str	r3, [r4, #44]	; 0x2c
    3918:	e1a00005 	mov	r0, r5
    391c:	ebffff8c 	bl	3754 <_swiclose>
    3920:	e3a00000 	mov	r0, #0
    3924:	e8bd4038 	pop	{r3, r4, r5, lr}
    3928:	e12fff1e 	bx	lr

0000392c <_link>:
    392c:	e3e00000 	mvn	r0, #0
    3930:	e12fff1e 	bx	lr

00003934 <_unlink>:
    3934:	e92d4030 	push	{r4, r5, lr}
    3938:	e24dd00c 	sub	sp, sp, #12
    393c:	e58d0000 	str	r0, [sp]
    3940:	ebfffe23 	bl	31d4 <strlen>
    3944:	e3a0400e 	mov	r4, #14
    3948:	e58d0004 	str	r0, [sp, #4]
    394c:	e1a0500d 	mov	r5, sp
    3950:	e1a00004 	mov	r0, r4
    3954:	e1a01005 	mov	r1, r5
    3958:	ef123456 	svc	0x00123456
    395c:	e1a04000 	mov	r4, r0
    3960:	e3740001 	cmn	r4, #1
    3964:	0a000005 	beq	3980 <_unlink+0x4c>
    3968:	e3540000 	cmp	r4, #0
    396c:	01a00004 	moveq	r0, r4
    3970:	13e00000 	mvnne	r0, #0
    3974:	e28dd00c 	add	sp, sp, #12
    3978:	e8bd4030 	pop	{r4, r5, lr}
    397c:	e12fff1e 	bx	lr
    3980:	e1a00004 	mov	r0, r4
    3984:	ebfffe2a 	bl	3234 <error>
    3988:	e1a04000 	mov	r4, r0
    398c:	eafffff5 	b	3968 <_unlink+0x34>

00003990 <_raise>:
    3990:	e12fff1e 	bx	lr

00003994 <_gettimeofday>:
    3994:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    3998:	e2506000 	subs	r6, r0, #0
    399c:	e1a04001 	mov	r4, r1
    39a0:	0a000006 	beq	39c0 <_gettimeofday+0x2c>
    39a4:	e3a07000 	mov	r7, #0
    39a8:	e3a05011 	mov	r5, #17
    39ac:	e1a00005 	mov	r0, r5
    39b0:	e1a01007 	mov	r1, r7
    39b4:	ef123456 	svc	0x00123456
    39b8:	e1a05000 	mov	r5, r0
    39bc:	e88600a0 	stm	r6, {r5, r7}
    39c0:	e3540000 	cmp	r4, #0
    39c4:	13a03000 	movne	r3, #0
    39c8:	15843000 	strne	r3, [r4]
    39cc:	15843004 	strne	r3, [r4, #4]
    39d0:	e3a00000 	mov	r0, #0
    39d4:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
    39d8:	e12fff1e 	bx	lr

000039dc <_times>:
    39dc:	e92d4070 	push	{r4, r5, r6, lr}
    39e0:	e1a04000 	mov	r4, r0
    39e4:	e3a06000 	mov	r6, #0
    39e8:	e3a05010 	mov	r5, #16
    39ec:	e1a00005 	mov	r0, r5
    39f0:	e1a01006 	mov	r1, r6
    39f4:	ef123456 	svc	0x00123456
    39f8:	e1a05000 	mov	r5, r0
    39fc:	e1540006 	cmp	r4, r6
    3a00:	18840060 	stmne	r4, {r5, r6}
    3a04:	15846008 	strne	r6, [r4, #8]
    3a08:	1584600c 	strne	r6, [r4, #12]
    3a0c:	e1a00005 	mov	r0, r5
    3a10:	e8bd4070 	pop	{r4, r5, r6, lr}
    3a14:	e12fff1e 	bx	lr

00003a18 <_isatty>:
    3a18:	e92d4030 	push	{r4, r5, lr}
    3a1c:	e24dd00c 	sub	sp, sp, #12
    3a20:	ebfffe11 	bl	326c <remap_handle>
    3a24:	e28d4008 	add	r4, sp, #8
    3a28:	e5240004 	str	r0, [r4, #-4]!
    3a2c:	e3a05009 	mov	r5, #9
    3a30:	e1a00005 	mov	r0, r5
    3a34:	e1a01004 	mov	r1, r4
    3a38:	ef123456 	svc	0x00123456
    3a3c:	e1a04000 	mov	r4, r0
    3a40:	e3740001 	cmn	r4, #1
    3a44:	0a000003 	beq	3a58 <_isatty+0x40>
    3a48:	e1a00004 	mov	r0, r4
    3a4c:	e28dd00c 	add	sp, sp, #12
    3a50:	e8bd4030 	pop	{r4, r5, lr}
    3a54:	e12fff1e 	bx	lr
    3a58:	e1a00004 	mov	r0, r4
    3a5c:	ebfffdf4 	bl	3234 <error>
    3a60:	e1a04000 	mov	r4, r0
    3a64:	eafffff7 	b	3a48 <_isatty+0x30>

00003a68 <_system>:
    3a68:	e92d4030 	push	{r4, r5, lr}
    3a6c:	e2503000 	subs	r3, r0, #0
    3a70:	e24dd00c 	sub	sp, sp, #12
    3a74:	03a04001 	moveq	r4, #1
    3a78:	0a000016 	beq	3ad8 <_system+0x70>
    3a7c:	e58d3000 	str	r3, [sp]
    3a80:	ebfffdd3 	bl	31d4 <strlen>
    3a84:	e3a04012 	mov	r4, #18
    3a88:	e58d0004 	str	r0, [sp, #4]
    3a8c:	e1a0500d 	mov	r5, sp
    3a90:	e1a00004 	mov	r0, r4
    3a94:	e1a01005 	mov	r1, r5
    3a98:	ef123456 	svc	0x00123456
    3a9c:	e1a04000 	mov	r4, r0
    3aa0:	e3740001 	cmn	r4, #1
    3aa4:	0a00000f 	beq	3ae8 <_system+0x80>
    3aa8:	e35400ff 	cmp	r4, #255	; 0xff
    3aac:	8a000009 	bhi	3ad8 <_system+0x70>
    3ab0:	e3540000 	cmp	r4, #0
    3ab4:	0a000007 	beq	3ad8 <_system+0x70>
    3ab8:	e1a03004 	mov	r3, r4
    3abc:	e1b03083 	lsls	r3, r3, #1
    3ac0:	e1a02443 	asr	r2, r3, #8
    3ac4:	e20220ff 	and	r2, r2, #255	; 0xff
    3ac8:	0a000001 	beq	3ad4 <_system+0x6c>
    3acc:	e1520004 	cmp	r2, r4
    3ad0:	1afffff9 	bne	3abc <_system+0x54>
    3ad4:	e1a04003 	mov	r4, r3
    3ad8:	e1a00004 	mov	r0, r4
    3adc:	e28dd00c 	add	sp, sp, #12
    3ae0:	e8bd4030 	pop	{r4, r5, lr}
    3ae4:	e12fff1e 	bx	lr
    3ae8:	e1a00004 	mov	r0, r4
    3aec:	ebfffdd0 	bl	3234 <error>
    3af0:	e1a04000 	mov	r4, r0
    3af4:	eaffffeb 	b	3aa8 <_system+0x40>

00003af8 <_rename>:
    3af8:	e92d4030 	push	{r4, r5, lr}
    3afc:	e24dd014 	sub	sp, sp, #20
    3b00:	e1a04001 	mov	r4, r1
    3b04:	e58d0000 	str	r0, [sp]
    3b08:	ebfffdb1 	bl	31d4 <strlen>
    3b0c:	e58d0004 	str	r0, [sp, #4]
    3b10:	e1a00004 	mov	r0, r4
    3b14:	e58d4008 	str	r4, [sp, #8]
    3b18:	ebfffdad 	bl	31d4 <strlen>
    3b1c:	e3a0400f 	mov	r4, #15
    3b20:	e58d000c 	str	r0, [sp, #12]
    3b24:	e1a0500d 	mov	r5, sp
    3b28:	e1a00004 	mov	r0, r4
    3b2c:	e1a01005 	mov	r1, r5
    3b30:	ef123456 	svc	0x00123456
    3b34:	e1a04000 	mov	r4, r0
    3b38:	e3740001 	cmn	r4, #1
    3b3c:	0a000005 	beq	3b58 <_rename+0x60>
    3b40:	e3540000 	cmp	r4, #0
    3b44:	01a00004 	moveq	r0, r4
    3b48:	13e00000 	mvnne	r0, #0
    3b4c:	e28dd014 	add	sp, sp, #20
    3b50:	e8bd4030 	pop	{r4, r5, lr}
    3b54:	e12fff1e 	bx	lr
    3b58:	e1a00004 	mov	r0, r4
    3b5c:	ebfffdb4 	bl	3234 <error>
    3b60:	e1a04000 	mov	r4, r0
    3b64:	eafffff5 	b	3b40 <_rename+0x48>

00003b68 <__errno>:
    3b68:	e59f3004 	ldr	r3, [pc, #4]	; 3b74 <__errno+0xc>
    3b6c:	e5930000 	ldr	r0, [r3]
    3b70:	e12fff1e 	bx	lr
    3b74:	40000610 	.word	0x40000610

00003b78 <__fp_lock>:
    3b78:	e3a00000 	mov	r0, #0
    3b7c:	e12fff1e 	bx	lr

00003b80 <__fp_unlock>:
    3b80:	e3a00000 	mov	r0, #0
    3b84:	e12fff1e 	bx	lr

00003b88 <_cleanup_r>:
    3b88:	e92d4008 	push	{r3, lr}
    3b8c:	e59f1008 	ldr	r1, [pc, #8]	; 3b9c <_cleanup_r+0x14>
    3b90:	eb00018a 	bl	41c0 <_fwalk>
    3b94:	e8bd4008 	pop	{r3, lr}
    3b98:	e12fff1e 	bx	lr
    3b9c:	000047a8 	.word	0x000047a8

00003ba0 <std.isra.0>:
    3ba0:	e3a03000 	mov	r3, #0
    3ba4:	e92d4010 	push	{r4, lr}
    3ba8:	e1a04000 	mov	r4, r0
    3bac:	e1c010bc 	strh	r1, [r0, #12]
    3bb0:	e1c020be 	strh	r2, [r0, #14]
    3bb4:	e5803000 	str	r3, [r0]
    3bb8:	e5803004 	str	r3, [r0, #4]
    3bbc:	e5803008 	str	r3, [r0, #8]
    3bc0:	e5803064 	str	r3, [r0, #100]	; 0x64
    3bc4:	e5803010 	str	r3, [r0, #16]
    3bc8:	e5803014 	str	r3, [r0, #20]
    3bcc:	e5803018 	str	r3, [r0, #24]
    3bd0:	e1a01003 	mov	r1, r3
    3bd4:	e280005c 	add	r0, r0, #92	; 0x5c
    3bd8:	e3a02008 	mov	r2, #8
    3bdc:	eb0001b9 	bl	42c8 <memset>
    3be0:	e59f3024 	ldr	r3, [pc, #36]	; 3c0c <std.isra.0+0x6c>
    3be4:	e5843020 	str	r3, [r4, #32]
    3be8:	e59f3020 	ldr	r3, [pc, #32]	; 3c10 <std.isra.0+0x70>
    3bec:	e5843024 	str	r3, [r4, #36]	; 0x24
    3bf0:	e59f301c 	ldr	r3, [pc, #28]	; 3c14 <std.isra.0+0x74>
    3bf4:	e5843028 	str	r3, [r4, #40]	; 0x28
    3bf8:	e59f3018 	ldr	r3, [pc, #24]	; 3c18 <std.isra.0+0x78>
    3bfc:	e584401c 	str	r4, [r4, #28]
    3c00:	e584302c 	str	r3, [r4, #44]	; 0x2c
    3c04:	e8bd4010 	pop	{r4, lr}
    3c08:	e12fff1e 	bx	lr
    3c0c:	00004560 	.word	0x00004560
    3c10:	0000459c 	.word	0x0000459c
    3c14:	000045f4 	.word	0x000045f4
    3c18:	00004628 	.word	0x00004628

00003c1c <__sfmoreglue>:
    3c1c:	e92d4070 	push	{r4, r5, r6, lr}
    3c20:	e0816081 	add	r6, r1, r1, lsl #1
    3c24:	e0816106 	add	r6, r1, r6, lsl #2
    3c28:	e1a06186 	lsl	r6, r6, #3
    3c2c:	e1a05001 	mov	r5, r1
    3c30:	e286100c 	add	r1, r6, #12
    3c34:	ebfffb03 	bl	2848 <_malloc_r>
    3c38:	e2504000 	subs	r4, r0, #0
    3c3c:	0a000005 	beq	3c58 <__sfmoreglue+0x3c>
    3c40:	e284000c 	add	r0, r4, #12
    3c44:	e3a01000 	mov	r1, #0
    3c48:	e8840022 	stm	r4, {r1, r5}
    3c4c:	e5840008 	str	r0, [r4, #8]
    3c50:	e1a02006 	mov	r2, r6
    3c54:	eb00019b 	bl	42c8 <memset>
    3c58:	e1a00004 	mov	r0, r4
    3c5c:	e8bd4070 	pop	{r4, r5, r6, lr}
    3c60:	e12fff1e 	bx	lr

00003c64 <_cleanup>:
    3c64:	e59f3004 	ldr	r3, [pc, #4]	; 3c70 <_cleanup+0xc>
    3c68:	e5930000 	ldr	r0, [r3]
    3c6c:	eaffffc5 	b	3b88 <_cleanup_r>
    3c70:	00004b2c 	.word	0x00004b2c

00003c74 <__sinit>:
    3c74:	e92d4038 	push	{r3, r4, r5, lr}
    3c78:	e5903038 	ldr	r3, [r0, #56]	; 0x38
    3c7c:	e3530000 	cmp	r3, #0
    3c80:	e1a04000 	mov	r4, r0
    3c84:	0a000001 	beq	3c90 <__sinit+0x1c>
    3c88:	e8bd4038 	pop	{r3, r4, r5, lr}
    3c8c:	e12fff1e 	bx	lr
    3c90:	e59fe050 	ldr	lr, [pc, #80]	; 3ce8 <__sinit+0x74>
    3c94:	e280cfbb 	add	ip, r0, #748	; 0x2ec
    3c98:	e3a05001 	mov	r5, #1
    3c9c:	e1a02003 	mov	r2, r3
    3ca0:	e58432e0 	str	r3, [r4, #736]	; 0x2e0
    3ca4:	e3a03003 	mov	r3, #3
    3ca8:	e584e03c 	str	lr, [r4, #60]	; 0x3c
    3cac:	e58432e4 	str	r3, [r4, #740]	; 0x2e4
    3cb0:	e584c2e8 	str	ip, [r4, #744]	; 0x2e8
    3cb4:	e5900004 	ldr	r0, [r0, #4]
    3cb8:	e3a01004 	mov	r1, #4
    3cbc:	e5845038 	str	r5, [r4, #56]	; 0x38
    3cc0:	ebffffb6 	bl	3ba0 <std.isra.0>
    3cc4:	e5940008 	ldr	r0, [r4, #8]
    3cc8:	e1a02005 	mov	r2, r5
    3ccc:	e3a01009 	mov	r1, #9
    3cd0:	ebffffb2 	bl	3ba0 <std.isra.0>
    3cd4:	e594000c 	ldr	r0, [r4, #12]
    3cd8:	e3a01012 	mov	r1, #18
    3cdc:	e3a02002 	mov	r2, #2
    3ce0:	e8bd4038 	pop	{r3, r4, r5, lr}
    3ce4:	eaffffad 	b	3ba0 <std.isra.0>
    3ce8:	00003b88 	.word	0x00003b88

00003cec <__sfp>:
    3cec:	e59f3110 	ldr	r3, [pc, #272]	; 3e04 <__sfp+0x118>
    3cf0:	e92d4070 	push	{r4, r5, r6, lr}
    3cf4:	e5935000 	ldr	r5, [r3]
    3cf8:	e5953038 	ldr	r3, [r5, #56]	; 0x38
    3cfc:	e3530000 	cmp	r3, #0
    3d00:	e1a06000 	mov	r6, r0
    3d04:	0a000031 	beq	3dd0 <__sfp+0xe4>
    3d08:	e2855e2e 	add	r5, r5, #736	; 0x2e0
    3d0c:	e5953004 	ldr	r3, [r5, #4]
    3d10:	e2533001 	subs	r3, r3, #1
    3d14:	e5950008 	ldr	r0, [r5, #8]
    3d18:	4a00000f 	bmi	3d5c <__sfp+0x70>
    3d1c:	e1d020fc 	ldrsh	r2, [r0, #12]
    3d20:	e3520000 	cmp	r2, #0
    3d24:	0a000011 	beq	3d70 <__sfp+0x84>
    3d28:	e280c068 	add	ip, r0, #104	; 0x68
    3d2c:	e1a0200c 	mov	r2, ip
    3d30:	e1a04000 	mov	r4, r0
    3d34:	ea000003 	b	3d48 <__sfp+0x5c>
    3d38:	e1511cf4 	ldrsh	r1, [r1, #-196]	; 0xffffff3c
    3d3c:	e3510000 	cmp	r1, #0
    3d40:	e2844068 	add	r4, r4, #104	; 0x68
    3d44:	0a00000a 	beq	3d74 <__sfp+0x88>
    3d48:	e2822068 	add	r2, r2, #104	; 0x68
    3d4c:	e0601002 	rsb	r1, r0, r2
    3d50:	e2533001 	subs	r3, r3, #1
    3d54:	e081100c 	add	r1, r1, ip
    3d58:	2afffff6 	bcs	3d38 <__sfp+0x4c>
    3d5c:	e5950000 	ldr	r0, [r5]
    3d60:	e3500000 	cmp	r0, #0
    3d64:	0a00001c 	beq	3ddc <__sfp+0xf0>
    3d68:	e1a05000 	mov	r5, r0
    3d6c:	eaffffe6 	b	3d0c <__sfp+0x20>
    3d70:	e1a04000 	mov	r4, r0
    3d74:	e3e03000 	mvn	r3, #0
    3d78:	e3a05000 	mov	r5, #0
    3d7c:	e1c430be 	strh	r3, [r4, #14]
    3d80:	e3a03001 	mov	r3, #1
    3d84:	e1c430bc 	strh	r3, [r4, #12]
    3d88:	e5845064 	str	r5, [r4, #100]	; 0x64
    3d8c:	e5845000 	str	r5, [r4]
    3d90:	e5845008 	str	r5, [r4, #8]
    3d94:	e5845004 	str	r5, [r4, #4]
    3d98:	e5845010 	str	r5, [r4, #16]
    3d9c:	e5845014 	str	r5, [r4, #20]
    3da0:	e5845018 	str	r5, [r4, #24]
    3da4:	e284005c 	add	r0, r4, #92	; 0x5c
    3da8:	e1a01005 	mov	r1, r5
    3dac:	e3a02008 	mov	r2, #8
    3db0:	eb000144 	bl	42c8 <memset>
    3db4:	e5845030 	str	r5, [r4, #48]	; 0x30
    3db8:	e5845034 	str	r5, [r4, #52]	; 0x34
    3dbc:	e5845044 	str	r5, [r4, #68]	; 0x44
    3dc0:	e5845048 	str	r5, [r4, #72]	; 0x48
    3dc4:	e1a00004 	mov	r0, r4
    3dc8:	e8bd4070 	pop	{r4, r5, r6, lr}
    3dcc:	e12fff1e 	bx	lr
    3dd0:	e1a00005 	mov	r0, r5
    3dd4:	ebffffa6 	bl	3c74 <__sinit>
    3dd8:	eaffffca 	b	3d08 <__sfp+0x1c>
    3ddc:	e1a00006 	mov	r0, r6
    3de0:	e3a01004 	mov	r1, #4
    3de4:	ebffff8c 	bl	3c1c <__sfmoreglue>
    3de8:	e3500000 	cmp	r0, #0
    3dec:	e5850000 	str	r0, [r5]
    3df0:	1affffdc 	bne	3d68 <__sfp+0x7c>
    3df4:	e3a0300c 	mov	r3, #12
    3df8:	e5863000 	str	r3, [r6]
    3dfc:	e1a04000 	mov	r4, r0
    3e00:	eaffffef 	b	3dc4 <__sfp+0xd8>
    3e04:	00004b2c 	.word	0x00004b2c

00003e08 <__sfp_lock_acquire>:
    3e08:	e12fff1e 	bx	lr

00003e0c <__sfp_lock_release>:
    3e0c:	e12fff1e 	bx	lr

00003e10 <__sinit_lock_acquire>:
    3e10:	e12fff1e 	bx	lr

00003e14 <__sinit_lock_release>:
    3e14:	e12fff1e 	bx	lr

00003e18 <__fp_lock_all>:
    3e18:	e92d4008 	push	{r3, lr}
    3e1c:	e59f3010 	ldr	r3, [pc, #16]	; 3e34 <__fp_lock_all+0x1c>
    3e20:	e59f1010 	ldr	r1, [pc, #16]	; 3e38 <__fp_lock_all+0x20>
    3e24:	e5930000 	ldr	r0, [r3]
    3e28:	eb0000e4 	bl	41c0 <_fwalk>
    3e2c:	e8bd4008 	pop	{r3, lr}
    3e30:	e12fff1e 	bx	lr
    3e34:	40000610 	.word	0x40000610
    3e38:	00003b78 	.word	0x00003b78

00003e3c <__fp_unlock_all>:
    3e3c:	e92d4008 	push	{r3, lr}
    3e40:	e59f3010 	ldr	r3, [pc, #16]	; 3e58 <__fp_unlock_all+0x1c>
    3e44:	e59f1010 	ldr	r1, [pc, #16]	; 3e5c <__fp_unlock_all+0x20>
    3e48:	e5930000 	ldr	r0, [r3]
    3e4c:	eb0000db 	bl	41c0 <_fwalk>
    3e50:	e8bd4008 	pop	{r3, lr}
    3e54:	e12fff1e 	bx	lr
    3e58:	40000610 	.word	0x40000610
    3e5c:	00003b80 	.word	0x00003b80

00003e60 <_malloc_trim_r>:
    3e60:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    3e64:	e59f50e4 	ldr	r5, [pc, #228]	; 3f50 <_malloc_trim_r+0xf0>
    3e68:	e1a07001 	mov	r7, r1
    3e6c:	e1a04000 	mov	r4, r0
    3e70:	ebfffc39 	bl	2f5c <__malloc_lock>
    3e74:	e5953008 	ldr	r3, [r5, #8]
    3e78:	e5936004 	ldr	r6, [r3, #4]
    3e7c:	e3c66003 	bic	r6, r6, #3
    3e80:	e2863efe 	add	r3, r6, #4064	; 0xfe0
    3e84:	e283300f 	add	r3, r3, #15
    3e88:	e0677003 	rsb	r7, r7, r3
    3e8c:	e1a07627 	lsr	r7, r7, #12
    3e90:	e2477001 	sub	r7, r7, #1
    3e94:	e1a07607 	lsl	r7, r7, #12
    3e98:	e3570a01 	cmp	r7, #4096	; 0x1000
    3e9c:	e1a00004 	mov	r0, r4
    3ea0:	ba000006 	blt	3ec0 <_malloc_trim_r+0x60>
    3ea4:	e3a01000 	mov	r1, #0
    3ea8:	ebfffc2d 	bl	2f64 <_sbrk_r>
    3eac:	e5953008 	ldr	r3, [r5, #8]
    3eb0:	e0833006 	add	r3, r3, r6
    3eb4:	e1500003 	cmp	r0, r3
    3eb8:	e1a00004 	mov	r0, r4
    3ebc:	0a000003 	beq	3ed0 <_malloc_trim_r+0x70>
    3ec0:	ebfffc26 	bl	2f60 <__malloc_unlock>
    3ec4:	e3a00000 	mov	r0, #0
    3ec8:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
    3ecc:	e12fff1e 	bx	lr
    3ed0:	e2671000 	rsb	r1, r7, #0
    3ed4:	ebfffc22 	bl	2f64 <_sbrk_r>
    3ed8:	e3700001 	cmn	r0, #1
    3edc:	0a00000b 	beq	3f10 <_malloc_trim_r+0xb0>
    3ee0:	e59f306c 	ldr	r3, [pc, #108]	; 3f54 <_malloc_trim_r+0xf4>
    3ee4:	e5931000 	ldr	r1, [r3]
    3ee8:	e5952008 	ldr	r2, [r5, #8]
    3eec:	e0676006 	rsb	r6, r7, r6
    3ef0:	e3866001 	orr	r6, r6, #1
    3ef4:	e0677001 	rsb	r7, r7, r1
    3ef8:	e1a00004 	mov	r0, r4
    3efc:	e5826004 	str	r6, [r2, #4]
    3f00:	e5837000 	str	r7, [r3]
    3f04:	ebfffc15 	bl	2f60 <__malloc_unlock>
    3f08:	e3a00001 	mov	r0, #1
    3f0c:	eaffffed 	b	3ec8 <_malloc_trim_r+0x68>
    3f10:	e1a00004 	mov	r0, r4
    3f14:	e3a01000 	mov	r1, #0
    3f18:	ebfffc11 	bl	2f64 <_sbrk_r>
    3f1c:	e5953008 	ldr	r3, [r5, #8]
    3f20:	e0632000 	rsb	r2, r3, r0
    3f24:	e352000f 	cmp	r2, #15
    3f28:	da000006 	ble	3f48 <_malloc_trim_r+0xe8>
    3f2c:	e59f1024 	ldr	r1, [pc, #36]	; 3f58 <_malloc_trim_r+0xf8>
    3f30:	e5911000 	ldr	r1, [r1]
    3f34:	e0610000 	rsb	r0, r1, r0
    3f38:	e59f1014 	ldr	r1, [pc, #20]	; 3f54 <_malloc_trim_r+0xf4>
    3f3c:	e3822001 	orr	r2, r2, #1
    3f40:	e5810000 	str	r0, [r1]
    3f44:	e5832004 	str	r2, [r3, #4]
    3f48:	e1a00004 	mov	r0, r4
    3f4c:	eaffffdb 	b	3ec0 <_malloc_trim_r+0x60>
    3f50:	40000200 	.word	0x40000200
    3f54:	40000a48 	.word	0x40000a48
    3f58:	40000608 	.word	0x40000608

00003f5c <_free_r>:
    3f5c:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    3f60:	e2515000 	subs	r5, r1, #0
    3f64:	e1a04000 	mov	r4, r0
    3f68:	0a00005c 	beq	40e0 <_free_r+0x184>
    3f6c:	ebfffbfa 	bl	2f5c <__malloc_lock>
    3f70:	e5150004 	ldr	r0, [r5, #-4]
    3f74:	e59fc230 	ldr	ip, [pc, #560]	; 41ac <_free_r+0x250>
    3f78:	e2451008 	sub	r1, r5, #8
    3f7c:	e3c03001 	bic	r3, r0, #1
    3f80:	e0812003 	add	r2, r1, r3
    3f84:	e59c6008 	ldr	r6, [ip, #8]
    3f88:	e592e004 	ldr	lr, [r2, #4]
    3f8c:	e1560002 	cmp	r6, r2
    3f90:	e3cee003 	bic	lr, lr, #3
    3f94:	0a000060 	beq	411c <_free_r+0x1c0>
    3f98:	e2100001 	ands	r0, r0, #1
    3f9c:	e582e004 	str	lr, [r2, #4]
    3fa0:	13a00000 	movne	r0, #0
    3fa4:	1a000009 	bne	3fd0 <_free_r+0x74>
    3fa8:	e5156008 	ldr	r6, [r5, #-8]
    3fac:	e0661001 	rsb	r1, r6, r1
    3fb0:	e5915008 	ldr	r5, [r1, #8]
    3fb4:	e28c7008 	add	r7, ip, #8
    3fb8:	e1550007 	cmp	r5, r7
    3fbc:	e0833006 	add	r3, r3, r6
    3fc0:	1591600c 	ldrne	r6, [r1, #12]
    3fc4:	1585600c 	strne	r6, [r5, #12]
    3fc8:	15865008 	strne	r5, [r6, #8]
    3fcc:	03a00001 	moveq	r0, #1
    3fd0:	e082500e 	add	r5, r2, lr
    3fd4:	e5955004 	ldr	r5, [r5, #4]
    3fd8:	e3150001 	tst	r5, #1
    3fdc:	1a000009 	bne	4008 <_free_r+0xac>
    3fe0:	e3500000 	cmp	r0, #0
    3fe4:	e083300e 	add	r3, r3, lr
    3fe8:	e592e008 	ldr	lr, [r2, #8]
    3fec:	1a000002 	bne	3ffc <_free_r+0xa0>
    3ff0:	e59f51b8 	ldr	r5, [pc, #440]	; 41b0 <_free_r+0x254>
    3ff4:	e15e0005 	cmp	lr, r5
    3ff8:	0a00005d 	beq	4174 <_free_r+0x218>
    3ffc:	e592200c 	ldr	r2, [r2, #12]
    4000:	e58e200c 	str	r2, [lr, #12]
    4004:	e582e008 	str	lr, [r2, #8]
    4008:	e3832001 	orr	r2, r3, #1
    400c:	e3500000 	cmp	r0, #0
    4010:	e5812004 	str	r2, [r1, #4]
    4014:	e7813003 	str	r3, [r1, r3]
    4018:	1a00002e 	bne	40d8 <_free_r+0x17c>
    401c:	e3530c02 	cmp	r3, #512	; 0x200
    4020:	3a000030 	bcc	40e8 <_free_r+0x18c>
    4024:	e1a024a3 	lsr	r2, r3, #9
    4028:	e3520004 	cmp	r2, #4
    402c:	91a0e323 	lsrls	lr, r3, #6
    4030:	928ee038 	addls	lr, lr, #56	; 0x38
    4034:	91a0018e 	lslls	r0, lr, #3
    4038:	9a000014 	bls	4090 <_free_r+0x134>
    403c:	e3520014 	cmp	r2, #20
    4040:	9282e05b 	addls	lr, r2, #91	; 0x5b
    4044:	91a0018e 	lslls	r0, lr, #3
    4048:	9a000010 	bls	4090 <_free_r+0x134>
    404c:	e3520054 	cmp	r2, #84	; 0x54
    4050:	91a0e623 	lsrls	lr, r3, #12
    4054:	928ee06e 	addls	lr, lr, #110	; 0x6e
    4058:	91a0018e 	lslls	r0, lr, #3
    405c:	9a00000b 	bls	4090 <_free_r+0x134>
    4060:	e3520f55 	cmp	r2, #340	; 0x154
    4064:	91a0e7a3 	lsrls	lr, r3, #15
    4068:	928ee077 	addls	lr, lr, #119	; 0x77
    406c:	91a0018e 	lslls	r0, lr, #3
    4070:	9a000006 	bls	4090 <_free_r+0x134>
    4074:	e59f0138 	ldr	r0, [pc, #312]	; 41b4 <_free_r+0x258>
    4078:	e1520000 	cmp	r2, r0
    407c:	91a0e923 	lsrls	lr, r3, #18
    4080:	928ee07c 	addls	lr, lr, #124	; 0x7c
    4084:	91a0018e 	lslls	r0, lr, #3
    4088:	83a00e3f 	movhi	r0, #1008	; 0x3f0
    408c:	83a0e07e 	movhi	lr, #126	; 0x7e
    4090:	e08cc000 	add	ip, ip, r0
    4094:	e59c2008 	ldr	r2, [ip, #8]
    4098:	e152000c 	cmp	r2, ip
    409c:	e59f0108 	ldr	r0, [pc, #264]	; 41ac <_free_r+0x250>
    40a0:	1a000003 	bne	40b4 <_free_r+0x158>
    40a4:	ea000039 	b	4190 <_free_r+0x234>
    40a8:	e5922008 	ldr	r2, [r2, #8]
    40ac:	e15c0002 	cmp	ip, r2
    40b0:	0a000003 	beq	40c4 <_free_r+0x168>
    40b4:	e5920004 	ldr	r0, [r2, #4]
    40b8:	e3c00003 	bic	r0, r0, #3
    40bc:	e1530000 	cmp	r3, r0
    40c0:	3afffff8 	bcc	40a8 <_free_r+0x14c>
    40c4:	e592300c 	ldr	r3, [r2, #12]
    40c8:	e581300c 	str	r3, [r1, #12]
    40cc:	e5812008 	str	r2, [r1, #8]
    40d0:	e582100c 	str	r1, [r2, #12]
    40d4:	e5831008 	str	r1, [r3, #8]
    40d8:	e1a00004 	mov	r0, r4
    40dc:	ebfffb9f 	bl	2f60 <__malloc_unlock>
    40e0:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
    40e4:	e12fff1e 	bx	lr
    40e8:	e59c2004 	ldr	r2, [ip, #4]
    40ec:	e1a031a3 	lsr	r3, r3, #3
    40f0:	e1a00143 	asr	r0, r3, #2
    40f4:	e3a0e001 	mov	lr, #1
    40f8:	e182001e 	orr	r0, r2, lr, lsl r0
    40fc:	e08c3183 	add	r3, ip, r3, lsl #3
    4100:	e5932008 	ldr	r2, [r3, #8]
    4104:	e581300c 	str	r3, [r1, #12]
    4108:	e5812008 	str	r2, [r1, #8]
    410c:	e58c0004 	str	r0, [ip, #4]
    4110:	e5831008 	str	r1, [r3, #8]
    4114:	e582100c 	str	r1, [r2, #12]
    4118:	eaffffee 	b	40d8 <_free_r+0x17c>
    411c:	e3100001 	tst	r0, #1
    4120:	e08e3003 	add	r3, lr, r3
    4124:	1a000006 	bne	4144 <_free_r+0x1e8>
    4128:	e5152008 	ldr	r2, [r5, #-8]
    412c:	e0621001 	rsb	r1, r2, r1
    4130:	e591000c 	ldr	r0, [r1, #12]
    4134:	e591e008 	ldr	lr, [r1, #8]
    4138:	e58e000c 	str	r0, [lr, #12]
    413c:	e580e008 	str	lr, [r0, #8]
    4140:	e0833002 	add	r3, r3, r2
    4144:	e59f206c 	ldr	r2, [pc, #108]	; 41b8 <_free_r+0x25c>
    4148:	e5920000 	ldr	r0, [r2]
    414c:	e3832001 	orr	r2, r3, #1
    4150:	e1530000 	cmp	r3, r0
    4154:	e5812004 	str	r2, [r1, #4]
    4158:	e58c1008 	str	r1, [ip, #8]
    415c:	3affffdd 	bcc	40d8 <_free_r+0x17c>
    4160:	e59f3054 	ldr	r3, [pc, #84]	; 41bc <_free_r+0x260>
    4164:	e1a00004 	mov	r0, r4
    4168:	e5931000 	ldr	r1, [r3]
    416c:	ebffff3b 	bl	3e60 <_malloc_trim_r>
    4170:	eaffffd8 	b	40d8 <_free_r+0x17c>
    4174:	e3832001 	orr	r2, r3, #1
    4178:	e58c1014 	str	r1, [ip, #20]
    417c:	e58c1010 	str	r1, [ip, #16]
    4180:	e581e00c 	str	lr, [r1, #12]
    4184:	e9814004 	stmib	r1, {r2, lr}
    4188:	e7813003 	str	r3, [r1, r3]
    418c:	eaffffd1 	b	40d8 <_free_r+0x17c>
    4190:	e5903004 	ldr	r3, [r0, #4]
    4194:	e1a0e14e 	asr	lr, lr, #2
    4198:	e3a0c001 	mov	ip, #1
    419c:	e183ce1c 	orr	ip, r3, ip, lsl lr
    41a0:	e1a03002 	mov	r3, r2
    41a4:	e580c004 	str	ip, [r0, #4]
    41a8:	eaffffc6 	b	40c8 <_free_r+0x16c>
    41ac:	40000200 	.word	0x40000200
    41b0:	40000208 	.word	0x40000208
    41b4:	00000554 	.word	0x00000554
    41b8:	4000060c 	.word	0x4000060c
    41bc:	40000a44 	.word	0x40000a44

000041c0 <_fwalk>:
    41c0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    41c4:	e2904e2e 	adds	r4, r0, #736	; 0x2e0
    41c8:	e1a08001 	mov	r8, r1
    41cc:	01a07004 	moveq	r7, r4
    41d0:	0a000017 	beq	4234 <_fwalk+0x74>
    41d4:	e3a07000 	mov	r7, #0
    41d8:	e5946004 	ldr	r6, [r4, #4]
    41dc:	e2566001 	subs	r6, r6, #1
    41e0:	e5945008 	ldr	r5, [r4, #8]
    41e4:	4a00000f 	bmi	4228 <_fwalk+0x68>
    41e8:	e1d530bc 	ldrh	r3, [r5, #12]
    41ec:	e3530000 	cmp	r3, #0
    41f0:	e2466001 	sub	r6, r6, #1
    41f4:	0a000008 	beq	421c <_fwalk+0x5c>
    41f8:	e3530001 	cmp	r3, #1
    41fc:	9a000006 	bls	421c <_fwalk+0x5c>
    4200:	e1d530fe 	ldrsh	r3, [r5, #14]
    4204:	e3730001 	cmn	r3, #1
    4208:	e1a00005 	mov	r0, r5
    420c:	0a000002 	beq	421c <_fwalk+0x5c>
    4210:	e1a0e00f 	mov	lr, pc
    4214:	e12fff18 	bx	r8
    4218:	e1877000 	orr	r7, r7, r0
    421c:	e3760001 	cmn	r6, #1
    4220:	e2855068 	add	r5, r5, #104	; 0x68
    4224:	1affffef 	bne	41e8 <_fwalk+0x28>
    4228:	e5944000 	ldr	r4, [r4]
    422c:	e3540000 	cmp	r4, #0
    4230:	1affffe8 	bne	41d8 <_fwalk+0x18>
    4234:	e1a00007 	mov	r0, r7
    4238:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    423c:	e12fff1e 	bx	lr

00004240 <_fwalk_reent>:
    4240:	e92d45f8 	push	{r3, r4, r5, r6, r7, r8, sl, lr}
    4244:	e2906e2e 	adds	r6, r0, #736	; 0x2e0
    4248:	e1a08000 	mov	r8, r0
    424c:	e1a0a001 	mov	sl, r1
    4250:	01a07006 	moveq	r7, r6
    4254:	0a000018 	beq	42bc <_fwalk_reent+0x7c>
    4258:	e3a07000 	mov	r7, #0
    425c:	e5965004 	ldr	r5, [r6, #4]
    4260:	e2555001 	subs	r5, r5, #1
    4264:	e5964008 	ldr	r4, [r6, #8]
    4268:	4a000010 	bmi	42b0 <_fwalk_reent+0x70>
    426c:	e1d430bc 	ldrh	r3, [r4, #12]
    4270:	e3530000 	cmp	r3, #0
    4274:	e2455001 	sub	r5, r5, #1
    4278:	0a000009 	beq	42a4 <_fwalk_reent+0x64>
    427c:	e3530001 	cmp	r3, #1
    4280:	9a000007 	bls	42a4 <_fwalk_reent+0x64>
    4284:	e1d430fe 	ldrsh	r3, [r4, #14]
    4288:	e3730001 	cmn	r3, #1
    428c:	e1a01004 	mov	r1, r4
    4290:	e1a00008 	mov	r0, r8
    4294:	0a000002 	beq	42a4 <_fwalk_reent+0x64>
    4298:	e1a0e00f 	mov	lr, pc
    429c:	e12fff1a 	bx	sl
    42a0:	e1877000 	orr	r7, r7, r0
    42a4:	e3750001 	cmn	r5, #1
    42a8:	e2844068 	add	r4, r4, #104	; 0x68
    42ac:	1affffee 	bne	426c <_fwalk_reent+0x2c>
    42b0:	e5966000 	ldr	r6, [r6]
    42b4:	e3560000 	cmp	r6, #0
    42b8:	1affffe7 	bne	425c <_fwalk_reent+0x1c>
    42bc:	e1a00007 	mov	r0, r7
    42c0:	e8bd45f8 	pop	{r3, r4, r5, r6, r7, r8, sl, lr}
    42c4:	e12fff1e 	bx	lr

000042c8 <memset>:
    42c8:	e3100003 	tst	r0, #3
    42cc:	e92d0030 	push	{r4, r5}
    42d0:	e1a03000 	mov	r3, r0
    42d4:	0a000035 	beq	43b0 <memset+0xe8>
    42d8:	e3520000 	cmp	r2, #0
    42dc:	120140ff 	andne	r4, r1, #255	; 0xff
    42e0:	1a000002 	bne	42f0 <memset+0x28>
    42e4:	ea00002f 	b	43a8 <memset+0xe0>
    42e8:	e3520000 	cmp	r2, #0
    42ec:	0a00002d 	beq	43a8 <memset+0xe0>
    42f0:	e4c34001 	strb	r4, [r3], #1
    42f4:	e3130003 	tst	r3, #3
    42f8:	e2422001 	sub	r2, r2, #1
    42fc:	e1a0c003 	mov	ip, r3
    4300:	1afffff8 	bne	42e8 <memset+0x20>
    4304:	e3520003 	cmp	r2, #3
    4308:	9a000020 	bls	4390 <memset+0xc8>
    430c:	e20140ff 	and	r4, r1, #255	; 0xff
    4310:	e352000f 	cmp	r2, #15
    4314:	e1844404 	orr	r4, r4, r4, lsl #8
    4318:	e1844804 	orr	r4, r4, r4, lsl #16
    431c:	81a0300c 	movhi	r3, ip
    4320:	81a05002 	movhi	r5, r2
    4324:	9a00000e 	bls	4364 <memset+0x9c>
    4328:	e2455010 	sub	r5, r5, #16
    432c:	e355000f 	cmp	r5, #15
    4330:	e5834000 	str	r4, [r3]
    4334:	e5834004 	str	r4, [r3, #4]
    4338:	e5834008 	str	r4, [r3, #8]
    433c:	e583400c 	str	r4, [r3, #12]
    4340:	e2833010 	add	r3, r3, #16
    4344:	8afffff7 	bhi	4328 <memset+0x60>
    4348:	e2423010 	sub	r3, r2, #16
    434c:	e3c3300f 	bic	r3, r3, #15
    4350:	e202200f 	and	r2, r2, #15
    4354:	e2833010 	add	r3, r3, #16
    4358:	e3520003 	cmp	r2, #3
    435c:	e08cc003 	add	ip, ip, r3
    4360:	9a00000a 	bls	4390 <memset+0xc8>
    4364:	e1a0500c 	mov	r5, ip
    4368:	e1a03002 	mov	r3, r2
    436c:	e2433004 	sub	r3, r3, #4
    4370:	e3530003 	cmp	r3, #3
    4374:	e4854004 	str	r4, [r5], #4
    4378:	8afffffb 	bhi	436c <memset+0xa4>
    437c:	e2423004 	sub	r3, r2, #4
    4380:	e3c33003 	bic	r3, r3, #3
    4384:	e2833004 	add	r3, r3, #4
    4388:	e2022003 	and	r2, r2, #3
    438c:	e08cc003 	add	ip, ip, r3
    4390:	e3520000 	cmp	r2, #0
    4394:	120110ff 	andne	r1, r1, #255	; 0xff
    4398:	0a000002 	beq	43a8 <memset+0xe0>
    439c:	e2522001 	subs	r2, r2, #1
    43a0:	e4cc1001 	strb	r1, [ip], #1
    43a4:	1afffffc 	bne	439c <memset+0xd4>
    43a8:	e8bd0030 	pop	{r4, r5}
    43ac:	e12fff1e 	bx	lr
    43b0:	e1a0c000 	mov	ip, r0
    43b4:	eaffffd2 	b	4304 <memset+0x3c>

000043b8 <cleanup_glue>:
    43b8:	e92d4038 	push	{r3, r4, r5, lr}
    43bc:	e1a04001 	mov	r4, r1
    43c0:	e5911000 	ldr	r1, [r1]
    43c4:	e3510000 	cmp	r1, #0
    43c8:	e1a05000 	mov	r5, r0
    43cc:	1bfffff9 	blne	43b8 <cleanup_glue>
    43d0:	e1a00005 	mov	r0, r5
    43d4:	e1a01004 	mov	r1, r4
    43d8:	ebfffedf 	bl	3f5c <_free_r>
    43dc:	e8bd4038 	pop	{r3, r4, r5, lr}
    43e0:	e12fff1e 	bx	lr

000043e4 <_reclaim_reent>:
    43e4:	e59f30fc 	ldr	r3, [pc, #252]	; 44e8 <_reclaim_reent+0x104>
    43e8:	e5933000 	ldr	r3, [r3]
    43ec:	e1500003 	cmp	r0, r3
    43f0:	e92d4070 	push	{r4, r5, r6, lr}
    43f4:	e1a05000 	mov	r5, r0
    43f8:	0a00002e 	beq	44b8 <_reclaim_reent+0xd4>
    43fc:	e590304c 	ldr	r3, [r0, #76]	; 0x4c
    4400:	e3530000 	cmp	r3, #0
    4404:	0a000013 	beq	4458 <_reclaim_reent+0x74>
    4408:	e3a02000 	mov	r2, #0
    440c:	e1a06002 	mov	r6, r2
    4410:	e7931102 	ldr	r1, [r3, r2, lsl #2]
    4414:	e3510000 	cmp	r1, #0
    4418:	1a000001 	bne	4424 <_reclaim_reent+0x40>
    441c:	ea000006 	b	443c <_reclaim_reent+0x58>
    4420:	e1a01004 	mov	r1, r4
    4424:	e5914000 	ldr	r4, [r1]
    4428:	e1a00005 	mov	r0, r5
    442c:	ebfffeca 	bl	3f5c <_free_r>
    4430:	e3540000 	cmp	r4, #0
    4434:	1afffff9 	bne	4420 <_reclaim_reent+0x3c>
    4438:	e595304c 	ldr	r3, [r5, #76]	; 0x4c
    443c:	e2866001 	add	r6, r6, #1
    4440:	e3560020 	cmp	r6, #32
    4444:	e1a02006 	mov	r2, r6
    4448:	1afffff0 	bne	4410 <_reclaim_reent+0x2c>
    444c:	e1a00005 	mov	r0, r5
    4450:	e1a01003 	mov	r1, r3
    4454:	ebfffec0 	bl	3f5c <_free_r>
    4458:	e5951040 	ldr	r1, [r5, #64]	; 0x40
    445c:	e3510000 	cmp	r1, #0
    4460:	11a00005 	movne	r0, r5
    4464:	1bfffebc 	blne	3f5c <_free_r>
    4468:	e5951148 	ldr	r1, [r5, #328]	; 0x148
    446c:	e3510000 	cmp	r1, #0
    4470:	0a000009 	beq	449c <_reclaim_reent+0xb8>
    4474:	e2856f53 	add	r6, r5, #332	; 0x14c
    4478:	e1510006 	cmp	r1, r6
    447c:	1a000001 	bne	4488 <_reclaim_reent+0xa4>
    4480:	ea000005 	b	449c <_reclaim_reent+0xb8>
    4484:	e1a01004 	mov	r1, r4
    4488:	e5914000 	ldr	r4, [r1]
    448c:	e1a00005 	mov	r0, r5
    4490:	ebfffeb1 	bl	3f5c <_free_r>
    4494:	e1560004 	cmp	r6, r4
    4498:	1afffff9 	bne	4484 <_reclaim_reent+0xa0>
    449c:	e5951054 	ldr	r1, [r5, #84]	; 0x54
    44a0:	e3510000 	cmp	r1, #0
    44a4:	11a00005 	movne	r0, r5
    44a8:	1bfffeab 	blne	3f5c <_free_r>
    44ac:	e5953038 	ldr	r3, [r5, #56]	; 0x38
    44b0:	e3530000 	cmp	r3, #0
    44b4:	1a000001 	bne	44c0 <_reclaim_reent+0xdc>
    44b8:	e8bd4070 	pop	{r4, r5, r6, lr}
    44bc:	e12fff1e 	bx	lr
    44c0:	e1a00005 	mov	r0, r5
    44c4:	e595c03c 	ldr	ip, [r5, #60]	; 0x3c
    44c8:	e1a0e00f 	mov	lr, pc
    44cc:	e12fff1c 	bx	ip
    44d0:	e59512e0 	ldr	r1, [r5, #736]	; 0x2e0
    44d4:	e3510000 	cmp	r1, #0
    44d8:	0afffff6 	beq	44b8 <_reclaim_reent+0xd4>
    44dc:	e1a00005 	mov	r0, r5
    44e0:	e8bd4070 	pop	{r4, r5, r6, lr}
    44e4:	eaffffb3 	b	43b8 <cleanup_glue>
    44e8:	40000610 	.word	0x40000610

000044ec <_wrapup_reent>:
    44ec:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    44f0:	e2507000 	subs	r7, r0, #0
    44f4:	059f3060 	ldreq	r3, [pc, #96]	; 455c <_wrapup_reent+0x70>
    44f8:	05937000 	ldreq	r7, [r3]
    44fc:	e5976148 	ldr	r6, [r7, #328]	; 0x148
    4500:	e3560000 	cmp	r6, #0
    4504:	0a00000d 	beq	4540 <_wrapup_reent+0x54>
    4508:	e5965004 	ldr	r5, [r6, #4]
    450c:	e2554001 	subs	r4, r5, #1
    4510:	4a000007 	bmi	4534 <_wrapup_reent+0x48>
    4514:	e2855002 	add	r5, r5, #2
    4518:	e0865105 	add	r5, r6, r5, lsl #2
    451c:	e5353004 	ldr	r3, [r5, #-4]!
    4520:	e2444001 	sub	r4, r4, #1
    4524:	e1a0e00f 	mov	lr, pc
    4528:	e12fff13 	bx	r3
    452c:	e3740001 	cmn	r4, #1
    4530:	1afffff9 	bne	451c <_wrapup_reent+0x30>
    4534:	e5966000 	ldr	r6, [r6]
    4538:	e3560000 	cmp	r6, #0
    453c:	1afffff1 	bne	4508 <_wrapup_reent+0x1c>
    4540:	e597303c 	ldr	r3, [r7, #60]	; 0x3c
    4544:	e3530000 	cmp	r3, #0
    4548:	11a00007 	movne	r0, r7
    454c:	11a0e00f 	movne	lr, pc
    4550:	112fff13 	bxne	r3
    4554:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
    4558:	e12fff1e 	bx	lr
    455c:	40000610 	.word	0x40000610

00004560 <__sread>:
    4560:	e92d4010 	push	{r4, lr}
    4564:	e1a04001 	mov	r4, r1
    4568:	e1d110fe 	ldrsh	r1, [r1, #14]
    456c:	eb000153 	bl	4ac0 <_read_r>
    4570:	e3500000 	cmp	r0, #0
    4574:	a5943050 	ldrge	r3, [r4, #80]	; 0x50
    4578:	b1d430bc 	ldrhlt	r3, [r4, #12]
    457c:	a0833000 	addge	r3, r3, r0
    4580:	b3c33a01 	biclt	r3, r3, #4096	; 0x1000
    4584:	a5843050 	strge	r3, [r4, #80]	; 0x50
    4588:	b1c430bc 	strhlt	r3, [r4, #12]
    458c:	e8bd4010 	pop	{r4, lr}
    4590:	e12fff1e 	bx	lr

00004594 <__seofread>:
    4594:	e3a00000 	mov	r0, #0
    4598:	e12fff1e 	bx	lr

0000459c <__swrite>:
    459c:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    45a0:	e1a04001 	mov	r4, r1
    45a4:	e1d110bc 	ldrh	r1, [r1, #12]
    45a8:	e3110c01 	tst	r1, #256	; 0x100
    45ac:	e1a07000 	mov	r7, r0
    45b0:	e1a06002 	mov	r6, r2
    45b4:	e1a05003 	mov	r5, r3
    45b8:	0a000004 	beq	45d0 <__swrite+0x34>
    45bc:	e1d410fe 	ldrsh	r1, [r4, #14]
    45c0:	e3a02000 	mov	r2, #0
    45c4:	e3a03002 	mov	r3, #2
    45c8:	eb00012b 	bl	4a7c <_lseek_r>
    45cc:	e1d410bc 	ldrh	r1, [r4, #12]
    45d0:	e3c11a01 	bic	r1, r1, #4096	; 0x1000
    45d4:	e1c410bc 	strh	r1, [r4, #12]
    45d8:	e1a00007 	mov	r0, r7
    45dc:	e1d410fe 	ldrsh	r1, [r4, #14]
    45e0:	e1a02006 	mov	r2, r6
    45e4:	e1a03005 	mov	r3, r5
    45e8:	eb000013 	bl	463c <_write_r>
    45ec:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
    45f0:	e12fff1e 	bx	lr

000045f4 <__sseek>:
    45f4:	e92d4010 	push	{r4, lr}
    45f8:	e1a04001 	mov	r4, r1
    45fc:	e1d110fe 	ldrsh	r1, [r1, #14]
    4600:	eb00011d 	bl	4a7c <_lseek_r>
    4604:	e1d430bc 	ldrh	r3, [r4, #12]
    4608:	e3700001 	cmn	r0, #1
    460c:	03c33a01 	biceq	r3, r3, #4096	; 0x1000
    4610:	13833a01 	orrne	r3, r3, #4096	; 0x1000
    4614:	01c430bc 	strheq	r3, [r4, #12]
    4618:	11c430bc 	strhne	r3, [r4, #12]
    461c:	15840050 	strne	r0, [r4, #80]	; 0x50
    4620:	e8bd4010 	pop	{r4, lr}
    4624:	e12fff1e 	bx	lr

00004628 <__sclose>:
    4628:	e92d4008 	push	{r3, lr}
    462c:	e1d110fe 	ldrsh	r1, [r1, #14]
    4630:	eb000012 	bl	4680 <_close_r>
    4634:	e8bd4008 	pop	{r3, lr}
    4638:	e12fff1e 	bx	lr

0000463c <_write_r>:
    463c:	e92d4038 	push	{r3, r4, r5, lr}
    4640:	e59f4034 	ldr	r4, [pc, #52]	; 467c <_write_r+0x40>
    4644:	e1a05000 	mov	r5, r0
    4648:	e1a00001 	mov	r0, r1
    464c:	e1a01002 	mov	r1, r2
    4650:	e1a02003 	mov	r2, r3
    4654:	e3a03000 	mov	r3, #0
    4658:	e5843000 	str	r3, [r4]
    465c:	ebfffbd6 	bl	35bc <_write>
    4660:	e3700001 	cmn	r0, #1
    4664:	1a000002 	bne	4674 <_write_r+0x38>
    4668:	e5943000 	ldr	r3, [r4]
    466c:	e3530000 	cmp	r3, #0
    4670:	15853000 	strne	r3, [r5]
    4674:	e8bd4038 	pop	{r3, r4, r5, lr}
    4678:	e12fff1e 	bx	lr
    467c:	40003330 	.word	0x40003330

00004680 <_close_r>:
    4680:	e92d4038 	push	{r3, r4, r5, lr}
    4684:	e59f402c 	ldr	r4, [pc, #44]	; 46b8 <_close_r+0x38>
    4688:	e3a03000 	mov	r3, #0
    468c:	e1a05000 	mov	r5, r0
    4690:	e1a00001 	mov	r0, r1
    4694:	e5843000 	str	r3, [r4]
    4698:	ebfffc4b 	bl	37cc <_close>
    469c:	e3700001 	cmn	r0, #1
    46a0:	1a000002 	bne	46b0 <_close_r+0x30>
    46a4:	e5943000 	ldr	r3, [r4]
    46a8:	e3530000 	cmp	r3, #0
    46ac:	15853000 	strne	r3, [r5]
    46b0:	e8bd4038 	pop	{r3, r4, r5, lr}
    46b4:	e12fff1e 	bx	lr
    46b8:	40003330 	.word	0x40003330

000046bc <_fclose_r>:
    46bc:	e92d4070 	push	{r4, r5, r6, lr}
    46c0:	e2514000 	subs	r4, r1, #0
    46c4:	e1a05000 	mov	r5, r0
    46c8:	01a06004 	moveq	r6, r4
    46cc:	0a000007 	beq	46f0 <_fclose_r+0x34>
    46d0:	e3500000 	cmp	r0, #0
    46d4:	0a000002 	beq	46e4 <_fclose_r+0x28>
    46d8:	e5903038 	ldr	r3, [r0, #56]	; 0x38
    46dc:	e3530000 	cmp	r3, #0
    46e0:	0a00002a 	beq	4790 <_fclose_r+0xd4>
    46e4:	e1d460fc 	ldrsh	r6, [r4, #12]
    46e8:	e3560000 	cmp	r6, #0
    46ec:	1a000002 	bne	46fc <_fclose_r+0x40>
    46f0:	e1a00006 	mov	r0, r6
    46f4:	e8bd4070 	pop	{r4, r5, r6, lr}
    46f8:	e12fff1e 	bx	lr
    46fc:	e1a00005 	mov	r0, r5
    4700:	e1a01004 	mov	r1, r4
    4704:	eb0000b7 	bl	49e8 <_fflush_r>
    4708:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
    470c:	e3530000 	cmp	r3, #0
    4710:	e1a06000 	mov	r6, r0
    4714:	0a000005 	beq	4730 <_fclose_r+0x74>
    4718:	e1a00005 	mov	r0, r5
    471c:	e594101c 	ldr	r1, [r4, #28]
    4720:	e1a0e00f 	mov	lr, pc
    4724:	e12fff13 	bx	r3
    4728:	e3500000 	cmp	r0, #0
    472c:	b3e06000 	mvnlt	r6, #0
    4730:	e1d430bc 	ldrh	r3, [r4, #12]
    4734:	e3130080 	tst	r3, #128	; 0x80
    4738:	1a000016 	bne	4798 <_fclose_r+0xdc>
    473c:	e5941030 	ldr	r1, [r4, #48]	; 0x30
    4740:	e3510000 	cmp	r1, #0
    4744:	0a000005 	beq	4760 <_fclose_r+0xa4>
    4748:	e2843040 	add	r3, r4, #64	; 0x40
    474c:	e1510003 	cmp	r1, r3
    4750:	11a00005 	movne	r0, r5
    4754:	1bfffe00 	blne	3f5c <_free_r>
    4758:	e3a03000 	mov	r3, #0
    475c:	e5843030 	str	r3, [r4, #48]	; 0x30
    4760:	e5941044 	ldr	r1, [r4, #68]	; 0x44
    4764:	e3510000 	cmp	r1, #0
    4768:	0a000003 	beq	477c <_fclose_r+0xc0>
    476c:	e1a00005 	mov	r0, r5
    4770:	ebfffdf9 	bl	3f5c <_free_r>
    4774:	e3a03000 	mov	r3, #0
    4778:	e5843044 	str	r3, [r4, #68]	; 0x44
    477c:	ebfffda1 	bl	3e08 <__sfp_lock_acquire>
    4780:	e3a03000 	mov	r3, #0
    4784:	e1c430bc 	strh	r3, [r4, #12]
    4788:	ebfffd9f 	bl	3e0c <__sfp_lock_release>
    478c:	eaffffd7 	b	46f0 <_fclose_r+0x34>
    4790:	ebfffd37 	bl	3c74 <__sinit>
    4794:	eaffffd2 	b	46e4 <_fclose_r+0x28>
    4798:	e1a00005 	mov	r0, r5
    479c:	e5941010 	ldr	r1, [r4, #16]
    47a0:	ebfffded 	bl	3f5c <_free_r>
    47a4:	eaffffe4 	b	473c <_fclose_r+0x80>

000047a8 <fclose>:
    47a8:	e59f3008 	ldr	r3, [pc, #8]	; 47b8 <fclose+0x10>
    47ac:	e1a01000 	mov	r1, r0
    47b0:	e5930000 	ldr	r0, [r3]
    47b4:	eaffffc0 	b	46bc <_fclose_r>
    47b8:	40000610 	.word	0x40000610

000047bc <__sflush_r>:
    47bc:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    47c0:	e1a04001 	mov	r4, r1
    47c4:	e1d110bc 	ldrh	r1, [r1, #12]
    47c8:	e1a03801 	lsl	r3, r1, #16
    47cc:	e1a03843 	asr	r3, r3, #16
    47d0:	e2137008 	ands	r7, r3, #8
    47d4:	e1a05000 	mov	r5, r0
    47d8:	1a000034 	bne	48b0 <__sflush_r+0xf4>
    47dc:	e5943004 	ldr	r3, [r4, #4]
    47e0:	e3811b02 	orr	r1, r1, #2048	; 0x800
    47e4:	e3530000 	cmp	r3, #0
    47e8:	e1c410bc 	strh	r1, [r4, #12]
    47ec:	da000051 	ble	4938 <__sflush_r+0x17c>
    47f0:	e594c028 	ldr	ip, [r4, #40]	; 0x28
    47f4:	e35c0000 	cmp	ip, #0
    47f8:	01a0000c 	moveq	r0, ip
    47fc:	0a000049 	beq	4928 <__sflush_r+0x16c>
    4800:	e2117a01 	ands	r7, r1, #4096	; 0x1000
    4804:	e3a03000 	mov	r3, #0
    4808:	e5956000 	ldr	r6, [r5]
    480c:	15942050 	ldrne	r2, [r4, #80]	; 0x50
    4810:	e5853000 	str	r3, [r5]
    4814:	0a000050 	beq	495c <__sflush_r+0x1a0>
    4818:	e3110004 	tst	r1, #4
    481c:	0a000005 	beq	4838 <__sflush_r+0x7c>
    4820:	e5941030 	ldr	r1, [r4, #48]	; 0x30
    4824:	e5943004 	ldr	r3, [r4, #4]
    4828:	e3510000 	cmp	r1, #0
    482c:	e0632002 	rsb	r2, r3, r2
    4830:	1594303c 	ldrne	r3, [r4, #60]	; 0x3c
    4834:	10632002 	rsbne	r2, r3, r2
    4838:	e1a00005 	mov	r0, r5
    483c:	e594101c 	ldr	r1, [r4, #28]
    4840:	e3a03000 	mov	r3, #0
    4844:	e1a0e00f 	mov	lr, pc
    4848:	e12fff1c 	bx	ip
    484c:	e3700001 	cmn	r0, #1
    4850:	0a00004d 	beq	498c <__sflush_r+0x1d0>
    4854:	e1d430bc 	ldrh	r3, [r4, #12]
    4858:	e5942010 	ldr	r2, [r4, #16]
    485c:	e3c33b02 	bic	r3, r3, #2048	; 0x800
    4860:	e3130a01 	tst	r3, #4096	; 0x1000
    4864:	e1c430bc 	strh	r3, [r4, #12]
    4868:	e3a03000 	mov	r3, #0
    486c:	e884000c 	stm	r4, {r2, r3}
    4870:	0a000002 	beq	4880 <__sflush_r+0xc4>
    4874:	e3700001 	cmn	r0, #1
    4878:	0a000033 	beq	494c <__sflush_r+0x190>
    487c:	e5840050 	str	r0, [r4, #80]	; 0x50
    4880:	e5941030 	ldr	r1, [r4, #48]	; 0x30
    4884:	e3510000 	cmp	r1, #0
    4888:	e5856000 	str	r6, [r5]
    488c:	01a00001 	moveq	r0, r1
    4890:	0a000024 	beq	4928 <__sflush_r+0x16c>
    4894:	e2843040 	add	r3, r4, #64	; 0x40
    4898:	e1510003 	cmp	r1, r3
    489c:	11a00005 	movne	r0, r5
    48a0:	1bfffdad 	blne	3f5c <_free_r>
    48a4:	e3a00000 	mov	r0, #0
    48a8:	e5840030 	str	r0, [r4, #48]	; 0x30
    48ac:	ea00001d 	b	4928 <__sflush_r+0x16c>
    48b0:	e5947010 	ldr	r7, [r4, #16]
    48b4:	e3570000 	cmp	r7, #0
    48b8:	0a000021 	beq	4944 <__sflush_r+0x188>
    48bc:	e5946000 	ldr	r6, [r4]
    48c0:	e3130003 	tst	r3, #3
    48c4:	05943014 	ldreq	r3, [r4, #20]
    48c8:	e0676006 	rsb	r6, r7, r6
    48cc:	13a03000 	movne	r3, #0
    48d0:	e3560000 	cmp	r6, #0
    48d4:	e5847000 	str	r7, [r4]
    48d8:	e5843008 	str	r3, [r4, #8]
    48dc:	ca000003 	bgt	48f0 <__sflush_r+0x134>
    48e0:	ea000012 	b	4930 <__sflush_r+0x174>
    48e4:	e3560000 	cmp	r6, #0
    48e8:	e0877000 	add	r7, r7, r0
    48ec:	da00000f 	ble	4930 <__sflush_r+0x174>
    48f0:	e1a03006 	mov	r3, r6
    48f4:	e1a02007 	mov	r2, r7
    48f8:	e1a00005 	mov	r0, r5
    48fc:	e594101c 	ldr	r1, [r4, #28]
    4900:	e594c024 	ldr	ip, [r4, #36]	; 0x24
    4904:	e1a0e00f 	mov	lr, pc
    4908:	e12fff1c 	bx	ip
    490c:	e3500000 	cmp	r0, #0
    4910:	e0606006 	rsb	r6, r0, r6
    4914:	cafffff2 	bgt	48e4 <__sflush_r+0x128>
    4918:	e1d430bc 	ldrh	r3, [r4, #12]
    491c:	e3833040 	orr	r3, r3, #64	; 0x40
    4920:	e1c430bc 	strh	r3, [r4, #12]
    4924:	e3e00000 	mvn	r0, #0
    4928:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
    492c:	e12fff1e 	bx	lr
    4930:	e3a00000 	mov	r0, #0
    4934:	eafffffb 	b	4928 <__sflush_r+0x16c>
    4938:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
    493c:	e3530000 	cmp	r3, #0
    4940:	caffffaa 	bgt	47f0 <__sflush_r+0x34>
    4944:	e1a00007 	mov	r0, r7
    4948:	eafffff6 	b	4928 <__sflush_r+0x16c>
    494c:	e5953000 	ldr	r3, [r5]
    4950:	e3530000 	cmp	r3, #0
    4954:	05840050 	streq	r0, [r4, #80]	; 0x50
    4958:	eaffffc8 	b	4880 <__sflush_r+0xc4>
    495c:	e1a02007 	mov	r2, r7
    4960:	e1a00005 	mov	r0, r5
    4964:	e594101c 	ldr	r1, [r4, #28]
    4968:	e3a03001 	mov	r3, #1
    496c:	e1a0e00f 	mov	lr, pc
    4970:	e12fff1c 	bx	ip
    4974:	e3700001 	cmn	r0, #1
    4978:	e1a02000 	mov	r2, r0
    497c:	0a00000d 	beq	49b8 <__sflush_r+0x1fc>
    4980:	e1d410bc 	ldrh	r1, [r4, #12]
    4984:	e594c028 	ldr	ip, [r4, #40]	; 0x28
    4988:	eaffffa2 	b	4818 <__sflush_r+0x5c>
    498c:	e5953000 	ldr	r3, [r5]
    4990:	e3530000 	cmp	r3, #0
    4994:	0affffae 	beq	4854 <__sflush_r+0x98>
    4998:	e353001d 	cmp	r3, #29
    499c:	0affffac 	beq	4854 <__sflush_r+0x98>
    49a0:	e3530016 	cmp	r3, #22
    49a4:	0affffaa 	beq	4854 <__sflush_r+0x98>
    49a8:	e1d430bc 	ldrh	r3, [r4, #12]
    49ac:	e3833040 	orr	r3, r3, #64	; 0x40
    49b0:	e1c430bc 	strh	r3, [r4, #12]
    49b4:	eaffffdb 	b	4928 <__sflush_r+0x16c>
    49b8:	e5953000 	ldr	r3, [r5]
    49bc:	e3530000 	cmp	r3, #0
    49c0:	0affffee 	beq	4980 <__sflush_r+0x1c4>
    49c4:	e353001d 	cmp	r3, #29
    49c8:	13530016 	cmpne	r3, #22
    49cc:	11d430bc 	ldrhne	r3, [r4, #12]
    49d0:	13833040 	orrne	r3, r3, #64	; 0x40
    49d4:	05856000 	streq	r6, [r5]
    49d8:	01a00007 	moveq	r0, r7
    49dc:	11c430bc 	strhne	r3, [r4, #12]
    49e0:	11a00002 	movne	r0, r2
    49e4:	eaffffcf 	b	4928 <__sflush_r+0x16c>

000049e8 <_fflush_r>:
    49e8:	e92d4010 	push	{r4, lr}
    49ec:	e2504000 	subs	r4, r0, #0
    49f0:	e24dd008 	sub	sp, sp, #8
    49f4:	0a000002 	beq	4a04 <_fflush_r+0x1c>
    49f8:	e5943038 	ldr	r3, [r4, #56]	; 0x38
    49fc:	e3530000 	cmp	r3, #0
    4a00:	0a000009 	beq	4a2c <_fflush_r+0x44>
    4a04:	e1d100fc 	ldrsh	r0, [r1, #12]
    4a08:	e3500000 	cmp	r0, #0
    4a0c:	1a000002 	bne	4a1c <_fflush_r+0x34>
    4a10:	e28dd008 	add	sp, sp, #8
    4a14:	e8bd4010 	pop	{r4, lr}
    4a18:	e12fff1e 	bx	lr
    4a1c:	e1a00004 	mov	r0, r4
    4a20:	e28dd008 	add	sp, sp, #8
    4a24:	e8bd4010 	pop	{r4, lr}
    4a28:	eaffff63 	b	47bc <__sflush_r>
    4a2c:	e58d1004 	str	r1, [sp, #4]
    4a30:	ebfffc8f 	bl	3c74 <__sinit>
    4a34:	e59d1004 	ldr	r1, [sp, #4]
    4a38:	eafffff1 	b	4a04 <_fflush_r+0x1c>

00004a3c <fflush>:
    4a3c:	e2501000 	subs	r1, r0, #0
    4a40:	e92d4008 	push	{r3, lr}
    4a44:	0a000003 	beq	4a58 <fflush+0x1c>
    4a48:	e59f3020 	ldr	r3, [pc, #32]	; 4a70 <fflush+0x34>
    4a4c:	e5930000 	ldr	r0, [r3]
    4a50:	e8bd4008 	pop	{r3, lr}
    4a54:	eaffffe3 	b	49e8 <_fflush_r>
    4a58:	e59f3014 	ldr	r3, [pc, #20]	; 4a74 <fflush+0x38>
    4a5c:	e59f1014 	ldr	r1, [pc, #20]	; 4a78 <fflush+0x3c>
    4a60:	e5930000 	ldr	r0, [r3]
    4a64:	ebfffdf5 	bl	4240 <_fwalk_reent>
    4a68:	e8bd4008 	pop	{r3, lr}
    4a6c:	e12fff1e 	bx	lr
    4a70:	40000610 	.word	0x40000610
    4a74:	00004b2c 	.word	0x00004b2c
    4a78:	000049e8 	.word	0x000049e8

00004a7c <_lseek_r>:
    4a7c:	e92d4038 	push	{r3, r4, r5, lr}
    4a80:	e59f4034 	ldr	r4, [pc, #52]	; 4abc <_lseek_r+0x40>
    4a84:	e1a05000 	mov	r5, r0
    4a88:	e1a00001 	mov	r0, r1
    4a8c:	e1a01002 	mov	r1, r2
    4a90:	e1a02003 	mov	r2, r3
    4a94:	e3a03000 	mov	r3, #0
    4a98:	e5843000 	str	r3, [r4]
    4a9c:	ebfffaae 	bl	355c <_lseek>
    4aa0:	e3700001 	cmn	r0, #1
    4aa4:	1a000002 	bne	4ab4 <_lseek_r+0x38>
    4aa8:	e5943000 	ldr	r3, [r4]
    4aac:	e3530000 	cmp	r3, #0
    4ab0:	15853000 	strne	r3, [r5]
    4ab4:	e8bd4038 	pop	{r3, r4, r5, lr}
    4ab8:	e12fff1e 	bx	lr
    4abc:	40003330 	.word	0x40003330

00004ac0 <_read_r>:
    4ac0:	e92d4038 	push	{r3, r4, r5, lr}
    4ac4:	e59f4034 	ldr	r4, [pc, #52]	; 4b00 <_read_r+0x40>
    4ac8:	e1a05000 	mov	r5, r0
    4acc:	e1a00001 	mov	r0, r1
    4ad0:	e1a01002 	mov	r1, r2
    4ad4:	e1a02003 	mov	r2, r3
    4ad8:	e3a03000 	mov	r3, #0
    4adc:	e5843000 	str	r3, [r4]
    4ae0:	ebfffa3b 	bl	33d4 <_read>
    4ae4:	e3700001 	cmn	r0, #1
    4ae8:	1a000002 	bne	4af8 <_read_r+0x38>
    4aec:	e5943000 	ldr	r3, [r4]
    4af0:	e3530000 	cmp	r3, #0
    4af4:	15853000 	strne	r3, [r5]
    4af8:	e8bd4038 	pop	{r3, r4, r5, lr}
    4afc:	e12fff1e 	bx	lr
    4b00:	40003330 	.word	0x40003330
    4b04:	3b9aca00 	.word	0x3b9aca00
    4b08:	05f5e100 	.word	0x05f5e100
    4b0c:	00989680 	.word	0x00989680
    4b10:	000f4240 	.word	0x000f4240
    4b14:	000186a0 	.word	0x000186a0
    4b18:	00002710 	.word	0x00002710
    4b1c:	000003e8 	.word	0x000003e8
    4b20:	00000064 	.word	0x00000064
    4b24:	0000000a 	.word	0x0000000a
    4b28:	00000001 	.word	0x00000001

00004b2c <_global_impure_ptr>:
    4b2c:	40000618 59524844 4e4f5453 52502045     ...@DHRYSTONE PR
    4b3c:	4152474f 53202c4d 20454d4f 49525453     OGRAM, SOME STRI
    4b4c:	0000474e 59524844 4e4f5453 52502045     NG..DHRYSTONE PR
    4b5c:	4152474f 31202c4d 20545327 49525453     OGRAM, 1'ST STRI
    4b6c:	0000474e 79726844 6e6f7473 65422065     NG..Dhrystone Be
    4b7c:	6d68636e 2c6b7261 72655620 6e6f6973     nchmark, Version
    4b8c:	312e3220 614c2820 6175676e 203a6567      2.1 (Language: 
    4b9c:	000a2943 20656854 626d756e 6f207265     C)..The number o
    4bac:	75722066 7420736e 756f7268 74206867     f runs through t
    4bbc:	62206568 68636e65 6b72616d 0000203a     he benchmark: ..
    4bcc:	59524844 4e4f5453 52502045 4152474f     DHRYSTONE PROGRA
    4bdc:	32202c4d 20444e27 49525453 0000474e     M, 2'ND STRING..
    4bec:	59524844 4e4f5453 52502045 4152474f     DHRYSTONE PROGRA
    4bfc:	33202c4d 20445227 49525453 0000474e     M, 3'RD STRING..
    4c0c:	20202020 20202020 756f6873 6220646c             should b
    4c1c:	20203a65 0a642520 00000000 6c6f6f42     e:   %d.....Bool
    4c2c:	6f6c475f 20203a62 20202020 20202020     _Glob:          
    4c3c:	0a642520 00000000 315f6843 6f6c475f      %d.....Ch_1_Glo
    4c4c:	20203a62 20202020 20202020 0a632520     b:           %c.
    4c5c:	00000000 20202020 20202020 756f6873     ....        shou
    4c6c:	6220646c 20203a65 0a632520 00000000     ld be:   %c.....
    4c7c:	00000041 325f6843 6f6c475f 20203a62     A...Ch_2_Glob:  
    4c8c:	20202020 20202020 0a632520 00000000              %c.....
    4c9c:	00000042 5f727241 6c475f31 385b626f     B...Arr_1_Glob[8
    4cac:	20203a5d 20202020 0a642520 00000000     ]:       %d.....
    4cbc:	5f727241 6c475f32 385b626f 5d375b5d     Arr_2_Glob[8][7]
    4ccc:	2020203a 0a642520 00000000 20202020     :    %d.....    
    4cdc:	20202020 756f6873 6220646c 20203a65         should be:  
    4cec:	6f6f6c20 2b207370 0a303120 00000000      loops + 10.....
    4cfc:	5f727450 626f6c47 000a3e2d 74502020     Ptr_Glob->..  Pt
    4d0c:	6f435f72 203a706d 20202020 20202020     r_Comp:         
    4d1c:	0a642520 00000000 20202020 20202020      %d.....        
    4d2c:	756f6873 6220646c 20203a65 6d692820     should be:   (im
    4d3c:	6d656c70 61746e65 6e6f6974 7065642d     plementation-dep
    4d4c:	65646e65 0a29746e 00000000 69442020     endent).....  Di
    4d5c:	3a726373 20202020 20202020 20202020     scr:            
    4d6c:	0a642520 00000000 00000030 6e452020      %d.....0...  En
    4d7c:	435f6d75 3a706d6f 20202020 20202020     um_Comp:        
    4d8c:	0a642520 00000000 6e492020 6f435f74      %d.....  Int_Co
    4d9c:	203a706d 20202020 20202020 0a642520     mp:          %d.
    4dac:	00000000 74532020 6f435f72 203a706d     ....  Str_Comp: 
    4dbc:	20202020 20202020 0a732520 00000000              %s.....
    4dcc:	20202020 20202020 756f6873 6220646c             should b
    4ddc:	20203a65 52484420 4f545359 5020454e     e:   DHRYSTONE P
    4dec:	52474f52 202c4d41 454d4f53 52545320     ROGRAM, SOME STR
    4dfc:	0a474e49 00000000 7478654e 7274505f     ING.....Next_Ptr
    4e0c:	6f6c475f 0a3e2d62 00000000 20202020     _Glob->.....    
    4e1c:	20202020 756f6873 6220646c 20203a65         should be:  
    4e2c:	6d692820 6d656c70 61746e65 6e6f6974      (implementation
    4e3c:	7065642d 65646e65 2c29746e 6d617320     -dependent), sam
    4e4c:	73612065 6f626120 000a6576 5f746e49     e as above..Int_
    4e5c:	6f4c5f31 20203a63 20202020 20202020     1_Loc:          
    4e6c:	0a642520 00000000 5f746e49 6f4c5f32      %d.....Int_2_Lo
    4e7c:	20203a63 20202020 20202020 0a642520     c:           %d.
    4e8c:	00000000 5f746e49 6f4c5f33 20203a63     ....Int_3_Loc:  
    4e9c:	20202020 20202020 0a642520 00000000              %d.....
    4eac:	6d756e45 636f4c5f 2020203a 20202020     Enum_Loc:       
    4ebc:	20202020 0a642520 00000000 5f727453          %d.....Str_
    4ecc:	6f4c5f31 20203a63 20202020 20202020     1_Loc:          
    4edc:	0a732520 00000000 20202020 20202020      %s.....        
    4eec:	756f6873 6220646c 20203a65 52484420     should be:   DHR
    4efc:	4f545359 5020454e 52474f52 202c4d41     YSTONE PROGRAM, 
    4f0c:	54532731 52545320 0a474e49 00000000     1'ST STRING.....
    4f1c:	5f727453 6f4c5f32 20203a63 20202020     Str_2_Loc:      
    4f2c:	20202020 0a732520 00000000 20202020          %s.....    
    4f3c:	20202020 756f6873 6220646c 20203a65         should be:  
    4f4c:	52484420 4f545359 5020454e 52474f52      DHRYSTONE PROGR
    4f5c:	202c4d41 444e2732 52545320 0a474e49     AM, 2'ND STRING.
    4f6c:	00000000 74736554 6e757220 2064656e     ....Test runned 
    4f7c:	63637573 66737365 796c6c75 21212120     successfully !!!
    4f8c:	0000000a 504f4f4c 00203a53 454d4954     ....LOOPS: .TIME
    4f9c:	00203a20 63657845 6f697475 6e65206e      : .Execution en
    4fac:	000a7364 616e6946 6176206c 7365756c     ds..Final values
    4fbc:	20666f20 20656874 69726176 656c6261      of the variable
    4fcc:	73752073 69206465 6874206e 65622065     s used in the be
    4fdc:	6d68636e 3a6b7261 0000000a 5f746e49     nchmark:....Int_
    4fec:	626f6c47 2020203a 20202020 20202020     Glob:           
    4ffc:	0a642520 00000000 2d2d2d2d 2d2d2d2d      %d.....--------
    500c:	2d2d2d2d 41552d2d 49205452 4954494e     ------UART INITI
    501c:	5a494c41 2d2d4445 2d2d2d2d 2d2d2d2d     ALIZED----------
    502c:	2d2d2d2d 00000a0a 0074743a 00000043     ----....:tt.C...
